{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"de/","text":"Welcome to the BURST WIKI THIS PAGE NEEDS TRANSLATING INTO GERMAN Burst is an open source blockchain platform with multiple core-level features that has been running publicly since August 2014. It is a code fork of Nxt using Proof of Capacity (PoC) consensus, meaning that you can mine it with your disk space. What is Burst video animation How to start mining Burst Burst Software Burst Software Burstcoin Reference Software Latest Version: 2.3.0 Direct Download Burst Source Code Mobile App QBundle Full Guide Burst Features Arbitrary Messages Alias System Asset Exchange Automated transactions (Smart Contracts) Marketplace Summary of Features For Developers The Burst API The Burst API Examples The brs-default.properties file Reed-Solomon (RS) Address Format Burst Blockchain Tutorial QR Codes for RS Address Format Offline Transaction Signing How Transaction Processing Works Mining Reward Assignment Plotting Mining Get Support: Forum 1 | Forum 2 | Burst Discord | Burst Reddit About Burst What is Burst? Get started with Burst FAQ Website Resources General Information Information for Exchanges Exchanges Marketplace The Burstcoinist (News) More International websites Burst Whitepaper History of Burst Services and Tools Online wallets: PoCC , poolofd32th: 1 , 2 . Burst-Team: 3 , 4 , 5 TestNet: BAT Public TestNet Blockchain Explorer: BAT , PoCC , BurstXD , burstcoin.zone Network Observer: Luxe , PoCC Burst Today Pool uptime monitor Burstcoin Faucet Lists Forum: Burst-Team , GetBurst , Burst Reddit Join us! | Contribute","title":"Homepage"},{"location":"de/alias-system/","text":"Beschreibung Dieses Feature erm\u00f6glicht beliebige Texte durch Pseudonyme zu ersetzen. Es k\u00f6nnen Schl\u00fcsselw\u00f6rter oder Begriffe verwendet werden, um beispielsweise einen Namen, eine Telefonnummer, Hausanschrift, Webseite, E-Mail-Adresse oder eine Kontonummer mit einem Alias zu benennen. Beispielsweise k\u00f6nnten Sie den Alias \u201csuche\u201d f\u00fcr \u201c https://www.google.de \u201d definieren. Anschlie\u00dfend kann in einem Burst-f\u00e4higen Internetbrowser \u201cburst:suche\u201d als Adresse eingeben werden. Die Anfrage wird dann vom System in \u201c https://www.google.de \u201d \u00fcbersetzen. Eine h\u00e4ufige Anwendung ist ein einfach zu merkender Alias f\u00fcr die eigene Burst-Kontonummer. Da das Alias-System \u00f6ffentlich ist, eignet es sich aber zum Beispiel auch zur Implementierung eines dezentralisierten DNS-Systems, um Dom\u00e4nen-Namen f\u00fcr IP-Adressen zu hinterlegen. Um einen Alias zu erstellen \u00d6ffnet der Benutzer die Seite \u2018Aliasse\u2019 in seiner Wallet. Nach Klick auf den Schalter \u2018Alias registrieren\u2019 werden die gew\u00fcnschten Daten eingegeben. Soll der Alias sp\u00e4ter ge\u00e4ndert werden, kann derselbe Benutzer (Burst-Account) die Funktion \u2018Bearbeiten\u2019 hinter dem gew\u00fcnschten Eintrag verwendet. Andere Benutzer k\u00f6nnen keine \u00c4nderung veranlassen. Neue Aliasse erscheinen erst nach der Netzwerkbest\u00e4tigung (Blockgenerierung) im Wallet-Men\u00fc des Erstellers. Details Der Alias kann eine beliebige Anzahl von Buchstaben, Zahlen und Zeichen im Latin-Zeichensatz enthalten. Beispielsweise: \u201c173.194.112.174\u201d (eine IPv4-Adresse) \u201c2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d\u201d (IPv6) \u201cexample.com/meine-geheime-seite.php?parameter=wert\u201d (eine URI) \u201cmustermann@example.com\u201d (eine E-Mail-Adresse) \u201cTel. +44 20 81234567\u201d (Telefonnummer) ...oder auch \u201c \u201d. Beim Alias-Namen wird nicht zwischen Gro\u00df- und Kleinschreibung unterschieden. Es gibt zwei Methoden, um Burst-Aliasse ohne Plugins von Drittanbietern f\u00fcr im Webbrowser zu nutzen: Serverseitig : Der Webserver analysiert die Burst-Blockchain und ersetzt die Aliasse durch ihre Adressen, bevor die Dokumente an den Client gesendet werden. Clientseitig : Im Webbrowser wird ein JavaScript ausgef\u00fchrt, welches eine Verbindung zum Burst-Bootstrapping-Knoten herstellt. Es wird im Onload-Ereignis ausgef\u00fchrt und \u00fcbersetzt die Aliasse mittels Techniken, wie CORS oder JSON. \u00c4nderungen k\u00f6nnen nur von dem Konto ausgef\u00fchrt werden, welches den Alias urspr\u00fcnglich erstellt hat. Transfer oder Verkauf Aliasse k\u00f6nnen f\u00fcr eine Geb\u00fchr von 1 BURST \u00fcbertragen werden. Der Besitzer kann seienen Alias an einzelne Burst-Konten oder an die breite \u00d6ffentlichkeit verkaufen. Hierbei legt er den Preis beliebig fest. Typischer Verkaufsablauf Der Besitzer klickt im \u2018Aliasse\u2019-Men\u00fc auf den Schalter \u2018Verkaufen\u2019 und markiert \u2018An irgendjemand verkaufen\u2019. Er legt den Preis fest und best\u00e4tigt mit \u2018Alias verkaufen\u2019. Wenn sp\u00e4ter ein anderer Benutzer denselben Alias erstellen m\u00f6chten, erh\u00e4lt er die Meldung , dass dieser bereits vorhanden ist, aber zum Verkauf steht. Nach Klick auf den Link \u2018Kaufen\u2019 kann er den Alias zum angegebenen Preis \u00fcbernehmen. How-To Siehe Alias-System How-To . FAQ Siehe Alias System -Abschnitt in den FAQ .","title":"Alias-System"},{"location":"de/alias-system/#beschreibung","text":"Dieses Feature erm\u00f6glicht beliebige Texte durch Pseudonyme zu ersetzen. Es k\u00f6nnen Schl\u00fcsselw\u00f6rter oder Begriffe verwendet werden, um beispielsweise einen Namen, eine Telefonnummer, Hausanschrift, Webseite, E-Mail-Adresse oder eine Kontonummer mit einem Alias zu benennen. Beispielsweise k\u00f6nnten Sie den Alias \u201csuche\u201d f\u00fcr \u201c https://www.google.de \u201d definieren. Anschlie\u00dfend kann in einem Burst-f\u00e4higen Internetbrowser \u201cburst:suche\u201d als Adresse eingeben werden. Die Anfrage wird dann vom System in \u201c https://www.google.de \u201d \u00fcbersetzen. Eine h\u00e4ufige Anwendung ist ein einfach zu merkender Alias f\u00fcr die eigene Burst-Kontonummer. Da das Alias-System \u00f6ffentlich ist, eignet es sich aber zum Beispiel auch zur Implementierung eines dezentralisierten DNS-Systems, um Dom\u00e4nen-Namen f\u00fcr IP-Adressen zu hinterlegen. Um einen Alias zu erstellen \u00d6ffnet der Benutzer die Seite \u2018Aliasse\u2019 in seiner Wallet. Nach Klick auf den Schalter \u2018Alias registrieren\u2019 werden die gew\u00fcnschten Daten eingegeben. Soll der Alias sp\u00e4ter ge\u00e4ndert werden, kann derselbe Benutzer (Burst-Account) die Funktion \u2018Bearbeiten\u2019 hinter dem gew\u00fcnschten Eintrag verwendet. Andere Benutzer k\u00f6nnen keine \u00c4nderung veranlassen. Neue Aliasse erscheinen erst nach der Netzwerkbest\u00e4tigung (Blockgenerierung) im Wallet-Men\u00fc des Erstellers.","title":"Beschreibung"},{"location":"de/alias-system/#details","text":"Der Alias kann eine beliebige Anzahl von Buchstaben, Zahlen und Zeichen im Latin-Zeichensatz enthalten. Beispielsweise: \u201c173.194.112.174\u201d (eine IPv4-Adresse) \u201c2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d\u201d (IPv6) \u201cexample.com/meine-geheime-seite.php?parameter=wert\u201d (eine URI) \u201cmustermann@example.com\u201d (eine E-Mail-Adresse) \u201cTel. +44 20 81234567\u201d (Telefonnummer) ...oder auch \u201c \u201d. Beim Alias-Namen wird nicht zwischen Gro\u00df- und Kleinschreibung unterschieden. Es gibt zwei Methoden, um Burst-Aliasse ohne Plugins von Drittanbietern f\u00fcr im Webbrowser zu nutzen: Serverseitig : Der Webserver analysiert die Burst-Blockchain und ersetzt die Aliasse durch ihre Adressen, bevor die Dokumente an den Client gesendet werden. Clientseitig : Im Webbrowser wird ein JavaScript ausgef\u00fchrt, welches eine Verbindung zum Burst-Bootstrapping-Knoten herstellt. Es wird im Onload-Ereignis ausgef\u00fchrt und \u00fcbersetzt die Aliasse mittels Techniken, wie CORS oder JSON. \u00c4nderungen k\u00f6nnen nur von dem Konto ausgef\u00fchrt werden, welches den Alias urspr\u00fcnglich erstellt hat.","title":"Details"},{"location":"de/alias-system/#transfer-oder-verkauf","text":"Aliasse k\u00f6nnen f\u00fcr eine Geb\u00fchr von 1 BURST \u00fcbertragen werden. Der Besitzer kann seienen Alias an einzelne Burst-Konten oder an die breite \u00d6ffentlichkeit verkaufen. Hierbei legt er den Preis beliebig fest. Typischer Verkaufsablauf Der Besitzer klickt im \u2018Aliasse\u2019-Men\u00fc auf den Schalter \u2018Verkaufen\u2019 und markiert \u2018An irgendjemand verkaufen\u2019. Er legt den Preis fest und best\u00e4tigt mit \u2018Alias verkaufen\u2019. Wenn sp\u00e4ter ein anderer Benutzer denselben Alias erstellen m\u00f6chten, erh\u00e4lt er die Meldung , dass dieser bereits vorhanden ist, aber zum Verkauf steht. Nach Klick auf den Link \u2018Kaufen\u2019 kann er den Alias zum angegebenen Preis \u00fcbernehmen.","title":"Transfer oder Verkauf"},{"location":"de/alias-system/#how-to","text":"Siehe Alias-System How-To .","title":"How-To"},{"location":"de/alias-system/#faq","text":"Siehe Alias System -Abschnitt in den FAQ .","title":"FAQ"},{"location":"de/current-features/","text":"Current Features Status Jetzige Features von Burst beinhalten: B\u00f6rse f\u00fcr Verm\u00f6genswerte Um Kryptow\u00e4hrungen und andere Digitale G\u00fcter zu handeln, musste man sich bislang bei einer zentralen B\u00f6rse wie Kraken/Bter/etc. registrieren, seine Verm\u00f6genswerte dorthin transferieren und dieser B\u00f6rse Transaktionsgeb\u00fchren bezahlen. Diese Vorgehensweise birgt eine ziemlich gro\u00dfe Gefahr: die zentrale B\u00f6rse k\u00f6nnte mit jedermanns Einlagen pleite gehen. Burst hat eine dezentrale Peer-to-Peer B\u00f6rse bereits in die Wallet eingebaut, welche dezentrales handeln erm\u00f6glicht und so diesen Schwachpunkt beseitigt. Ein weiterer Vorteil ist der Wegfall der Handelsgeb\u00fchren. Die gleiche Technologie, die es dem NUtzer erlaubt BURST gegen viele andere digitale Verm\u00f6genswerte zu handeln, erm\u00f6glicht es nun BURST gegen praktisch beliebige G\u00fcter zu handeln. Dieses Feature basiert auf dem Konzept der \" farbigen M\u00fcnzen . Da die Blockchain eine vertrauensw\u00fcrdige Aufzeichnung von Transaktionen bereitstellt, kann dies dazu benutzt werden eine Aufzeichnung beliebiger anderer G\u00fcter - und nicht nur BURST - vorzunehmen. Um dies zu erreichen, erlaubt es Burst einem Coin eine beliebige Bezeichnung oder \u201cFarbe\u201d zuzuordnen, womit eine Br\u00fccke zwischen der virtuellen Kryptow\u00e4hrung und der physischen Welt geschaffen wird. Diese \u201cFarbige M\u00fcnze\u201d kann Immobilien, Aktien, G\u00fcter oder Konzepte repr\u00e4sentieren. Im Endergebnis kann das burst Netzwerk dazu benutzt werden praktisch \u201cAlles\u201d zu handeln. - **[Marktplatz](marketplace-de.md)** Dieses Feature stellt ein Protokoll f\u00fcr dezentralisierten P2P Handel mit digitalen G\u00fctern jeglicher Art bereit. - ''' [Alias System](alias-system-de.md) ''' Burst implementiert ein alias system, welches alphanumerischen Text auf beliebige andere Texte abbilden kann: Burst-Adressen, Email\\_Adressen, URLs, Telefonnummern, Seriennummern und mehr. Das macht aus Burst nicht nur ein dezentralisiertes DNS System, sondern erm\u00f6glicht es Kurznamen auf andere Entit\u00e4ten abzubilden. - **[Beliebige Nachrichten](arbitrary-messages-de.md)** Dieses Feature erlaubt es Burst kleinere Datenpakete \u00fcber das dezentralisierte Netzwerk zu senden. Diese Daten k\u00f6nnen auch verschl\u00fcsselt sein. Der Begriff \u201cNachricht\u201d ist allgemein zu verstehen: Es kann sich um einfache Textnachrichten handeln, es kann aber auch benutzt werden um beliebige Daten von bis zu 1000 Bytes L\u00e4nge zu senden. Es kann so im Endeffekt dazu benutzt werden um dezentrale Applikationen, File-Sharing und h\u00f6here Burst-Funktionalit\u00e4ten zu implementieren. Crowdfunding Burst implements a crowdfunding system which allows every burst user to set up a crowfunding.","title":"Aktuelle Funktionen"},{"location":"de/marketplace/","text":"Beschreibung Der Burst-Marketplace bietet ein Protokoll f\u00fcr dezentrale Peer-to-Peer-Shops. Es k\u00f6nnen beliebige digitale Produkte, wie beispielsweise Software, Musik und Videos angeboten werden. Der Kaufinteressent durchsucht die Produkte einzelner Shops, t\u00e4tigt eine Bestellung und erh\u00e4lt die erforderlichen Download-Informationen vom Verk\u00e4ufer. Wallet-Benutzeroberfl\u00e4che Wenn der Burst-Server l\u00e4uft, kann mit dem Webbrowser auf die lokale Wallet zugegriffen werden: bitte http://localhost:8125/ \u00f6ffnen. In der Men\u00fcleiste 'Marktplatz' oder 'Meine Shops' w\u00e4hlen: Marktplatz durchsuchen : Nach der Eingabe der Verk\u00e4ufer-Adresse finden Sie hier dessen angebotenen Produkte. Gekaufte Artikel : Listet alle zuvor von Ihnen gekaufte Produkte auf. Angebotene Artikel : Enth\u00e4lt die Produkte, die Sie derzeit zum Kauf anbieten. Ausstehende Bestellungen : Liste der verkauften Produkte, die Sie noch nicht ausgeliefert haben. Der K\u00e4ufer ben\u00f6tigt noch die Download-Information. Abgeschlossene Bestellungen : Enth\u00e4lt alle ausgelieferten Bestellungen und ev. Hinweise der K\u00e4ufer. Artikel anbieten : Hier k\u00f6nnen Sie neue digitale Produkte anbieten. How To \u00d6ffnen Sie bitte Ihre Burst-Wallet und w\u00e4hlen Sie f\u00fcr einen Kauf den Punkt \u2018Marktplatz\u2019 oder \u2018Mein Shop\u2019, um etwas zu verkaufen. Artikel kaufen Hier eine kurze Beschreibung der wichtigsten Schritte: W\u00e4hlen Sie \u2018Marktplatz\u2019 und dann den Unterpunkt \u2018Marktplatz durchsuchen\u2019. Geben Sie die Burst-Adresse des gew\u00fcnschten Verk\u00e4ufers (Shops) ein, um seine Produkte zu einzusehen. Ein Klick auf den Namen des gew\u00fcnschten Artikels \u00f6ffnet das Dialogfenster \u2018Kauf\u2019. Geben Sie die gew\u00fcnschte \u2018Menge\u2019 ein sowie die \u2018Lieferfrist\u2019 in Stunden. Diese legt fest, wie lange Sie bereit sind, auf die Lieferung zu warten. Bei \u00dcberschreitung der Frist wird der Kauf abgebrochen. Pr\u00fcfen Sie die Daten und best\u00e4tigen Sie nach Eingabe Ihrer \u2018Passphrase\u2019 mit Klick auf \u2018Kauf\u2019. Der Artikel ist nun im Men\u00fc \u2018Gekaufte Artikel\u2019 zu finden. Hier sehen Sie den Orderstatus: nach der Netzwerkbest\u00e4tigung wechselt dieser von \u2018Vorl\u00e4ufig\u2019 zu \u2018Ausstehen\u2019. Ihre Bestellung ist ab jetzt f\u00fcr den Verk\u00e4ufer sichtbar. Nach der Auslieferung durch den Verk\u00e4ufer \u00e4ndert sich der Status in \u2018Abgeschlossen\u2019. \u00d6ffnen Sie jetzt das Dialogfenster \u2018Lieferung\u2019 mit Klick auf den Artikelnamen. Geben Sie Ihre \u2018Passphrase\u2019 ein und klicken Sie auf \u2018Entschl\u00fcsseln\u2019, um die Informationen des Verk\u00e4ufers zu lesen. Diese beinhaltet die Downloadadresse, Freischaltung oder sonstige Information zum Bezug des digitalen Produkts. Sie haben anschlie\u00dfend noch die M\u00f6glichkeit, dem Verk\u00e4ufer ein Feedback zu geben bzw. ihm Fragen zu stellen. Artikel verkaufen Sie k\u00f6nnen Ihre eigenen digitalen Produkte auf dem Burst-Marktplatz anbieten: \u00d6ffnen Sie die Wallet und gehen Sie zu \u2018Mein Shop\u2019. Klick auf den Schalter \u2018Artikel anbieten\u2019. Beschreiben Sie den Artikel. Name : Eine pr\u00e4zise Produktbezeichnung. Beschreibung : Ausf\u00fchrliche Details und ev. ein Link zur Produkt-Website. Tags (optional): Sie k\u00f6nnen bis zu drei kommagetrennte Tags hinterlegen. Preis : Der Einzelpreis in BURST. Menge : Die verf\u00fcgbare Menge, die Sie auf Lager haben und anbieten m\u00f6chten. Diese wird beim Verkauf automatisch vom System verringert. Passphrase : Ihr Kennwort ist f\u00fcr das Einstellen erforderlich. Best\u00e4tigen Sie das Angebot mit Klick auf \u2018Anbieten\u2019. Es wird sofort in kursiver Schrift auf der Seite \u2018Angebotene Artikel\u2019 gelistet. Nach der Best\u00e4tigung (Blockgenerierung) durch das Burst-Netzwerk wird es in normaler Schrift als klickbarer Link dargestellt. Sobald jemand diesen Artikel kauft, wird er auf der Seite \u2018Ausstehende Bestellungen\u2019 gezeigt. Pr\u00fcfen Sie diese Seite regelm\u00e4\u00dfig und klicken Sie auf \u2018Artikel liefern\u2019. Im Dialogfenster geben Sie Ihre \u2018Passphrase\u2019 zum Entschl\u00fcsseln der K\u00e4ufernachricht ein. Beschreiben Sie im Feld \u2018Daten\u2019, wie der K\u00e4ufer den Artikel beziehen kann. Teilen Sie ihm beispielsweise die Downloadadresse oder den Software-Aktivierungscode mit. Optional k\u00f6nnen Sie einen Rabatt geben. Schlie\u00dfen Sie den Vorgang mit Ihrer \u2018Passphrase\u2019 und Klick auf \u2018Artikel liefern\u2019 ab. Dieser wird anschlie\u00dfend auf der Seite \u2018Abgeschlossene Bestellungen\u2019 gelistet. Hier k\u00f6nnen Sie auch eventuelle R\u00fcckfragen Ihrer Kunden einsehen und beantworten. Weblinks burst-team.us: Forum Marketplace Burst Nation: Marketplace","title":"Marktplatz"},{"location":"de/marketplace/#beschreibung","text":"Der Burst-Marketplace bietet ein Protokoll f\u00fcr dezentrale Peer-to-Peer-Shops. Es k\u00f6nnen beliebige digitale Produkte, wie beispielsweise Software, Musik und Videos angeboten werden. Der Kaufinteressent durchsucht die Produkte einzelner Shops, t\u00e4tigt eine Bestellung und erh\u00e4lt die erforderlichen Download-Informationen vom Verk\u00e4ufer.","title":"Beschreibung"},{"location":"de/marketplace/#wallet-benutzeroberflache","text":"Wenn der Burst-Server l\u00e4uft, kann mit dem Webbrowser auf die lokale Wallet zugegriffen werden: bitte http://localhost:8125/ \u00f6ffnen. In der Men\u00fcleiste 'Marktplatz' oder 'Meine Shops' w\u00e4hlen: Marktplatz durchsuchen : Nach der Eingabe der Verk\u00e4ufer-Adresse finden Sie hier dessen angebotenen Produkte. Gekaufte Artikel : Listet alle zuvor von Ihnen gekaufte Produkte auf. Angebotene Artikel : Enth\u00e4lt die Produkte, die Sie derzeit zum Kauf anbieten. Ausstehende Bestellungen : Liste der verkauften Produkte, die Sie noch nicht ausgeliefert haben. Der K\u00e4ufer ben\u00f6tigt noch die Download-Information. Abgeschlossene Bestellungen : Enth\u00e4lt alle ausgelieferten Bestellungen und ev. Hinweise der K\u00e4ufer. Artikel anbieten : Hier k\u00f6nnen Sie neue digitale Produkte anbieten.","title":"Wallet-Benutzeroberfl\u00e4che"},{"location":"de/marketplace/#how-to","text":"\u00d6ffnen Sie bitte Ihre Burst-Wallet und w\u00e4hlen Sie f\u00fcr einen Kauf den Punkt \u2018Marktplatz\u2019 oder \u2018Mein Shop\u2019, um etwas zu verkaufen.","title":"How To"},{"location":"de/marketplace/#artikel-kaufen","text":"Hier eine kurze Beschreibung der wichtigsten Schritte: W\u00e4hlen Sie \u2018Marktplatz\u2019 und dann den Unterpunkt \u2018Marktplatz durchsuchen\u2019. Geben Sie die Burst-Adresse des gew\u00fcnschten Verk\u00e4ufers (Shops) ein, um seine Produkte zu einzusehen. Ein Klick auf den Namen des gew\u00fcnschten Artikels \u00f6ffnet das Dialogfenster \u2018Kauf\u2019. Geben Sie die gew\u00fcnschte \u2018Menge\u2019 ein sowie die \u2018Lieferfrist\u2019 in Stunden. Diese legt fest, wie lange Sie bereit sind, auf die Lieferung zu warten. Bei \u00dcberschreitung der Frist wird der Kauf abgebrochen. Pr\u00fcfen Sie die Daten und best\u00e4tigen Sie nach Eingabe Ihrer \u2018Passphrase\u2019 mit Klick auf \u2018Kauf\u2019. Der Artikel ist nun im Men\u00fc \u2018Gekaufte Artikel\u2019 zu finden. Hier sehen Sie den Orderstatus: nach der Netzwerkbest\u00e4tigung wechselt dieser von \u2018Vorl\u00e4ufig\u2019 zu \u2018Ausstehen\u2019. Ihre Bestellung ist ab jetzt f\u00fcr den Verk\u00e4ufer sichtbar. Nach der Auslieferung durch den Verk\u00e4ufer \u00e4ndert sich der Status in \u2018Abgeschlossen\u2019. \u00d6ffnen Sie jetzt das Dialogfenster \u2018Lieferung\u2019 mit Klick auf den Artikelnamen. Geben Sie Ihre \u2018Passphrase\u2019 ein und klicken Sie auf \u2018Entschl\u00fcsseln\u2019, um die Informationen des Verk\u00e4ufers zu lesen. Diese beinhaltet die Downloadadresse, Freischaltung oder sonstige Information zum Bezug des digitalen Produkts. Sie haben anschlie\u00dfend noch die M\u00f6glichkeit, dem Verk\u00e4ufer ein Feedback zu geben bzw. ihm Fragen zu stellen.","title":"Artikel kaufen"},{"location":"de/marketplace/#artikel-verkaufen","text":"Sie k\u00f6nnen Ihre eigenen digitalen Produkte auf dem Burst-Marktplatz anbieten: \u00d6ffnen Sie die Wallet und gehen Sie zu \u2018Mein Shop\u2019. Klick auf den Schalter \u2018Artikel anbieten\u2019. Beschreiben Sie den Artikel. Name : Eine pr\u00e4zise Produktbezeichnung. Beschreibung : Ausf\u00fchrliche Details und ev. ein Link zur Produkt-Website. Tags (optional): Sie k\u00f6nnen bis zu drei kommagetrennte Tags hinterlegen. Preis : Der Einzelpreis in BURST. Menge : Die verf\u00fcgbare Menge, die Sie auf Lager haben und anbieten m\u00f6chten. Diese wird beim Verkauf automatisch vom System verringert. Passphrase : Ihr Kennwort ist f\u00fcr das Einstellen erforderlich. Best\u00e4tigen Sie das Angebot mit Klick auf \u2018Anbieten\u2019. Es wird sofort in kursiver Schrift auf der Seite \u2018Angebotene Artikel\u2019 gelistet. Nach der Best\u00e4tigung (Blockgenerierung) durch das Burst-Netzwerk wird es in normaler Schrift als klickbarer Link dargestellt. Sobald jemand diesen Artikel kauft, wird er auf der Seite \u2018Ausstehende Bestellungen\u2019 gezeigt. Pr\u00fcfen Sie diese Seite regelm\u00e4\u00dfig und klicken Sie auf \u2018Artikel liefern\u2019. Im Dialogfenster geben Sie Ihre \u2018Passphrase\u2019 zum Entschl\u00fcsseln der K\u00e4ufernachricht ein. Beschreiben Sie im Feld \u2018Daten\u2019, wie der K\u00e4ufer den Artikel beziehen kann. Teilen Sie ihm beispielsweise die Downloadadresse oder den Software-Aktivierungscode mit. Optional k\u00f6nnen Sie einen Rabatt geben. Schlie\u00dfen Sie den Vorgang mit Ihrer \u2018Passphrase\u2019 und Klick auf \u2018Artikel liefern\u2019 ab. Dieser wird anschlie\u00dfend auf der Seite \u2018Abgeschlossene Bestellungen\u2019 gelistet. Hier k\u00f6nnen Sie auch eventuelle R\u00fcckfragen Ihrer Kunden einsehen und beantworten.","title":"Artikel verkaufen"},{"location":"de/marketplace/#weblinks","text":"burst-team.us: Forum Marketplace Burst Nation: Marketplace","title":"Weblinks"},{"location":"en/","text":"Welcome to the BURST WIKI Burst is an open source blockchain platform with multiple core-level features that has been running publicly since August 2014. It is a code fork of Nxt using Proof of Capacity (PoC) consensus, meaning that you can mine it with your disk space. SODIUM hardfork information Version 2.5.0 of the Burst Reference Software (BRS) is released. Active nodes running the new version will automatically participate in a hard fork of the Burst blockchain around the June 20, 2020, at blockheight 765,000 . Codenamed SODIUM, the hard fork will unlock new platform-wide features, better performance, and security improvements. To unleash more of Burstcoin\u2019s potential, the Burst Apps Team is seeking fast, network-wide adoption of this new release . Hard fork checklist 765K a communty upgrade guide Technical details Press release help us spread the news ! What is Burst? How to start mining Burst Burst Software Comprehensive Software List Burstcoin Reference Software Latest Version: 2.4.2 Direct Download Burst Source Code QBundle Full Guide Mobile Applications Burst Features Arbitrary Messages Alias System Asset Exchange Automated Transactions (Smart Contracts) Marketplace Summary of Features For Developers The Burst API The Burst API Examples The brs-default.properties file Reed-Solomon (RS) Address Format Burst Blockchain Tutorial QR Codes (Deeplink Example) QR Codes (API Example) Offline Transaction Signing How Transaction Processing Works Mining Reward Assignment Plotting Mining About Burst What is Burst? Get started with Burst FAQ Website Resources General Information Information for Exchanges Exchanges The Burstcoinist (News) More Burst related websites International websites Burst Whitepaper History of Burst Services and Tools Online wallets: VoIPLanParty: 1 , Burst-Team: 1 , 2 , 3 . Burstforum: 1 , 2 , 3 TestNet: Burst Apps Team Public TestNet Blockchain Explorers: Burst Apps Team , .RO , Neon Network Observers: Burst Apps Team , Devtrue.net Pool uptime monitor Burstcoin Faucet Lists Get Support Forum 1 | Forum 2 | Burst Discord | Burst Reddit Contribute Join Us Today!","title":"Home"},{"location":"en/#welcome-to-the-burst-wiki","text":"Burst is an open source blockchain platform with multiple core-level features that has been running publicly since August 2014. It is a code fork of Nxt using Proof of Capacity (PoC) consensus, meaning that you can mine it with your disk space.","title":"Welcome to the BURST WIKI"},{"location":"en/#sodium-hardfork-information","text":"Version 2.5.0 of the Burst Reference Software (BRS) is released. Active nodes running the new version will automatically participate in a hard fork of the Burst blockchain around the June 20, 2020, at blockheight 765,000 . Codenamed SODIUM, the hard fork will unlock new platform-wide features, better performance, and security improvements. To unleash more of Burstcoin\u2019s potential, the Burst Apps Team is seeking fast, network-wide adoption of this new release . Hard fork checklist 765K a communty upgrade guide Technical details Press release help us spread the news !","title":"SODIUM hardfork information"},{"location":"en/#what-is-burst","text":"","title":"What is Burst?"},{"location":"en/#how-to-start-mining-burst","text":"","title":"How to start mining Burst"},{"location":"en/#burst-software","text":"Comprehensive Software List Burstcoin Reference Software Latest Version: 2.4.2 Direct Download Burst Source Code QBundle Full Guide Mobile Applications","title":"Burst Software"},{"location":"en/#burst-features","text":"Arbitrary Messages Alias System Asset Exchange Automated Transactions (Smart Contracts) Marketplace Summary of Features","title":"Burst Features"},{"location":"en/#for-developers","text":"The Burst API The Burst API Examples The brs-default.properties file Reed-Solomon (RS) Address Format Burst Blockchain Tutorial QR Codes (Deeplink Example) QR Codes (API Example) Offline Transaction Signing How Transaction Processing Works","title":"For Developers"},{"location":"en/#mining","text":"Reward Assignment Plotting Mining","title":"Mining"},{"location":"en/#about-burst","text":"What is Burst? Get started with Burst FAQ Website Resources General Information Information for Exchanges Exchanges The Burstcoinist (News) More Burst related websites International websites Burst Whitepaper History of Burst","title":"About Burst"},{"location":"en/#services-and-tools","text":"Online wallets: VoIPLanParty: 1 , Burst-Team: 1 , 2 , 3 . Burstforum: 1 , 2 , 3 TestNet: Burst Apps Team Public TestNet Blockchain Explorers: Burst Apps Team , .RO , Neon Network Observers: Burst Apps Team , Devtrue.net Pool uptime monitor Burstcoin Faucet Lists","title":"Services and Tools"},{"location":"en/#get-support","text":"Forum 1 | Forum 2 | Burst Discord | Burst Reddit","title":"Get Support"},{"location":"en/#contribute","text":"Join Us Today!","title":"Contribute"},{"location":"en/500k-hf-checklist/","text":"500k \u201cPre-POC2\u201d Hard Fork Checklist Disclaimer: A checklist is used by qualified personnel. I.e. pre-flight checklist by pilots, medical guideline by medical staff etc. A checklist is not a tutorial. If you do not understand some of the points that apply to your \u201cuser class\u201d, you have more learning/reading to do. It is assumed you know what PoC1 and PoC2 is, how they differ, what optimized plots are, where you find various Burst software, how to update it, which pools support PoC2 etc. If you do not know this, you will not find the information here. What To Do **Now** that is released? (Everyone) Make sure you have a current version of the wallet (2.2.6 or higher, currently released: ) Make sure you shut down all instances of pre-POC2 wallets, especially 1.2.9 or 1.3.6cg. These are obsolete and will no longer function after the fork. Never panic. There is nothing in the upcoming HF that would make you lose your funds. Worst case if you use the wrong wallet: your funds may be temporarily inaccessible. You do not want to have a non-release BRS version, unless you are a developer and/or are testing on TestNet For Miners Make sure all your PoC1 plots are optimized Check the Burst_Software page for the latest info on Burst software Get a PoC1 to PoC2 plot converter There are several miners such as jminer capable of mining PoC2 files before the PoC2 switch and also PoC1 files after the PoC2 switch. Using this software is probably the best way to avoid any mining downtime. However, PoC2 plots before the switch will give you only 50% read speed (with jminer, etc. -- nonfunctional with anything else), so will PoC1 plots after the switch. You want to find a good strategy when to convert which of your plots for maximum performance. read below the \u201cPoC2 Switch @ 502k\u201d For Hodlers/Investors The coins in your private wallet are safe. Even if you do not update the wallet (which you should), your coins are not gone. Worst case: you may lose only temporarily access to your coins until you get a new wallet version. While we cannot speak for exchanges in general, the coins you have on any exchange are also safe. Even if the exchange messes up their wallet, it's again only a temporal glitch. As long as no private key is lost, no funds are lost. We will make no recommendation if you should sell before the HF and buy afterwards. PoCC members will simply hodl. For Pool Operators Make sure your pool and your back-end wallet(s) can switch to PoC2 mining at block height 502 000. (The wallet can do this, as can the PoCC pool software) You might want to have a look at Multi-Out payments, because they are ideal to perform payouts to your miners after the 500 000 hard fork. For Exchanges Update to now - anything less than will soon cease to function For Developers Wallet API remains the same, there are two new API calls: sendMoneyMulti and sendMoneyMultiSame which you might want to use for your services - if applicable. They are especially useful for Pools, Exchanges and Faucets. The number of possible transactions per block is now up to 1020 (old: 255), maximum block payload size 179520 bytes (old: 44880) Each of these 1020 slots in a block has a minimum transaction fee of slot-index * 0.00735 Burst. For Bystanders Lean back and enjoy the show! For Miners: PoC2 Switch @ 502k The release of will contain everything needed for enabling all of the Pre-Dymaxion hard fork features: MultiOut/MultiOutSame transactions 4-fold block capacity increase dynamic fees PoC2 However, while the first 3 of these features will be activated at block height 500k, PoC2 will be activated a little later at 502k (about 5.5 days later). Why a delayed PoC2 activation? tl;dr: We promised there will be no two coins, only one Burst. This is why. Everything that is needed for PoC2 is in place. Miners do have a multitude of options to choose from how to handle the PoC1 -> PoC2 switch. Nevertheless, we assume a - temporary - drop in mining capacity as soon as the PoC1 -> PoC2 switch happens. Some miners may not be aware of PoC2 at all (hopefully a small percentage), some may be amidst PoC1->PoC2 conversion and their capacity is not available, some will do on-the-fly conversion and their read times will be higher, therefore their effective capacity smaller... etc. Bottom line is that shortly after the PoC1 -> PoC2 switch the desired behavior (mine via PoC2) will have to compete with undesired behavior (inert \u201cWut? I did nothing\u201d miners mining PoC1). If we had all Pre-Dymaxion HF features switched at once, we would jeopardize the whole HF because with that PoC1 -> PoC2 switch, we would have weakened \u201cthe right chain\u201d mining capacity. Instead, we will enable all the new features regarding higher capacity and dynamic fees and 2000 blocks later, when there are new blocks in the blockchain (sub-1 Burst fee, more than 255tx per block - which we will make sure), and when we are beyond the maximum wallet rollback capability of 1440 blocks, the wallet/pools/miners will automatically enable the PoC2 switch. At this moment, it is definitely impossible for any old wallet (1.2.9, 1.3.6cg, 2.0.4 or whatever) that might have survived somehow until then to have both PoC1 and the new features and be on the winning chain. Like 100% impossible. This process will ensure that there will be only one Burst. The new, more secure, high-capacity, flexible Burst. Our foundation for even bigger things to come.","title":"500k HF Checklist"},{"location":"en/500k-hf-checklist/#500k-pre-poc2-hard-fork-checklist","text":"Disclaimer: A checklist is used by qualified personnel. I.e. pre-flight checklist by pilots, medical guideline by medical staff etc. A checklist is not a tutorial. If you do not understand some of the points that apply to your \u201cuser class\u201d, you have more learning/reading to do. It is assumed you know what PoC1 and PoC2 is, how they differ, what optimized plots are, where you find various Burst software, how to update it, which pools support PoC2 etc. If you do not know this, you will not find the information here.","title":"500k \u201cPre-POC2\u201d Hard Fork Checklist"},{"location":"en/500k-hf-checklist/#what-to-do-4242now4242-that-is-released-everyone","text":"Make sure you have a current version of the wallet (2.2.6 or higher, currently released: ) Make sure you shut down all instances of pre-POC2 wallets, especially 1.2.9 or 1.3.6cg. These are obsolete and will no longer function after the fork. Never panic. There is nothing in the upcoming HF that would make you lose your funds. Worst case if you use the wrong wallet: your funds may be temporarily inaccessible. You do not want to have a non-release BRS version, unless you are a developer and/or are testing on TestNet","title":"What To Do **Now** that  is released? (Everyone)"},{"location":"en/500k-hf-checklist/#for-miners","text":"Make sure all your PoC1 plots are optimized Check the Burst_Software page for the latest info on Burst software Get a PoC1 to PoC2 plot converter There are several miners such as jminer capable of mining PoC2 files before the PoC2 switch and also PoC1 files after the PoC2 switch. Using this software is probably the best way to avoid any mining downtime. However, PoC2 plots before the switch will give you only 50% read speed (with jminer, etc. -- nonfunctional with anything else), so will PoC1 plots after the switch. You want to find a good strategy when to convert which of your plots for maximum performance. read below the \u201cPoC2 Switch @ 502k\u201d","title":"For Miners"},{"location":"en/500k-hf-checklist/#for-hodlersinvestors","text":"The coins in your private wallet are safe. Even if you do not update the wallet (which you should), your coins are not gone. Worst case: you may lose only temporarily access to your coins until you get a new wallet version. While we cannot speak for exchanges in general, the coins you have on any exchange are also safe. Even if the exchange messes up their wallet, it's again only a temporal glitch. As long as no private key is lost, no funds are lost. We will make no recommendation if you should sell before the HF and buy afterwards. PoCC members will simply hodl.","title":"For Hodlers/Investors"},{"location":"en/500k-hf-checklist/#for-pool-operators","text":"Make sure your pool and your back-end wallet(s) can switch to PoC2 mining at block height 502 000. (The wallet can do this, as can the PoCC pool software) You might want to have a look at Multi-Out payments, because they are ideal to perform payouts to your miners after the 500 000 hard fork.","title":"For Pool Operators"},{"location":"en/500k-hf-checklist/#for-exchanges","text":"Update to now - anything less than will soon cease to function","title":"For Exchanges"},{"location":"en/500k-hf-checklist/#for-developers","text":"Wallet API remains the same, there are two new API calls: sendMoneyMulti and sendMoneyMultiSame which you might want to use for your services - if applicable. They are especially useful for Pools, Exchanges and Faucets. The number of possible transactions per block is now up to 1020 (old: 255), maximum block payload size 179520 bytes (old: 44880) Each of these 1020 slots in a block has a minimum transaction fee of slot-index * 0.00735 Burst.","title":"For Developers"},{"location":"en/500k-hf-checklist/#for-bystanders","text":"Lean back and enjoy the show!","title":"For Bystanders"},{"location":"en/500k-hf-checklist/#for-miners-poc2-switch-502k","text":"The release of will contain everything needed for enabling all of the Pre-Dymaxion hard fork features: MultiOut/MultiOutSame transactions 4-fold block capacity increase dynamic fees PoC2 However, while the first 3 of these features will be activated at block height 500k, PoC2 will be activated a little later at 502k (about 5.5 days later).","title":"For Miners: PoC2 Switch @ 502k"},{"location":"en/500k-hf-checklist/#why-a-delayed-poc2-activation","text":"tl;dr: We promised there will be no two coins, only one Burst. This is why. Everything that is needed for PoC2 is in place. Miners do have a multitude of options to choose from how to handle the PoC1 -> PoC2 switch. Nevertheless, we assume a - temporary - drop in mining capacity as soon as the PoC1 -> PoC2 switch happens. Some miners may not be aware of PoC2 at all (hopefully a small percentage), some may be amidst PoC1->PoC2 conversion and their capacity is not available, some will do on-the-fly conversion and their read times will be higher, therefore their effective capacity smaller... etc. Bottom line is that shortly after the PoC1 -> PoC2 switch the desired behavior (mine via PoC2) will have to compete with undesired behavior (inert \u201cWut? I did nothing\u201d miners mining PoC1). If we had all Pre-Dymaxion HF features switched at once, we would jeopardize the whole HF because with that PoC1 -> PoC2 switch, we would have weakened \u201cthe right chain\u201d mining capacity. Instead, we will enable all the new features regarding higher capacity and dynamic fees and 2000 blocks later, when there are new blocks in the blockchain (sub-1 Burst fee, more than 255tx per block - which we will make sure), and when we are beyond the maximum wallet rollback capability of 1440 blocks, the wallet/pools/miners will automatically enable the PoC2 switch. At this moment, it is definitely impossible for any old wallet (1.2.9, 1.3.6cg, 2.0.4 or whatever) that might have survived somehow until then to have both PoC1 and the new features and be on the winning chain. Like 100% impossible. This process will ensure that there will be only one Burst. The new, more secure, high-capacity, flexible Burst. Our foundation for even bigger things to come.","title":"Why a delayed PoC2 activation?"},{"location":"en/765k-hf-checklist/","text":"765k \u201cSODIUM\u201d Hard Fork Checklist Disclaimer: We assume this checklist is used by qualified personnel, it is not a tutorial. It is also assumed you know what BRS (Burst Reference Software) is and how to install it. Brought to you by Burst Apps Team (BAT). What To Do **Now** that it is released? (Everyone) Make sure you have a current version of the wallet (2.5.0 or higher), currently released at burst-apps-team repository . Make sure you shut down all instances of previous versions. All previous versions are obsolete and will be automatically rejected by upgraded nodes after the fork. No need to panic. There is nothing in the upcoming HF that would make you lose your funds. Worst case if you use the wrong wallet: your funds may be temporarily inaccessible. You do not want to have a non-release BRS version, unless you are a developer and/or are testing on TestNet For Miners If you mine on a pool, there is nothing you need to do (assuming the pool operator runs an up-to-date BRS node). If you mine solo, also no extra recommendation other than upgrade BRS to >=2.5.0. For Hodlers/Investors The coins in your private wallet are safe. If you use Phoenix or any wallet based on a remote node, it is very likely the operator has already upgraded the BRS node and you have nothing to do. If you run a BRS node, even if you do not update it (which you should), your coins are safe. Worst case: you may lose only temporary access to your coins until you get a new version. As long as no private key is lost, no funds are lost. While we cannot speak for exchanges in general, the coins you have on any exchange are also safe. BAT is in touch with main exchanges so they update their BRS nodes. Obviously there is no recommendation/advice if you should buy or sell BURST due to the upgrade. For Pool Operators Make sure your pool back-end BRS node is >=2.5.0. Although the deadline computation formula has been changed, BRS will always send back the legacy deadline as confirmation. So, as long as the pool send its best deadline to the node, there is no change needed on any software. The legacy best deadline continues to be the best deadline, nothing to worry about. If you want to better inform your miners about the current best deadline or other related information in your monitoring webpage you might want to implement the deadline conversion: deadline = ln(legacyDeadline)*240/ln(240) For Exchanges Please update your BRS node as soon as possible to version >=2.5.0. There are no breaking API changes. For Developers Wallet API remains the same. For Bystanders Lean back and enjoy stable block times and the many possibilities that these upgrades can bring!","title":"765k hf checklist"},{"location":"en/765k-hf-checklist/#765k-sodium-hard-fork-checklist","text":"Disclaimer: We assume this checklist is used by qualified personnel, it is not a tutorial. It is also assumed you know what BRS (Burst Reference Software) is and how to install it. Brought to you by Burst Apps Team (BAT).","title":"765k \u201cSODIUM\u201d Hard Fork Checklist"},{"location":"en/765k-hf-checklist/#what-to-do-4242now4242-that-it-is-released-everyone","text":"Make sure you have a current version of the wallet (2.5.0 or higher), currently released at burst-apps-team repository . Make sure you shut down all instances of previous versions. All previous versions are obsolete and will be automatically rejected by upgraded nodes after the fork. No need to panic. There is nothing in the upcoming HF that would make you lose your funds. Worst case if you use the wrong wallet: your funds may be temporarily inaccessible. You do not want to have a non-release BRS version, unless you are a developer and/or are testing on TestNet","title":"What To Do **Now** that it is released? (Everyone)"},{"location":"en/765k-hf-checklist/#for-miners","text":"If you mine on a pool, there is nothing you need to do (assuming the pool operator runs an up-to-date BRS node). If you mine solo, also no extra recommendation other than upgrade BRS to >=2.5.0.","title":"For Miners"},{"location":"en/765k-hf-checklist/#for-hodlersinvestors","text":"The coins in your private wallet are safe. If you use Phoenix or any wallet based on a remote node, it is very likely the operator has already upgraded the BRS node and you have nothing to do. If you run a BRS node, even if you do not update it (which you should), your coins are safe. Worst case: you may lose only temporary access to your coins until you get a new version. As long as no private key is lost, no funds are lost. While we cannot speak for exchanges in general, the coins you have on any exchange are also safe. BAT is in touch with main exchanges so they update their BRS nodes. Obviously there is no recommendation/advice if you should buy or sell BURST due to the upgrade.","title":"For Hodlers/Investors"},{"location":"en/765k-hf-checklist/#for-pool-operators","text":"Make sure your pool back-end BRS node is >=2.5.0. Although the deadline computation formula has been changed, BRS will always send back the legacy deadline as confirmation. So, as long as the pool send its best deadline to the node, there is no change needed on any software. The legacy best deadline continues to be the best deadline, nothing to worry about. If you want to better inform your miners about the current best deadline or other related information in your monitoring webpage you might want to implement the deadline conversion: deadline = ln(legacyDeadline)*240/ln(240)","title":"For Pool Operators"},{"location":"en/765k-hf-checklist/#for-exchanges","text":"Please update your BRS node as soon as possible to version >=2.5.0. There are no breaking API changes.","title":"For Exchanges"},{"location":"en/765k-hf-checklist/#for-developers","text":"Wallet API remains the same.","title":"For Developers"},{"location":"en/765k-hf-checklist/#for-bystanders","text":"Lean back and enjoy stable block times and the many possibilities that these upgrades can bring!","title":"For Bystanders"},{"location":"en/BlockTalk/","text":"Introduction BlockTalk is an extended BURST AT framework which aids in the creation and deployment of ATs via a simple and concise language, and a simple interface for deploying to the blockchain. It includes tools and code snippets to assist in the process, and helps manage the minimal fees involved with running ATs. Vision The vision of BlockTalk is to have a state-of-the-art and easy to deploy framework for smart contracts. The project decision was to make use of Java as the first high-level language to implement this framework. Although the project is already underway, anyone who like to join the project is welcome and should send a contact request to frank_the_tank on discord. For more information on BlockTalk, see CIP20 . System Design LANG This will be a new programming language, specifically designed for future creation of AT ANTLR ( Another Tool for Language Recognition ) This is a powerful tool for reading and translating structured text into binary files. That involves: A Lexer \u2013 to read LANG sourcecode and turn that into tokens A parser \u2013 to parse and turn the tokens into a structured representation (AST) AST \u2013 with an associated walker to walk the AST and turn that into a new extended script language (ESA) for Burst blockchain ESA The extended script assembly (ESA) will create and handle the new types, dynamic memory and extension of SA. SA The script assembly is creating the first maschinencode. It includes and handles logical branches, declarations of vars, labels to jump to, named API funcs as opposed to hex numbered functions. Mcode This module make the preparation for the Step5-1 processing. Mainy labels will be swapped out with addrs, named funs swapped with hex numbered func, named vars swapped with their physical addrs. Step5-1 The steps are part of the compiling process. The steps compile mcode into bcode and breaks that task into clearly defined steps of 5. Each step, involves having input from step above and providing output to step below. Syntax and semantics are thoroughly checked on both input and output at each step. In case of any error at a given step, the input is rejected and an error message to the above step is submitted. Step3 is the most human readable (big-endian), Step2 and Step1 are on form little-endian. Bcode Final transformation to bytecode. Each instr on separate lines, as op-funcno-arg , literal CIYAM Bytecode In this last step some checks will be performed with the bytecode and CIYAM Bytecode will be created. This code can then be released to the BURST-Chain as a new smart AT. API Integrations burstkit4j : API Calls and integration Example This example of NFT on github shows BlockTalk handling AT owner changes. Only the current owner can set a price in BURST for which the NFT-AT can be sold. The first user who sends the set account to the AT will be the new owner. With this simple and clean contract we are already in a position to build NFTs like CryptoKitties or items for the gaming industry or any other business case where unique Tokens are needed. What are NFTs? NFTs ( non-fungible-tokens ) are basically new and unique representations of goods or assets that take the form of digital tokens/AT. Through the use of cryptography, NFTs can prove the authenticity, as well as ownership of such assets and goods. Let's say that there is a virtual artwork that is tokenized. With that in mind, whoever holds the tokens, acts as the direct owner of the piece of art itself. Obviously, NFTs are quite unique, and no other item can replace them. The possible implications of this are many, and they might even create an entirely new class of digital assets in the future. It is even possible that real-world items and assets might be this closely tied to digital tokens, all with the goal of securing the ownership of such items. The NFTs were brought to the mainstream together with CryptoKitties. This is a concept that gained a lot of popularity near the end of the previous year. Some of them were so popular, that they were priced and sold for hundreds of thousands of dollars. References https://www.burstcoin.ist/2019/04/06/blocktalk-the-new-smart-way-for-burst-ats/ https://www.reddit.com/r/burstcoin/comments/bi26xi/blocktalk_introduce_nftnonfungibletoken/ https://github.com/burst-apps-team/CIPs/blob/activate-cip20/cip-0020.md","title":"BlockTalk"},{"location":"en/BlockTalk/#introduction","text":"BlockTalk is an extended BURST AT framework which aids in the creation and deployment of ATs via a simple and concise language, and a simple interface for deploying to the blockchain. It includes tools and code snippets to assist in the process, and helps manage the minimal fees involved with running ATs.","title":"Introduction"},{"location":"en/BlockTalk/#vision","text":"The vision of BlockTalk is to have a state-of-the-art and easy to deploy framework for smart contracts. The project decision was to make use of Java as the first high-level language to implement this framework. Although the project is already underway, anyone who like to join the project is welcome and should send a contact request to frank_the_tank on discord. For more information on BlockTalk, see CIP20 .","title":"Vision"},{"location":"en/BlockTalk/#system-design","text":"","title":"System Design"},{"location":"en/BlockTalk/#lang","text":"This will be a new programming language, specifically designed for future creation of AT","title":"LANG"},{"location":"en/BlockTalk/#antlr-another-tool-for-language-recognition","text":"This is a powerful tool for reading and translating structured text into binary files. That involves: A Lexer \u2013 to read LANG sourcecode and turn that into tokens A parser \u2013 to parse and turn the tokens into a structured representation (AST) AST \u2013 with an associated walker to walk the AST and turn that into a new extended script language (ESA) for Burst blockchain","title":"ANTLR (Another Tool for Language Recognition)"},{"location":"en/BlockTalk/#esa","text":"The extended script assembly (ESA) will create and handle the new types, dynamic memory and extension of SA.","title":"ESA"},{"location":"en/BlockTalk/#sa","text":"The script assembly is creating the first maschinencode. It includes and handles logical branches, declarations of vars, labels to jump to, named API funcs as opposed to hex numbered functions.","title":"SA"},{"location":"en/BlockTalk/#mcode","text":"This module make the preparation for the Step5-1 processing. Mainy labels will be swapped out with addrs, named funs swapped with hex numbered func, named vars swapped with their physical addrs.","title":"Mcode"},{"location":"en/BlockTalk/#step5-1","text":"The steps are part of the compiling process. The steps compile mcode into bcode and breaks that task into clearly defined steps of 5. Each step, involves having input from step above and providing output to step below. Syntax and semantics are thoroughly checked on both input and output at each step. In case of any error at a given step, the input is rejected and an error message to the above step is submitted. Step3 is the most human readable (big-endian), Step2 and Step1 are on form little-endian.","title":"Step5-1"},{"location":"en/BlockTalk/#bcode","text":"Final transformation to bytecode. Each instr on separate lines, as op-funcno-arg , literal","title":"Bcode"},{"location":"en/BlockTalk/#ciyam-bytecode","text":"In this last step some checks will be performed with the bytecode and CIYAM Bytecode will be created. This code can then be released to the BURST-Chain as a new smart AT.","title":"CIYAM Bytecode"},{"location":"en/BlockTalk/#api-integrations","text":"","title":"API Integrations"},{"location":"en/BlockTalk/#burstkit4j-api-calls-and-integration","text":"","title":"burstkit4j : API Calls and integration"},{"location":"en/BlockTalk/#example","text":"This example of NFT on github shows BlockTalk handling AT owner changes. Only the current owner can set a price in BURST for which the NFT-AT can be sold. The first user who sends the set account to the AT will be the new owner. With this simple and clean contract we are already in a position to build NFTs like CryptoKitties or items for the gaming industry or any other business case where unique Tokens are needed.","title":"Example"},{"location":"en/BlockTalk/#what-are-nfts","text":"NFTs ( non-fungible-tokens ) are basically new and unique representations of goods or assets that take the form of digital tokens/AT. Through the use of cryptography, NFTs can prove the authenticity, as well as ownership of such assets and goods. Let's say that there is a virtual artwork that is tokenized. With that in mind, whoever holds the tokens, acts as the direct owner of the piece of art itself. Obviously, NFTs are quite unique, and no other item can replace them. The possible implications of this are many, and they might even create an entirely new class of digital assets in the future. It is even possible that real-world items and assets might be this closely tied to digital tokens, all with the goal of securing the ownership of such items. The NFTs were brought to the mainstream together with CryptoKitties. This is a concept that gained a lot of popularity near the end of the previous year. Some of them were so popular, that they were priced and sold for hundreds of thousands of dollars.","title":"What are NFTs?"},{"location":"en/BlockTalk/#references","text":"https://www.burstcoin.ist/2019/04/06/blocktalk-the-new-smart-way-for-burst-ats/ https://www.reddit.com/r/burstcoin/comments/bi26xi/blocktalk_introduce_nftnonfungibletoken/ https://github.com/burst-apps-team/CIPs/blob/activate-cip20/cip-0020.md","title":"References"},{"location":"en/activate-burst-account/","text":"Introduction Activating a Burst account simply means \u201cpropagating\u201d the publicKey of your account to the rest of the network. The common way to do so is simply by creating an outgoing transaction ( Reward Assignment , setting an Alias , etc.). It is a necessary step in order to ensure that your account is secured. Indeed, two different passphrases can produce the same BURST addresses (see RS Address Format ). Activate your wallet using the Burst Interface When you log into your new account and if you already received 1 Burst, this message appears: You can click on \u201cSet account info\u201d, \u201csend a message\u201d, \u201cbuy an alias\u201d or \u201csend BURST\u201d to create an outgoing tx and share your publicKey to the rest of the network. Activate your wallet using the API Another less well known way to activate your wallet is using the Burst API. You won't even need to make an outgoing tx from your new account using this method, because you can directly specify the recipient publicKey in the outgoing tx on the account you're using. Firstly, please visit https://127.0.0.1:8125/test?requestType=sendMoney or https://voiplanparty.com:8125/test?requestType=sendMoney or any trusted online wallet of your choice. You need to fill the following fields : recipient : type the numeric id of the recipient (the account you want to activate) amountNQT : type 100000000 (= 1 BURST) secretPhrase : type your passphrase feeNQT : type the fee your willing to pay (10000000 in this example, 0.1 BURST) deadline : type 24 (hours) broadcast : true (broadcast the transaction to the rest of the network) recipientPublicKey : type the publicKey (lowercase) of the recipient (the account you want to activate). This information is available using the getAccountId API call. Simply type the passphrase of the account you want to activate. If everything went well, you should have the following response : Congratulations ! Your new account is activated without making an outgoing tx from it ! For more informations, take a look at The Burst API and The Burst API Examples .","title":"Activate Burst Account"},{"location":"en/activate-burst-account/#introduction","text":"Activating a Burst account simply means \u201cpropagating\u201d the publicKey of your account to the rest of the network. The common way to do so is simply by creating an outgoing transaction ( Reward Assignment , setting an Alias , etc.). It is a necessary step in order to ensure that your account is secured. Indeed, two different passphrases can produce the same BURST addresses (see RS Address Format ).","title":"Introduction"},{"location":"en/activate-burst-account/#activate-your-wallet-using-the-burst-interface","text":"When you log into your new account and if you already received 1 Burst, this message appears: You can click on \u201cSet account info\u201d, \u201csend a message\u201d, \u201cbuy an alias\u201d or \u201csend BURST\u201d to create an outgoing tx and share your publicKey to the rest of the network.","title":"Activate your wallet using the Burst Interface"},{"location":"en/activate-burst-account/#activate-your-wallet-using-the-api","text":"Another less well known way to activate your wallet is using the Burst API. You won't even need to make an outgoing tx from your new account using this method, because you can directly specify the recipient publicKey in the outgoing tx on the account you're using. Firstly, please visit https://127.0.0.1:8125/test?requestType=sendMoney or https://voiplanparty.com:8125/test?requestType=sendMoney or any trusted online wallet of your choice. You need to fill the following fields : recipient : type the numeric id of the recipient (the account you want to activate) amountNQT : type 100000000 (= 1 BURST) secretPhrase : type your passphrase feeNQT : type the fee your willing to pay (10000000 in this example, 0.1 BURST) deadline : type 24 (hours) broadcast : true (broadcast the transaction to the rest of the network) recipientPublicKey : type the publicKey (lowercase) of the recipient (the account you want to activate). This information is available using the getAccountId API call. Simply type the passphrase of the account you want to activate. If everything went well, you should have the following response : Congratulations ! Your new account is activated without making an outgoing tx from it ! For more informations, take a look at The Burst API and The Burst API Examples .","title":"Activate your wallet using the API"},{"location":"en/alias-system/","text":"Description The Alias System feature of Burst essentially allows one piece of text to be substituted for another, so that keywords or keyphrases can be used to represent other things \u2013 names, telephone numbers, physical addresses, web sites, account numbers, email addresses, product SKU codes... almost anything you can think of. For example, you could ask Burst to associate \u201csearch\u201d with \u201cwww.google.com\u201d. Once this is done, all you have to do to get to Google is type \u201cburst:search\u201d into a Burst-capable browser, and it will translate your request in one for \u201cwww.google.com\u201d. Immediate applications are simple: you can create an easy-to-remember alias for your Burst account number, for example. But since the Alias System is open-ended, it can be used to implement a decentralized DNS system, shopping cart applications, and more. Creating aliases is A user sends a transaction that states \u201cThisText = ThatText\u201d. You can use the wallet menu \u2018Aliases\u2019 and click on \u2018Register Alias\u2019. If the alias is to be changed, just send another transaction with a new definition. Use the \u2018Edit\u2019 button in \u2018Aliases\u2019 menu. Details The alias can be any string of latin-character numbers and letters. The address can be anything like: \u201c173.194.112.174\u201d (an IPv4 address) \u201c2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d\u201d (an IPv6 address) \u201cexample.com/secretpage.php?parameter=value\u201d (a URI) \u201cjohnsmith@example.com\u201d \u201ctel:+44-20-8123-4567\u201d \u201cbitcoin:12dDMfhWq3scNWDsL4ty1Q5skyJj6M4scB\u201d There are 2 main ways to use Burst aliases without having to rely on third-party plugins for your browser: Server-side A web server analyses the Burst blockchain and replaces \u201cburst-links\u201d with corresponding addresses before sending HTML documents to users. Client-side A web browser runs javascript code that connects to Burst bootstrapping nodes and replaces \u201cburst-links\u201d with their addresses. This requires to embedding a small script which is executed in an \u201conload\u201d event. The script will do all the work via CORS, JSON, or other techniques. Changes can only be executed by the account that originally created the alias. Alias Transfer/Sale Aliases can be transferred for a 1 BURST fee. Alias can be sold to either specific BURST Accounts or to the general public. To sell an alias, you can set the price to sell for every alias. How To Open your Burst client and select the \u2018Aliases\u2019 menu. Register alias Click on \u2018Register Alias\u2019 in the upper right corner. Select the \u2018Type\u2019: \u201cURI\u201d, \u201cAccount\u201d or \u201cOther\u201d. In \u2018Alias\u2019 field, enter the name without blank spaces. Depending on the selected \u2018Type\u2019, the text input field is named as \u2018URI\u2019, \u2018Account ID\u2019 or \u2018Data\u2019. The \u2018Data\u2019 field can contain any text with a length of up to 1000 bytes. Enter your \u2018Passphrase\u2019 and click on \u2018Register\u2019. It is listed in italics on the page. After the network has processed your message (usually after a few minutes), it will be listet in normal font. Edit alias Click on \u2018Edit\u2019 behind the alias you want to change. You can modify the \u2018Type\u2019 and \u2018Data\u2019. You can not rename the \u2018Alias\u2019. Enter your \u2018Passphrase\u2019 and click on \u2018Update\u2019. Transfer alias Click on the \u2018Transfer\u2019 button behind the desired alias. Enter the \u2018Recipient\u2019 account id and optionally a message. Enter your \u2018Passphrase\u2019 and click on \u2018Transfer Alias\u2019. Sell alias Click on \u2018Sell\u2019 behind the alias. You can sell it to a specific user or offer it to the Burst network for purchase. Enter the price and the corresponding data. Confirm with your \u2018Passphrase\u2019 and click on \u2018Sell Alias\u2019.","title":"Alias System"},{"location":"en/alias-system/#description","text":"The Alias System feature of Burst essentially allows one piece of text to be substituted for another, so that keywords or keyphrases can be used to represent other things \u2013 names, telephone numbers, physical addresses, web sites, account numbers, email addresses, product SKU codes... almost anything you can think of. For example, you could ask Burst to associate \u201csearch\u201d with \u201cwww.google.com\u201d. Once this is done, all you have to do to get to Google is type \u201cburst:search\u201d into a Burst-capable browser, and it will translate your request in one for \u201cwww.google.com\u201d. Immediate applications are simple: you can create an easy-to-remember alias for your Burst account number, for example. But since the Alias System is open-ended, it can be used to implement a decentralized DNS system, shopping cart applications, and more. Creating aliases is A user sends a transaction that states \u201cThisText = ThatText\u201d. You can use the wallet menu \u2018Aliases\u2019 and click on \u2018Register Alias\u2019. If the alias is to be changed, just send another transaction with a new definition. Use the \u2018Edit\u2019 button in \u2018Aliases\u2019 menu.","title":"Description"},{"location":"en/alias-system/#details","text":"The alias can be any string of latin-character numbers and letters. The address can be anything like: \u201c173.194.112.174\u201d (an IPv4 address) \u201c2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d\u201d (an IPv6 address) \u201cexample.com/secretpage.php?parameter=value\u201d (a URI) \u201cjohnsmith@example.com\u201d \u201ctel:+44-20-8123-4567\u201d \u201cbitcoin:12dDMfhWq3scNWDsL4ty1Q5skyJj6M4scB\u201d There are 2 main ways to use Burst aliases without having to rely on third-party plugins for your browser: Server-side A web server analyses the Burst blockchain and replaces \u201cburst-links\u201d with corresponding addresses before sending HTML documents to users. Client-side A web browser runs javascript code that connects to Burst bootstrapping nodes and replaces \u201cburst-links\u201d with their addresses. This requires to embedding a small script which is executed in an \u201conload\u201d event. The script will do all the work via CORS, JSON, or other techniques. Changes can only be executed by the account that originally created the alias.","title":"Details"},{"location":"en/alias-system/#alias-transfersale","text":"Aliases can be transferred for a 1 BURST fee. Alias can be sold to either specific BURST Accounts or to the general public. To sell an alias, you can set the price to sell for every alias.","title":"Alias Transfer/Sale"},{"location":"en/alias-system/#how-to","text":"Open your Burst client and select the \u2018Aliases\u2019 menu.","title":"How To"},{"location":"en/alias-system/#register-alias","text":"Click on \u2018Register Alias\u2019 in the upper right corner. Select the \u2018Type\u2019: \u201cURI\u201d, \u201cAccount\u201d or \u201cOther\u201d. In \u2018Alias\u2019 field, enter the name without blank spaces. Depending on the selected \u2018Type\u2019, the text input field is named as \u2018URI\u2019, \u2018Account ID\u2019 or \u2018Data\u2019. The \u2018Data\u2019 field can contain any text with a length of up to 1000 bytes. Enter your \u2018Passphrase\u2019 and click on \u2018Register\u2019. It is listed in italics on the page. After the network has processed your message (usually after a few minutes), it will be listet in normal font.","title":"Register alias"},{"location":"en/alias-system/#edit-alias","text":"Click on \u2018Edit\u2019 behind the alias you want to change. You can modify the \u2018Type\u2019 and \u2018Data\u2019. You can not rename the \u2018Alias\u2019. Enter your \u2018Passphrase\u2019 and click on \u2018Update\u2019.","title":"Edit alias"},{"location":"en/alias-system/#transfer-alias","text":"Click on the \u2018Transfer\u2019 button behind the desired alias. Enter the \u2018Recipient\u2019 account id and optionally a message. Enter your \u2018Passphrase\u2019 and click on \u2018Transfer Alias\u2019.","title":"Transfer alias"},{"location":"en/alias-system/#sell-alias","text":"Click on \u2018Sell\u2019 behind the alias. You can sell it to a specific user or offer it to the Burst network for purchase. Enter the price and the corresponding data. Confirm with your \u2018Passphrase\u2019 and click on \u2018Sell Alias\u2019.","title":"Sell alias"},{"location":"en/arbitrary-messages/","text":"Description Transmission of data messages up to 1000 bytes in length from one account to another account. Details Arbitrary messages are limited only by length. Any string can be transmitted, using any data structure or form of data encryption. Encoding, decoding, linked messages, data structures, and more can be implemented by any application that uses the system. The base implementation allows for the transmission of simple, unencrypted text messages between accounts, but since the messages are truly \u201carbitrary\u201d the range of possible applications is vast. Secure messaging, torrent applications, voting systems, data storage systems and even simple distributed applications have been suggested. How To Open your Burst client and login using your passphrase. Sending Messages Select the Messages option from the left-hand menu or click on the messages icon as shown below and click on \u2018Send Message\u2019. In the Recipient field, enter the Burst address that you wish to send the message to. In the Message field, you can enter any text with a length of up to 1000 bytes. When sending, you receive a corresponding error message if you enter longer text. You can select the checkbox \u2018Encrypt Message\u2019 or send the data in plain text. The recipient needs his passphrase to read encrypted messages. In the Passphrase field, enter your \u2018Passphrase\u2019 and click on Send Message . An example, encrypted message is shown below: When you have sent the message it is listed in italics on the transactions page. After the network has processed your message (usually after a few minutes), it will be listed in normal font. Receiving Messages Select the Messages option from the left-hand menu or click on the messages icon as shown below and click on \u2018Inbox\u2019. Here you can find all the received messages sorted by the burst accounts. Select one of the senders accounts and the messages sent from this account will be displayed. If the message has been encrypted, you will see a padlock symbol and a prompt to enter your passphrase to decrypt the messages present as shown below: Selecting one of the messages allows you to enter your passphrase. You can also select the checkbox to remember you pasphrase for decryption. Once you enter your passphrase the message content will be shown. Below the messages you will find input fields to respond directly to the sender. Using the Burst API The Burst API is also available to encrypt, send, decrypt and read messages : High-Level API calls for implementing arbitrary messages .","title":"Arbitrary Messages"},{"location":"en/arbitrary-messages/#description","text":"Transmission of data messages up to 1000 bytes in length from one account to another account.","title":"Description"},{"location":"en/arbitrary-messages/#details","text":"Arbitrary messages are limited only by length. Any string can be transmitted, using any data structure or form of data encryption. Encoding, decoding, linked messages, data structures, and more can be implemented by any application that uses the system. The base implementation allows for the transmission of simple, unencrypted text messages between accounts, but since the messages are truly \u201carbitrary\u201d the range of possible applications is vast. Secure messaging, torrent applications, voting systems, data storage systems and even simple distributed applications have been suggested.","title":"Details"},{"location":"en/arbitrary-messages/#how-to","text":"Open your Burst client and login using your passphrase.","title":"How To"},{"location":"en/arbitrary-messages/#sending-messages","text":"Select the Messages option from the left-hand menu or click on the messages icon as shown below and click on \u2018Send Message\u2019. In the Recipient field, enter the Burst address that you wish to send the message to. In the Message field, you can enter any text with a length of up to 1000 bytes. When sending, you receive a corresponding error message if you enter longer text. You can select the checkbox \u2018Encrypt Message\u2019 or send the data in plain text. The recipient needs his passphrase to read encrypted messages. In the Passphrase field, enter your \u2018Passphrase\u2019 and click on Send Message . An example, encrypted message is shown below: When you have sent the message it is listed in italics on the transactions page. After the network has processed your message (usually after a few minutes), it will be listed in normal font.","title":"Sending Messages"},{"location":"en/arbitrary-messages/#receiving-messages","text":"Select the Messages option from the left-hand menu or click on the messages icon as shown below and click on \u2018Inbox\u2019. Here you can find all the received messages sorted by the burst accounts. Select one of the senders accounts and the messages sent from this account will be displayed. If the message has been encrypted, you will see a padlock symbol and a prompt to enter your passphrase to decrypt the messages present as shown below: Selecting one of the messages allows you to enter your passphrase. You can also select the checkbox to remember you pasphrase for decryption. Once you enter your passphrase the message content will be shown. Below the messages you will find input fields to respond directly to the sender.","title":"Receiving Messages"},{"location":"en/arbitrary-messages/#using-the-burst-api","text":"The Burst API is also available to encrypt, send, decrypt and read messages : High-Level API calls for implementing arbitrary messages .","title":"Using the Burst API"},{"location":"en/asset-exchange/","text":"Description The Burst Asset Exchange is a built-in peer-to-peer exchange integrated into the Burst Wallet. It allows fast, secure, and decentralized trading of Burst Assets. Because of its decentralized nature, there\u2019s no need for outside organizations or agencies to meddle with its affairs, resulting in improved efficiency and reduced costs. There\u2019s a wide range of application for potential investments or trades in Asset Exchange due to the fact that Burst Assets can be used as a token for almost anything with value. Examples of such assets include shares in the following: mining pools, retirement funds, crypto mining rigs, crypto gambling sites and silver investments. An overview of the most traded Assets is available here . Investing Investing in the Burst asset exchange requires only two things : a Burst wallet and a few burstcoins. The Burst wallet allows direct peer-to-peer trading of assets without any intermediary so fees are almost inexistant. There are many benefits to owning Asset shares which make it an investment well worth adding to your investment portfolio in the Burst Universe : Capital growth A long term objective of Asset share investment is to take advantage of capital growth. This occurs when an individual experiences significant capital gains from the shares they possess through increases in share prices. Some Assets also issue free or bonus shares to their shareholders as another way of passing on company profits or increases in their net worth. Dividends Ownership in an Asset entitles you to ownership of their net profits. Assets honor this entitlement to their shareholders in the form of dividends. Another dividend approach used by some Assets is to have a portion of its dividends reinvested in the Asset. In this philosophy, additional shares are issued to shareholders, aside from paying out dividends in Burst. Liquidity By their nature, Asset shares are a very liquid product. They can be bought and sold quickly on the Asset Exchange platform. Trading on Asset Exchange also allows you to sell part of your share parcels rather than having to redeem the whole lot. Facilitating business growth There are multiple benefits to issuing an asset on the Burst platform. Entrepreneurs who seek investors in order to expand their business can put shares of their project for sale on the Asset exchange. You\u2019re not taking value from other people, you are actually promoting business activity in a wider distributed scale. There are several advantages given by the Burst asset exchange, such as : Simplicity issuing an asset on the asset exchange takes only a few clicks and a small fee of 1000 burstcoins. What you need to do is promote your asset and try to attract your investors with trust and results. Business growth you can concentrate on running your business and expanding your existing income stream to benefit both you and your investors. No need to lose time and focus on unnecessary things. Sense of community be a part of the Burst ecosystem along with a strong community of investors always ready to analyse and criticize your business choices and help you when necessary. This is a win-win relationship and a beautiful adventure for both parties. Interface If you have QBundle installed, then simply start the wallet and connect to your Burst account. If you're using BRS only, then simply access the Burst interface by visiting http://127.0.0.1:8125/ Asset Exchange This tab gives you access to the Asset Exchange itself. To observe an asset click the \u201cAdd asset\u201d button and enter either the Asset ID or ID of the issuing account. Assets of your interest will be listed on the left. By selecting an asset, further information is provided: a description, buy and sell orders, the quantity etc. Transfer History Here is listed the transfer history of the assets in your possession. My Assets This page will list all the assets in your possession: both those issued by you and those you bought from the exchange. Open Orders Here is provided a list of all your orders, notably the assets you are either trying to sell or to buy. It also allows you to cancel them. Issue Asset A window will pop up allowing you to issue your own assets into the exchange. Payout Dividends This page allows you to use the Asset Distribution Modules. There are three modules: Dividends, Automatic Asset Distribution, Share Swap. Asset Exchange menu By default, the Asset Exchange does not list any asset. You will have therefore to add the assets (using the Add Asset button) you are interested in, manually, yourself. For this purpose websites that rank the assets in meaningful ways (by volume, by number of trades etc) and that offer specific filters are starting to appear. If you find yourself in the page of an asset, a Bookmark this Asset button will appear that will allow you to keep track of it. Here are a few lists you can consult to obtain the IDs of the assets. Keep in mind more will appear, so this list is not exhaustive. http://burstcoin.cc/asset https://explorer.burstcoin.network/?action=assets https://explore.burst.cryptoguru.org/asset Note : you can only add assets to the list if you are using the browser in normal mode. If you are in incognito (or equivalent) then any added list will disappear once you close the browser window. This is the main menu for the Asset Exchange, it is fundamentally organized in two areas. a list with all the assets you are tracking an interface that allows to interact with these assets If you own tokens for an asset, it will appear in yellow on the side list. By selecting an asset, the interface area will automatically display the corresponding information. This includes the amount of tokens that have been created (\u201cquantity\u201d), how divisible is the token (\u201casset decimals\u201d), a brief description of the asset, who created the asset (\u201caccount\u201d) and the asset identifier (\u201casset ID\u201d). These informations are crucial, in fact the asset names are non-unique . What this means is that there can be multiple assets that have the same name. The cost of issuing an asset (1000 BURST) should discourage people from spamming the exchange with assets whose only purpose is confusion and abuse. Without entering this worst-case scenario, it is reasonable to assume that perfectly legit users may create assets of the same name. Therefore a good degree of vigilance before buying is always beneficial. In order to buy an asset, follow these simple steps: Select the asset from the list. Click on \u201cBuy *Asset Name* with BURST\u201d Quantity: define how many assets you are interested in buying. Price: set how much you are willing to pay. Warnng: \u201cprice\u201d refers to the cost of a unit of tokens. So, by entering 10, you are willing to pay 10 BURST per token. Fee: define the fee, the minimum is 1 BURST. Press buy. It will ask you for your passphrase and finally press buy asset. My Assets menu In this menu all your confirmed assets will be displayed, this includes the assets you issued and those you obtained through trading. Assets are also transferable, the procedure is very simple: Under My Assets , find the asset you wish to transfer. Click transfer . Type the recipient Select the quantity of asset you want to send Add a message with the transfer if you want. Complete the fields as follows. RECIPIENT The account you wish to transfer the assets to. Mandatory : this field is mandatory. QUANTITY Specify the amount of assets you wish to transfer. Mandatory : this field is mandatory. Limits : there is no upper limit, you can transfer all your assets. The minimum amount you can transfer depends on the nature of the asset. In particular it depends on what has been defined as decimals. For 0 decimals, the minimum would be 1 token. For 1 decimal, it would be 0.1 tokens and so on. ADD MESSAGE You can attach a brief message to the transfer. Optional : this field is optional. Characters allowed : it can contain any Unicode characters but should be URL-encoded. Maximum length of 1000 characters. FEE Set the fee you are willing to pay for the transaction. Mandatory : this field is mandatory. Limits : there is no upper limit. However the minimum fee is 1 BRUST. DEADLINE Set how long you are willing to wait before the request gets automatically deleted. Mandatory : this field is mandatory. Expressed in hours SECRET PASSPHRASE Enter your passphrase. Mandatory : this field is mandatory. Open Orders menu Under this menu you can see all your orders that are currently open. What to keep in mind: You can cancel any order you made. However The process is not instantaneous. Your cancel order is broadcasted to the network, it may happen that your order gets accepted before you can manage to cancel it. The process of canceling an order is a transaction, meaning it involves a fee of 1 BURST. An order in the process of being canceled will appear in red under your Open Orders menu. Issue Asset menu Under this menu, you can issue assets yourself. These will be publicly available on the Asset Exchange where they can be traded for BURST and vice-versa. The following window will pop up: NOTE: as the warning mentions, when you issue your asset you will not be able to modify any of the fields, ever. Reason why it is imperative to make sure all the information entered is correct. ASSET NAME The name of the asset you intend to issue. This is also the name announced to other traders, allowing them to find this asset. Mandatory : you cannot issue an unnamed asset. Names are non-unique: multiple assets can be issued with the same name. Note : for this reason, pay attention to what you are buying or selling! Length : between 3 and 10 characters. Characters allowed : uppercase letters, lowercase letters and numbers. DESCRIPTION In this field you can briefly describe the asset being issued. Mandatory : this field is mandatory. Characters allowed : it can contain any Unicode characters but should be URL-encoded. Maximum length of 1000 characters. QUANTITY Specify how many tokens you intend to create. Mandatory : this field is mandatory. Must be a whole number DECIMALS This field defines the divisibility of the token. As an example, by defining 2 decimals, the minimum amount of tokens you can sell or buy is 0.01. Mandatory : this field is mandatory. Limits : you can set from 0 to, at most, 8 decimals. The latter corresponds to the minimum of 0.00000001 tokens. FEE Define the fee related to issuing the asset. To avoid spam on the Asset Exchange, 1000 BURST are the minimum required to issue an asset. Mandatory : this field is mandatory. PASSPHRASE The asset belongs to the person issuing it. Therefore it is required to enter your own passphrase. It will not be broadcasted. Mandatory : this field is mandatory. Note : assets belong to the person that creates them, but they can be bought, sold and transfered.","title":"Asset Exchange"},{"location":"en/asset-exchange/#description","text":"The Burst Asset Exchange is a built-in peer-to-peer exchange integrated into the Burst Wallet. It allows fast, secure, and decentralized trading of Burst Assets. Because of its decentralized nature, there\u2019s no need for outside organizations or agencies to meddle with its affairs, resulting in improved efficiency and reduced costs. There\u2019s a wide range of application for potential investments or trades in Asset Exchange due to the fact that Burst Assets can be used as a token for almost anything with value. Examples of such assets include shares in the following: mining pools, retirement funds, crypto mining rigs, crypto gambling sites and silver investments. An overview of the most traded Assets is available here .","title":"Description"},{"location":"en/asset-exchange/#investing","text":"Investing in the Burst asset exchange requires only two things : a Burst wallet and a few burstcoins. The Burst wallet allows direct peer-to-peer trading of assets without any intermediary so fees are almost inexistant. There are many benefits to owning Asset shares which make it an investment well worth adding to your investment portfolio in the Burst Universe :","title":"Investing"},{"location":"en/asset-exchange/#capital-growth","text":"A long term objective of Asset share investment is to take advantage of capital growth. This occurs when an individual experiences significant capital gains from the shares they possess through increases in share prices. Some Assets also issue free or bonus shares to their shareholders as another way of passing on company profits or increases in their net worth.","title":"Capital growth"},{"location":"en/asset-exchange/#dividends","text":"Ownership in an Asset entitles you to ownership of their net profits. Assets honor this entitlement to their shareholders in the form of dividends. Another dividend approach used by some Assets is to have a portion of its dividends reinvested in the Asset. In this philosophy, additional shares are issued to shareholders, aside from paying out dividends in Burst.","title":"Dividends"},{"location":"en/asset-exchange/#liquidity","text":"By their nature, Asset shares are a very liquid product. They can be bought and sold quickly on the Asset Exchange platform. Trading on Asset Exchange also allows you to sell part of your share parcels rather than having to redeem the whole lot.","title":"Liquidity"},{"location":"en/asset-exchange/#facilitating-business-growth","text":"There are multiple benefits to issuing an asset on the Burst platform. Entrepreneurs who seek investors in order to expand their business can put shares of their project for sale on the Asset exchange. You\u2019re not taking value from other people, you are actually promoting business activity in a wider distributed scale. There are several advantages given by the Burst asset exchange, such as :","title":"Facilitating business growth"},{"location":"en/asset-exchange/#simplicity","text":"issuing an asset on the asset exchange takes only a few clicks and a small fee of 1000 burstcoins. What you need to do is promote your asset and try to attract your investors with trust and results.","title":"Simplicity"},{"location":"en/asset-exchange/#business-growth","text":"you can concentrate on running your business and expanding your existing income stream to benefit both you and your investors. No need to lose time and focus on unnecessary things.","title":"Business growth"},{"location":"en/asset-exchange/#sense-of-community","text":"be a part of the Burst ecosystem along with a strong community of investors always ready to analyse and criticize your business choices and help you when necessary. This is a win-win relationship and a beautiful adventure for both parties.","title":"Sense of community"},{"location":"en/asset-exchange/#interface","text":"If you have QBundle installed, then simply start the wallet and connect to your Burst account. If you're using BRS only, then simply access the Burst interface by visiting http://127.0.0.1:8125/ Asset Exchange This tab gives you access to the Asset Exchange itself. To observe an asset click the \u201cAdd asset\u201d button and enter either the Asset ID or ID of the issuing account. Assets of your interest will be listed on the left. By selecting an asset, further information is provided: a description, buy and sell orders, the quantity etc. Transfer History Here is listed the transfer history of the assets in your possession. My Assets This page will list all the assets in your possession: both those issued by you and those you bought from the exchange. Open Orders Here is provided a list of all your orders, notably the assets you are either trying to sell or to buy. It also allows you to cancel them. Issue Asset A window will pop up allowing you to issue your own assets into the exchange. Payout Dividends This page allows you to use the Asset Distribution Modules. There are three modules: Dividends, Automatic Asset Distribution, Share Swap.","title":"Interface"},{"location":"en/asset-exchange/#asset-exchange-menu","text":"By default, the Asset Exchange does not list any asset. You will have therefore to add the assets (using the Add Asset button) you are interested in, manually, yourself. For this purpose websites that rank the assets in meaningful ways (by volume, by number of trades etc) and that offer specific filters are starting to appear. If you find yourself in the page of an asset, a Bookmark this Asset button will appear that will allow you to keep track of it. Here are a few lists you can consult to obtain the IDs of the assets. Keep in mind more will appear, so this list is not exhaustive. http://burstcoin.cc/asset https://explorer.burstcoin.network/?action=assets https://explore.burst.cryptoguru.org/asset Note : you can only add assets to the list if you are using the browser in normal mode. If you are in incognito (or equivalent) then any added list will disappear once you close the browser window. This is the main menu for the Asset Exchange, it is fundamentally organized in two areas. a list with all the assets you are tracking an interface that allows to interact with these assets If you own tokens for an asset, it will appear in yellow on the side list. By selecting an asset, the interface area will automatically display the corresponding information. This includes the amount of tokens that have been created (\u201cquantity\u201d), how divisible is the token (\u201casset decimals\u201d), a brief description of the asset, who created the asset (\u201caccount\u201d) and the asset identifier (\u201casset ID\u201d). These informations are crucial, in fact the asset names are non-unique . What this means is that there can be multiple assets that have the same name. The cost of issuing an asset (1000 BURST) should discourage people from spamming the exchange with assets whose only purpose is confusion and abuse. Without entering this worst-case scenario, it is reasonable to assume that perfectly legit users may create assets of the same name. Therefore a good degree of vigilance before buying is always beneficial. In order to buy an asset, follow these simple steps: Select the asset from the list. Click on \u201cBuy *Asset Name* with BURST\u201d Quantity: define how many assets you are interested in buying. Price: set how much you are willing to pay. Warnng: \u201cprice\u201d refers to the cost of a unit of tokens. So, by entering 10, you are willing to pay 10 BURST per token. Fee: define the fee, the minimum is 1 BURST. Press buy. It will ask you for your passphrase and finally press buy asset.","title":"Asset Exchange menu"},{"location":"en/asset-exchange/#my-assets-menu","text":"In this menu all your confirmed assets will be displayed, this includes the assets you issued and those you obtained through trading. Assets are also transferable, the procedure is very simple: Under My Assets , find the asset you wish to transfer. Click transfer . Type the recipient Select the quantity of asset you want to send Add a message with the transfer if you want. Complete the fields as follows. RECIPIENT The account you wish to transfer the assets to. Mandatory : this field is mandatory. QUANTITY Specify the amount of assets you wish to transfer. Mandatory : this field is mandatory. Limits : there is no upper limit, you can transfer all your assets. The minimum amount you can transfer depends on the nature of the asset. In particular it depends on what has been defined as decimals. For 0 decimals, the minimum would be 1 token. For 1 decimal, it would be 0.1 tokens and so on. ADD MESSAGE You can attach a brief message to the transfer. Optional : this field is optional. Characters allowed : it can contain any Unicode characters but should be URL-encoded. Maximum length of 1000 characters. FEE Set the fee you are willing to pay for the transaction. Mandatory : this field is mandatory. Limits : there is no upper limit. However the minimum fee is 1 BRUST. DEADLINE Set how long you are willing to wait before the request gets automatically deleted. Mandatory : this field is mandatory. Expressed in hours SECRET PASSPHRASE Enter your passphrase. Mandatory : this field is mandatory.","title":"My Assets menu"},{"location":"en/asset-exchange/#open-orders-menu","text":"Under this menu you can see all your orders that are currently open. What to keep in mind: You can cancel any order you made. However The process is not instantaneous. Your cancel order is broadcasted to the network, it may happen that your order gets accepted before you can manage to cancel it. The process of canceling an order is a transaction, meaning it involves a fee of 1 BURST. An order in the process of being canceled will appear in red under your Open Orders menu.","title":"Open Orders menu"},{"location":"en/asset-exchange/#issue-asset-menu","text":"Under this menu, you can issue assets yourself. These will be publicly available on the Asset Exchange where they can be traded for BURST and vice-versa. The following window will pop up: NOTE: as the warning mentions, when you issue your asset you will not be able to modify any of the fields, ever. Reason why it is imperative to make sure all the information entered is correct. ASSET NAME The name of the asset you intend to issue. This is also the name announced to other traders, allowing them to find this asset. Mandatory : you cannot issue an unnamed asset. Names are non-unique: multiple assets can be issued with the same name. Note : for this reason, pay attention to what you are buying or selling! Length : between 3 and 10 characters. Characters allowed : uppercase letters, lowercase letters and numbers. DESCRIPTION In this field you can briefly describe the asset being issued. Mandatory : this field is mandatory. Characters allowed : it can contain any Unicode characters but should be URL-encoded. Maximum length of 1000 characters. QUANTITY Specify how many tokens you intend to create. Mandatory : this field is mandatory. Must be a whole number DECIMALS This field defines the divisibility of the token. As an example, by defining 2 decimals, the minimum amount of tokens you can sell or buy is 0.01. Mandatory : this field is mandatory. Limits : you can set from 0 to, at most, 8 decimals. The latter corresponds to the minimum of 0.00000001 tokens. FEE Define the fee related to issuing the asset. To avoid spam on the Asset Exchange, 1000 BURST are the minimum required to issue an asset. Mandatory : this field is mandatory. PASSPHRASE The asset belongs to the person issuing it. Therefore it is required to enter your own passphrase. It will not be broadcasted. Mandatory : this field is mandatory. Note : assets belong to the person that creates them, but they can be bought, sold and transfered.","title":"Issue Asset menu"},{"location":"en/automated-transaction/","text":"Introduction Automated Transactions are how Burst implements smart contracts. The formalism Burst implements for Automated Transactions (AT) is a technology created by CIYAM Developers which provides \u201cTuring complete smart contracts\u201d.","title":"Automated Transaction"},{"location":"en/automated-transaction/#introduction","text":"Automated Transactions are how Burst implements smart contracts. The formalism Burst implements for Automated Transactions (AT) is a technology created by CIYAM Developers which provides \u201cTuring complete smart contracts\u201d.","title":"Introduction"},{"location":"en/block-reward/","text":"Introduction The Burst mining reward is reduced after every 10800 blocks which is approximately one month. The general formula for calculating the block reward based on the current block height is: month = blockHeight / 10800 reward = 10000 * 95^month / 100^month Graph of Block Reward Table of Block Rewards Month Approx. Date Block Height Reward in BURST 0 2014-08-11 0 10000 1 2014-09-11 10800 9500 2 2014-10-11 21600 9025 3 2014-11-11 32400 8573 4 2014-12-11 43200 8145 5 2015-01-11 54000 7737 6 2015-02-11 64800 7350 7 2015-03-11 75600 6983 8 2015-04-11 86400 6634 9 2015-05-11 97200 6302 10 2015-06-11 108000 5987 11 2015-07-11 118800 5688 12 2015-08-11 129600 5403 13 2015-09-11 140400 5133 14 2015-10-11 151200 4876 15 2015-11-11 162000 4632 16 2015-12-11 172800 4401 17 2016-01-11 183600 4181 18 2016-02-11 194400 3972 19 2016-03-11 205200 3773 20 2016-04-11 216000 3584 21 2016-05-11 226800 3405 22 2016-06-11 237600 3235 23 2016-07-11 248400 3073 24 2016-08-11 259200 2919 25 2016-09-11 270000 2773 26 2016-10-11 280800 2635 27 2016-11-11 291600 2503 28 2016-12-11 302400 2378 29 2017-01-11 313200 2259 30 2017-02-11 324000 2146 31 2017-03-11 334800 2039 32 2017-04-11 345600 1937 33 2017-05-11 356400 1840 34 2017-06-11 367200 1748 35 2017-07-11 378000 1660 36 2017-08-11 388800 1577 37 2017-09-11 399600 1498 38 2017-10-11 410400 1423 39 2017-11-11 421200 1352 40 2017-12-11 432000 1285 41 2018-01-11 442800 1220 42 2018-02-11 453600 1159 43 2018-03-11 464400 1101 44 2018-04-11 475200 1046 45 2018-05-11 486000 994 46 2018-06-11 496800 944 47 2018-07-11 507600 897 48 2018-08-11 518400 852 49 2018-09-11 529200 809 50 2018-10-11 540000 769 51 2018-11-11 550800 730 52 2018-12-11 561600 694 53 2019-01-11 572400 659 54 2019-02-11 583200 626 55 2019-03-11 594000 595 56 2019-04-11 604800 565 57 2019-05-11 615600 537 58 2019-06-11 626400 510 59 2019-07-11 637200 484 60 2019-08-11 648000 460 61 2019-09-11 658800 437 62 2019-10-11 669600 415 63 2019-11-11 680400 394 64 2019-12-11 691200 375 65 2020-01-11 702000 356 66 2020-02-11 712800 338 67 2020-03-11 723600 321 68 2020-04-11 734400 305 69 2020-05-11 745200 290 70 2020-06-11 756000 275 71 2020-07-11 766800 262 72 2020-08-11 777600 248 73 2020-09-11 788400 236 74 2020-10-11 799200 224 75 2020-11-11 810000 213 76 2020-12-11 820800 202 77 2021-01-11 831600 192 78 2021-02-11 842400 182 79 2021-03-11 853200 173 80 2021-04-11 864000 165 81 2021-05-11 874800 156 82 2021-06-11 885600 149 83 2021-07-11 896400 141 84 2021-08-11 907200 134 85 2021-09-11 918000 127 86 2021-10-11 928800 121 87 2021-11-11 939600 115 88 2021-12-11 950400 109 89 2022-01-11 961200 104 90 2022-02-11 972000 98 91 2022-03-11 982800 93 92 2022-04-11 993600 89 93 2022-05-11 1004400 84 94 2022-06-11 1015200 80 95 2022-07-11 1026000 76 96 2022-08-11 1036800 72 97 2022-09-11 1047600 69 98 2022-10-11 1058400 65 99 2022-11-11 1069200 62 100 2022-12-11 1080000 59 101 2023-01-11 1090800 56 102 2023-02-11 1101600 53 103 2023-03-11 1112400 50 104 2023-04-11 1123200 48 105 2023-05-11 1134000 45 106 2023-06-11 1144800 43 107 2023-07-11 1155600 41 108 2023-08-11 1166400 39 109 2023-09-11 1177200 37 110 2023-10-11 1188000 35 111 2023-11-11 1198800 33 112 2023-12-11 1209600 31 113 2024-01-11 1220400 30 114 2024-02-11 1231200 28 115 2024-03-11 1242000 27 116 2024-04-11 1252800 26 117 2024-05-11 1263600 24 118 2024-06-11 1274400 23 119 2024-07-11 1285200 22 120 2024-08-11 1296000 21 121 2024-09-11 1306800 20 122 2024-10-11 1317600 19 123 2024-11-11 1328400 18 124 2024-12-11 1339200 17 125 2025-01-11 1350000 16 126 2025-02-11 1360800 15 127 2025-03-11 1371600 14 128 2025-04-11 1382400 14 129 2025-05-11 1393200 13 130 2025-06-11 1404000 12 131 2025-07-11 1414800 12 132 2025-08-11 1425600 11 133 2025-09-11 1436400 10 134 2025-10-11 1447200 10 135 2025-11-11 1458000 9 136 2025-12-11 1468800 9 137 2026-01-11 1479600 8 138 2026-02-11 1490400 8 139 2026-03-11 1501200 8 140 2026-04-11 1512000 7 141 2026-05-11 1522800 7 142 2026-06-11 1533600 6 143 2026-07-11 1544400 6 144 2026-08-11 1555200 6 145 2026-09-11 1566000 5 146 2026-10-11 1576800 5 147 2026-11-11 1587600 5 148 2026-12-11 1598400 5 149 2027-01-11 1609200 4 150 2027-02-11 1620000 4 151 2027-03-11 1630800 4 152 2027-04-11 1641600 4 153 2027-05-11 1652400 3","title":"Block Reward"},{"location":"en/block-reward/#introduction","text":"The Burst mining reward is reduced after every 10800 blocks which is approximately one month. The general formula for calculating the block reward based on the current block height is: month = blockHeight / 10800 reward = 10000 * 95^month / 100^month","title":"Introduction"},{"location":"en/block-reward/#graph-of-block-reward","text":"","title":"Graph of Block Reward"},{"location":"en/block-reward/#table-of-block-rewards","text":"Month Approx. Date Block Height Reward in BURST 0 2014-08-11 0 10000 1 2014-09-11 10800 9500 2 2014-10-11 21600 9025 3 2014-11-11 32400 8573 4 2014-12-11 43200 8145 5 2015-01-11 54000 7737 6 2015-02-11 64800 7350 7 2015-03-11 75600 6983 8 2015-04-11 86400 6634 9 2015-05-11 97200 6302 10 2015-06-11 108000 5987 11 2015-07-11 118800 5688 12 2015-08-11 129600 5403 13 2015-09-11 140400 5133 14 2015-10-11 151200 4876 15 2015-11-11 162000 4632 16 2015-12-11 172800 4401 17 2016-01-11 183600 4181 18 2016-02-11 194400 3972 19 2016-03-11 205200 3773 20 2016-04-11 216000 3584 21 2016-05-11 226800 3405 22 2016-06-11 237600 3235 23 2016-07-11 248400 3073 24 2016-08-11 259200 2919 25 2016-09-11 270000 2773 26 2016-10-11 280800 2635 27 2016-11-11 291600 2503 28 2016-12-11 302400 2378 29 2017-01-11 313200 2259 30 2017-02-11 324000 2146 31 2017-03-11 334800 2039 32 2017-04-11 345600 1937 33 2017-05-11 356400 1840 34 2017-06-11 367200 1748 35 2017-07-11 378000 1660 36 2017-08-11 388800 1577 37 2017-09-11 399600 1498 38 2017-10-11 410400 1423 39 2017-11-11 421200 1352 40 2017-12-11 432000 1285 41 2018-01-11 442800 1220 42 2018-02-11 453600 1159 43 2018-03-11 464400 1101 44 2018-04-11 475200 1046 45 2018-05-11 486000 994 46 2018-06-11 496800 944 47 2018-07-11 507600 897 48 2018-08-11 518400 852 49 2018-09-11 529200 809 50 2018-10-11 540000 769 51 2018-11-11 550800 730 52 2018-12-11 561600 694 53 2019-01-11 572400 659 54 2019-02-11 583200 626 55 2019-03-11 594000 595 56 2019-04-11 604800 565 57 2019-05-11 615600 537 58 2019-06-11 626400 510 59 2019-07-11 637200 484 60 2019-08-11 648000 460 61 2019-09-11 658800 437 62 2019-10-11 669600 415 63 2019-11-11 680400 394 64 2019-12-11 691200 375 65 2020-01-11 702000 356 66 2020-02-11 712800 338 67 2020-03-11 723600 321 68 2020-04-11 734400 305 69 2020-05-11 745200 290 70 2020-06-11 756000 275 71 2020-07-11 766800 262 72 2020-08-11 777600 248 73 2020-09-11 788400 236 74 2020-10-11 799200 224 75 2020-11-11 810000 213 76 2020-12-11 820800 202 77 2021-01-11 831600 192 78 2021-02-11 842400 182 79 2021-03-11 853200 173 80 2021-04-11 864000 165 81 2021-05-11 874800 156 82 2021-06-11 885600 149 83 2021-07-11 896400 141 84 2021-08-11 907200 134 85 2021-09-11 918000 127 86 2021-10-11 928800 121 87 2021-11-11 939600 115 88 2021-12-11 950400 109 89 2022-01-11 961200 104 90 2022-02-11 972000 98 91 2022-03-11 982800 93 92 2022-04-11 993600 89 93 2022-05-11 1004400 84 94 2022-06-11 1015200 80 95 2022-07-11 1026000 76 96 2022-08-11 1036800 72 97 2022-09-11 1047600 69 98 2022-10-11 1058400 65 99 2022-11-11 1069200 62 100 2022-12-11 1080000 59 101 2023-01-11 1090800 56 102 2023-02-11 1101600 53 103 2023-03-11 1112400 50 104 2023-04-11 1123200 48 105 2023-05-11 1134000 45 106 2023-06-11 1144800 43 107 2023-07-11 1155600 41 108 2023-08-11 1166400 39 109 2023-09-11 1177200 37 110 2023-10-11 1188000 35 111 2023-11-11 1198800 33 112 2023-12-11 1209600 31 113 2024-01-11 1220400 30 114 2024-02-11 1231200 28 115 2024-03-11 1242000 27 116 2024-04-11 1252800 26 117 2024-05-11 1263600 24 118 2024-06-11 1274400 23 119 2024-07-11 1285200 22 120 2024-08-11 1296000 21 121 2024-09-11 1306800 20 122 2024-10-11 1317600 19 123 2024-11-11 1328400 18 124 2024-12-11 1339200 17 125 2025-01-11 1350000 16 126 2025-02-11 1360800 15 127 2025-03-11 1371600 14 128 2025-04-11 1382400 14 129 2025-05-11 1393200 13 130 2025-06-11 1404000 12 131 2025-07-11 1414800 12 132 2025-08-11 1425600 11 133 2025-09-11 1436400 10 134 2025-10-11 1447200 10 135 2025-11-11 1458000 9 136 2025-12-11 1468800 9 137 2026-01-11 1479600 8 138 2026-02-11 1490400 8 139 2026-03-11 1501200 8 140 2026-04-11 1512000 7 141 2026-05-11 1522800 7 142 2026-06-11 1533600 6 143 2026-07-11 1544400 6 144 2026-08-11 1555200 6 145 2026-09-11 1566000 5 146 2026-10-11 1576800 5 147 2026-11-11 1587600 5 148 2026-12-11 1598400 5 149 2027-01-11 1609200 4 150 2027-02-11 1620000 4 151 2027-03-11 1630800 4 152 2027-04-11 1641600 4 153 2027-05-11 1652400 3","title":"Table of Block Rewards"},{"location":"en/brs-default-properties-configuration-file/","text":"Introduction The file conf/brs-default.properties is very well self-documented via comments within the file. Note, however, that the proper way to introduce changes is to leave this file AS-IS with its defaults and instead create the file conf/brs.properties . Put the entries with desired non-default settings in the new file. When BRS runs, it reads both files and settings from brs.properties will override settings from the brs-default.properties file. Here is the brs-default.properties from version 2.3.0 for reference. brs-default.properties ############################################################ # Do not modify this file. Instead, create a file named # # 'brs.properties' in the conf directory and make your # # changes there. # # These will overwrite the values defined here! # ############################################################ # # Integer parameters can be # decimal 123 # binary 0b100101 # hexadecimal 0xAF1D # # Boolean parameters can be # 1, true, yes, on # 0, false, no, off # (case insensitive) # #### PEER 2 PEER NETWORKING #### # Announce my IP address/hostname to peers and allow them to share it with other peers. # If disabled, peer networking servlet will not be started at all. P2P.shareMyAddress = yes # My externally visible IP address or host name, to be announced to peers. # It can optionally include a port number, which will also be announced to peers, # and may be different from P2P.Port (useful if you do port forwarding behind a router). P2P.myAddress = # Host interface on which to listen for peer networking requests, default all. # Use 0.0.0.0 to listen on all IPv4 interfaces or :: to listen on all IPv4 and IPv6 interfaces P2P.Listen = 0.0.0.0 # Port for incoming peer to peer networking requests, if enabled. P2P.Port = 8123 # Use UPnP-Portforwarding P2P.UPnP = yes # My platform, to be announced to peers. P2P.myPlatform = PC # A list of peer addresses / host names, separated by '; ' used for faster P2P networking bootstrap. # TODO: document what is taken if not set P2P.BootstrapPeers = 87.92.185.249; 147.135.136.189; 52.191.135.100; 80.150.206.52; 62.75.188.216; 51.15.61.5; 13.65.148.45; 23.253.111.88; 51.255.115.70; 206.54.172.55; 192.210.215.146; 206.54.172.57; 5.39.93.90; 37.205.11.73; 192.99.47.76; [2a02:c7f:c420:fa00:a9bb:e842:ba7f:45a4]; 213.112.178.65; 216.8.195.30; 80.245.123.202; 45.32.114.77; 213.239.207.110; 213.93.182.184; 82.181.181.156; 91.121.159.44; 23.237.23.0; 66.49.220.192; 204.45.61.220; 213.59.149.181; 104.211.179.191; 195.230.182.182; 62.248.209.219; 91.211.191.15; 62.212.73.204; 73.119.30.169; 205.209.140.10; 128.171.156.20; 77.53.194.184; 141.52.39.244; 65.33.132.188; 114.55.91.167; 213.250.22.35; 5.9.50.158; 13.82.44.192; 31.208.216.74; 88.99.42.243; 37.48.93.28; 59.19.218.99; 77.82.90.167; 45.37.205.144; 108.34.167.31; 213.32.102.141; 121.183.132.236; 138.68.191.196; 88.99.166.52; 60.234.70.213; 60.234.58.107; 78.94.159.54; 77.176.235.157; 67.246.189.56; 162.208.50.165; 76.168.133.249; 13.94.237.58; 172.103.173.18; 5.189.132.15; 95.223.45.46; 193.150.67.2; 85.25.200.125; 78.47.51.95; 58.136.73.201; 73.226.253.176; 73.93.134.26; 78.240.13.44; 188.68.56.255; 173.199.70.198; 62.173.142.55; 211.202.125.123; 69.136.113.203; 50.4.239.215; 95.96.104.94; 39.106.117.124; 46.237.194.160; 51.15.80.207; 185.203.116.80; 80.241.221.231; 112.161.84.93; 171.244.32.69; 80.122.157.25; 13.72.109.3; 148.251.218.140; 5.189.148.161; 83.170.100.106; 77.177.170.123; 165.227.230.29; 136.144.169.239; 87.73.32.184; 192.237.253.169; 68.69.164.120; 12.16.33.103; 192.99.183.10; 176.31.105.109; 89.79.131.170; 144.76.36.175; 52.178.12.156; 34.232.70.152; 64.22.104.188; 98.223.118.234; 188.232.23.115; 115.87.103.110; 37.97.40.203; 87.155.221.164; 208.98.201.249; 79.165.206.126; 210.61.217.206; 99.52.191.229; 198.100.149.133; 52.233.193.5; 81.237.255.75; 5.251.99.80; 99.6.109.189; 103.242.135.223; 51.15.172.186; 52.187.61.67; 72.81.136.151; [2001:470:19:aa6:fd1a:a05c:5fb:ba97]; 59.110.224.129; 212.24.103.82; 104.128.234.137; 100.11.71.247; 164.106.37.6; 62.210.254.125; 46.223.93.167; 213.140.217.115; 75.136.58.249; 184.57.184.43; 183.156.110.69; 101.100.184.199; 207.246.70.79; 85.216.33.202; 144.76.71.172; 173.212.235.98; 213.133.86.146; 5.35.21.212; 115.70.71.98; 73.155.113.8; 85.217.171.59; 87.98.244.116; 77.66.66.251; 69.143.93.163; 81.6.54.180; 95.165.132.145; 87.184.83.94; 194.132.150.74; 218.38.28.183; 191.37.200.56; 104.175.172.17; 174.58.241.214; 61.171.177.215; 195.209.127.31; 66.227.173.37; 121.135.232.13; 221.154.37.46; 109.238.113.156; 83.170.94.221; 136.243.54.19; 183.106.157.197; 83.170.94.222; 204.12.255.242; 213.59.149.211; 46.129.42.93; 202.77.99.211; 104.53.200.42; 212.56.99.155; 82.135.154.9; 82.164.64.243; 94.254.35.253; 81.83.5.50; 89.106.1.126; 40.125.164.168; 173.249.18.113; 71.233.68.208; 14.36.1.151; 80.241.222.35; 163.172.161.152; 94.130.19.120; 31.209.54.26; 188.194.23.133; 85.195.246.182; 93.88.74.26; 112.78.10.43; 174.138.59.58; 112.167.81.44; 89.218.176.230; 82.247.98.128; 94.100.221.211; 75.70.223.231; 24.192.163.197; 185.203.117.157; 118.217.216.188; 95.31.73.67; 108.238.244.144; 185.223.30.43; 81.217.76.37; 77.225.52.149; 35.182.142.103; 52.166.126.96; 83.209.204.44; 92.206.55.19 # These peers will always be sent rebroadcast transactions. They are also automatically added to P2P.BootstrapPeers, so no need for duplicates. P2P.rebroadcastTo = 78.46.245.194; 94.130.190.156; 78.130.235.166; 176.9.47.157; 45.76.115.113; 108.61.180.135; 169.239.183.229 # Connect to this many bootstrap connection peers before using the peer database to get connected faster. Please be aware, that higher != better (3-5 are usually good values) Set to 0 or comment out to disable. P2P.NumBootstrapConnections = 4 # Known bad peers to be blacklisted P2P.BlacklistedPeers = # Maintain active connections with at least that many peers. Also more != better (you want good peers, not just many) P2P.MaxConnections = 20 # Use Peers Database? (Only if not in Offline mode) P2P.usePeersDb = yes # Save known peers in the PeersDB? (only if P2P.usePeersDB is true) P2P.savePeers = yes # Set to false to disable getting more peers from the currently connected peers. Only useful # when debugging and want to limit the peers to those in peersDb or P2P.BootstrapPeers. P2P.getMorePeers = yes # If database of peers exceed this value more peers will not be downloaded. # This value will never be below MaxConnections. To high value will slowdown connections. P2P.getMorePeersThreshold = 400 # Peer networking connect timeout for outgoing connections. P2P.TimeoutConnect_ms = 4000 # Peer networking read timeout for outgoing connections. P2P.TimeoutRead_ms = 8000 # Peer networking server idle timeout, milliseconds. P2P.TimeoutIdle_ms = 30000 # Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default). P2P.BlacklistingTime_ms = 600000 # Enable re-broadcasting of new transactions until they are received back from at least one # peer, or found in the blockchain. This feature can optionally be disabled, to avoid the # risk of revealing that this node is the submitter of such re-broadcasted new transactions. P2P.enableTxRebroadcast = yes # Transactions that aren't confirmed for this many blocks start getting rebroadcast. P2P.rebroadcastTxAfter = 5 # Transactions being rebroadcast get rebroadcast every this many blocks until they are confirmed. P2P.rebroadcastTxEvery = 2 # Consider a new transaction or block sent after 10 peers have received it. P2P.sendToLimit=10 # Max number of unconfirmed transactions that will be kept in cache. P2P.maxUnconfirmedTransactions = 8192 # JETTY pass-through options. See documentation at # https://www.eclipse.org/jetty/documentation/9.2.22.v20170531/dos-filter.html # P2P section: JETTY.P2P.DoSFilter = on JETTY.P2P.DoSFilter.maxRequestsPerSec = 30 JETTY.P2P.DoSFilter.delayMs = 500 JETTY.P2P.DoSFilter.maxRequestMs = 300000 JETTY.P2P.DoSFilter.throttleMs = 30000 JETTY.P2P.DoSFilter.maxIdleTrackerMs = 30000 JETTY.P2P.DoSFilter.maxWaitMs = 50 JETTY.P2P.DoSFilter.throttledRequests = 5 JETTY.P2P.DoSFilter.insertHeaders = true JETTY.P2P.DoSFilter.trackSessions = false JETTY.P2P.DoSFilter.remotePort = false JETTY.P2P.DoSFilter.ipWhitelist = \"\" JETTY.P2P.DoSFilter.managedAttr = true # see https://www.eclipse.org/jetty/documentation/9.2.22.v20170531/gzip-filter.html # deflate compression and others ommitted on purpose (pending update to GzipHandler anyway) JETTY.P2P.GZIPFilter = on JETTY.P2P.GZIPFilter.methods = \"GET, POST\" JETTY.P2P.GZIPFilter.bufferSize = 8192 JETTY.P2P.GZIPFilter.minGzipSize = 0 # Size of the download cache for blocks brs.blockCacheMB = 40 #### API SERVER #### # Accept http/json API requests. API.Server = on # JETTY pass-through options. See documentation at # https://www.eclipse.org/jetty/documentation/9.2.22.v20170531/dos-filter.html # API section: JETTY.API.DoSFilter = off JETTY.API.DoSFilter.maxRequestsPerSec = 30 JETTY.API.DoSFilter.delayMs = 500 JETTY.API.DoSFilter.maxRequestMs = 30000 JETTY.API.DoSFilter.throttleMs = 30000 JETTY.API.DoSFilter.maxIdleTrackerMs = 30000 JETTY.API.DoSFilter.maxWaitMs = 50 JETTY.API.DoSFilter.throttledRequests = 5 JETTY.API.DoSFilter.insertHeaders = true JETTY.API.DoSFilter.trackSessions = false JETTY.API.DoSFilter.remotePort = false JETTY.API.DoSFilter.ipWhitelist = \"\" JETTY.API.DoSFilter.managedAttr = true # Jetty-passthrough parameters for API responses GZIP compression. See JETTY.P2P.GZIPFilter JETTY.API.GZIPFilter = off JETTY.API.GZIPFilter.methods = \"GET, POST\" JETTY.API.GZIPFilter.bufferSize = 8192 JETTY.API.GZIPFilter.minGzipSize = 0 # Developers or maintenance only! Enable API requests used for # blockchain and database manipulation. If this is enabled and your # wallet is public, you are very vulnerable. API.Debug = off # Hosts or subnets from which to allow http/json API requests, if enabled. # List delimited by ';', IPv4/IPv6 possible, default: localhost API.allowed = 127.0.0.1; localhost; [0:0:0:0:0:0:0:1]; # Does the API accept additional/redundant parameters in an API call? # default is no (Wallet accepts only params specified for given call) # enable this if you have a sloppy client interacting, but please be aware that this # can be a security risk. API.AcceptSurplusParams = no; # Host interface on which to listen for http/json API request, default localhost only. # Set to 0.0.0.0 to allow the API server to accept requests from all network interfaces. API.Listen = 127.0.0.1 # Port for http/json API requests. API.Port = 8125 # Idle timeout for http/json API request connections, milliseconds. API.ServerIdleTimeout = 30000 # Directory with html and javascript files for the new client UI, and admin tools utilizing # the http/json API. API.UI_Dir = html/ui # Enable Cross Origin Filter for the API server. API.CrossOriginFilter = off # Enable SSL for the API server (also need to set API.SSL_keyStorePath and API.SSL_keyStorePassword). API.SSL = off # Enforce requests that require POST to only be accepted when submitted as POST. API.ServerEnforcePOST = yes # keystore file and password, required if uiSSL or apiSSL are enabled. API.SSL_keyStorePath = keystore API.SSL_keyStorePassword = password #### DATABASE #### # Database connection JDBC url # Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access. DB.Url=jdbc:mariadb://localhost:3306/burstwallet DB.Username= DB.Password= # Number of concurrent connections to the Database DB.Connections = 30 # Make H2 database defrag and compact when shutting down. # This is \"off\" by default as it can take 2 minutes # but you really want this to be on after you are aware of this option Db.H2.DefragOnShutdown = off # Enable trimming of derived objects tables. DB.trimDerivedTables = on # If trimming enabled, maintain enough previous height records to allow rollback of at least # that many blocks. Must be at least 1440 to allow normal fork resolution. After increasing # this value, a full re-scan needs to be done in order for previously trimmed records to be # re-created and preserved. DB.maxRollback = 1440 # Database default lock timeout in seconds. DB.LockTimeout = 60 ### GPU Acceleration # enable GPU acceleration GPU.Acceleration = off GPU.AutoDetect = on # If GPU auto-detection is off (GPU.AutoDetect = off), you must specify manually which one to use GPU.PlatformIdx = 0 GPU.DeviceIdx = 0 # GPU memory usage in percent and how many hashes to process in one batch GPU.MemPercent = 50 GPU.HashesPerBatch = 1000 # number of unverified transactions in cache before GPU verification starts. GPU.UnverifiedQueue = 1000 # Uncomment this to limit the number of cpu cores the wallet sees. Default is all available. # CPU.NumCores = 4 #### DEVELOPMENT #### # (mere mortals do not need to look beyond this point) # Set to \"yes\" to run offline - do not connect to peers and do not listen for incoming peer # connections. This is equivalent to setting brs.shareMyAddress = no, brs.wellKnownPeers = , # DEV.P2P.BootstrapPeers = and brs.usePeersDb = no, and if set to \"yes\" overrides those properties. DEV.Offline = no # Use testnet, leave set to false unless you are really testing. # Never unlock your real accounts on testnet! Use separate accounts for testing only. # When using testnet, all custom port settings will be ignored, # and hardcoded ports of 6874 (peer networking), 6875 (UI) and 6876 (API) will be used. DEV.TestNet = no # Database connection JDBC url to use with the test network, if DEV.TestNet DEV.DB.Url = DEV.DB.Username = DEV.DB.Password = # Time Acceleration in Offline/TestNet configurations (1 = normal time, 2 = twice as fast ...) DEV.TimeWarp = 1 # Peers used for testnet only. DEV.P2P.BootstrapPeers = # Testnet only. These peers will always be sent rebroadcast transactions. They are also automatically added to DEV.P2P.BootstrapPeers, so no need for duplicates. DEV.P2P.rebroadcastTo = # Force winning with every deadline DEV.mockMining = off # Enter a version. Upon exit, print a list of peers having this version. DEV.dumpPeersVersion = # Force re-validation of blocks and transaction at start. DEV.forceValidate = off # Force re-build of derived objects tables at start. DEV.forceScan = off # Debugging (part of Development - isn't it) # Used for debugging peer to peer communications. brs.communicationLoggingMask = 0 # Track balances of the following accounts and related events for debugging purposes. brs.debugTraceAccounts= # File name for logging tracked account balances. brs.debugTraceLog = LOG_AccountBalances_trace.csv # Separator character for trace log. (default '\\t' - TAB) brs.debugTraceSeparator = # Quote character for trace log. (default \" - double quote) brs.debugTraceQuote = # Log changes to unconfirmed balances. brs.debugLogUnconfirmed = false","title":"BRS Configuration File"},{"location":"en/brs-default-properties-configuration-file/#introduction","text":"The file conf/brs-default.properties is very well self-documented via comments within the file. Note, however, that the proper way to introduce changes is to leave this file AS-IS with its defaults and instead create the file conf/brs.properties . Put the entries with desired non-default settings in the new file. When BRS runs, it reads both files and settings from brs.properties will override settings from the brs-default.properties file. Here is the brs-default.properties from version 2.3.0 for reference.","title":"Introduction"},{"location":"en/brs-default-properties-configuration-file/#brs-defaultproperties","text":"############################################################ # Do not modify this file. Instead, create a file named # # 'brs.properties' in the conf directory and make your # # changes there. # # These will overwrite the values defined here! # ############################################################ # # Integer parameters can be # decimal 123 # binary 0b100101 # hexadecimal 0xAF1D # # Boolean parameters can be # 1, true, yes, on # 0, false, no, off # (case insensitive) # #### PEER 2 PEER NETWORKING #### # Announce my IP address/hostname to peers and allow them to share it with other peers. # If disabled, peer networking servlet will not be started at all. P2P.shareMyAddress = yes # My externally visible IP address or host name, to be announced to peers. # It can optionally include a port number, which will also be announced to peers, # and may be different from P2P.Port (useful if you do port forwarding behind a router). P2P.myAddress = # Host interface on which to listen for peer networking requests, default all. # Use 0.0.0.0 to listen on all IPv4 interfaces or :: to listen on all IPv4 and IPv6 interfaces P2P.Listen = 0.0.0.0 # Port for incoming peer to peer networking requests, if enabled. P2P.Port = 8123 # Use UPnP-Portforwarding P2P.UPnP = yes # My platform, to be announced to peers. P2P.myPlatform = PC # A list of peer addresses / host names, separated by '; ' used for faster P2P networking bootstrap. # TODO: document what is taken if not set P2P.BootstrapPeers = 87.92.185.249; 147.135.136.189; 52.191.135.100; 80.150.206.52; 62.75.188.216; 51.15.61.5; 13.65.148.45; 23.253.111.88; 51.255.115.70; 206.54.172.55; 192.210.215.146; 206.54.172.57; 5.39.93.90; 37.205.11.73; 192.99.47.76; [2a02:c7f:c420:fa00:a9bb:e842:ba7f:45a4]; 213.112.178.65; 216.8.195.30; 80.245.123.202; 45.32.114.77; 213.239.207.110; 213.93.182.184; 82.181.181.156; 91.121.159.44; 23.237.23.0; 66.49.220.192; 204.45.61.220; 213.59.149.181; 104.211.179.191; 195.230.182.182; 62.248.209.219; 91.211.191.15; 62.212.73.204; 73.119.30.169; 205.209.140.10; 128.171.156.20; 77.53.194.184; 141.52.39.244; 65.33.132.188; 114.55.91.167; 213.250.22.35; 5.9.50.158; 13.82.44.192; 31.208.216.74; 88.99.42.243; 37.48.93.28; 59.19.218.99; 77.82.90.167; 45.37.205.144; 108.34.167.31; 213.32.102.141; 121.183.132.236; 138.68.191.196; 88.99.166.52; 60.234.70.213; 60.234.58.107; 78.94.159.54; 77.176.235.157; 67.246.189.56; 162.208.50.165; 76.168.133.249; 13.94.237.58; 172.103.173.18; 5.189.132.15; 95.223.45.46; 193.150.67.2; 85.25.200.125; 78.47.51.95; 58.136.73.201; 73.226.253.176; 73.93.134.26; 78.240.13.44; 188.68.56.255; 173.199.70.198; 62.173.142.55; 211.202.125.123; 69.136.113.203; 50.4.239.215; 95.96.104.94; 39.106.117.124; 46.237.194.160; 51.15.80.207; 185.203.116.80; 80.241.221.231; 112.161.84.93; 171.244.32.69; 80.122.157.25; 13.72.109.3; 148.251.218.140; 5.189.148.161; 83.170.100.106; 77.177.170.123; 165.227.230.29; 136.144.169.239; 87.73.32.184; 192.237.253.169; 68.69.164.120; 12.16.33.103; 192.99.183.10; 176.31.105.109; 89.79.131.170; 144.76.36.175; 52.178.12.156; 34.232.70.152; 64.22.104.188; 98.223.118.234; 188.232.23.115; 115.87.103.110; 37.97.40.203; 87.155.221.164; 208.98.201.249; 79.165.206.126; 210.61.217.206; 99.52.191.229; 198.100.149.133; 52.233.193.5; 81.237.255.75; 5.251.99.80; 99.6.109.189; 103.242.135.223; 51.15.172.186; 52.187.61.67; 72.81.136.151; [2001:470:19:aa6:fd1a:a05c:5fb:ba97]; 59.110.224.129; 212.24.103.82; 104.128.234.137; 100.11.71.247; 164.106.37.6; 62.210.254.125; 46.223.93.167; 213.140.217.115; 75.136.58.249; 184.57.184.43; 183.156.110.69; 101.100.184.199; 207.246.70.79; 85.216.33.202; 144.76.71.172; 173.212.235.98; 213.133.86.146; 5.35.21.212; 115.70.71.98; 73.155.113.8; 85.217.171.59; 87.98.244.116; 77.66.66.251; 69.143.93.163; 81.6.54.180; 95.165.132.145; 87.184.83.94; 194.132.150.74; 218.38.28.183; 191.37.200.56; 104.175.172.17; 174.58.241.214; 61.171.177.215; 195.209.127.31; 66.227.173.37; 121.135.232.13; 221.154.37.46; 109.238.113.156; 83.170.94.221; 136.243.54.19; 183.106.157.197; 83.170.94.222; 204.12.255.242; 213.59.149.211; 46.129.42.93; 202.77.99.211; 104.53.200.42; 212.56.99.155; 82.135.154.9; 82.164.64.243; 94.254.35.253; 81.83.5.50; 89.106.1.126; 40.125.164.168; 173.249.18.113; 71.233.68.208; 14.36.1.151; 80.241.222.35; 163.172.161.152; 94.130.19.120; 31.209.54.26; 188.194.23.133; 85.195.246.182; 93.88.74.26; 112.78.10.43; 174.138.59.58; 112.167.81.44; 89.218.176.230; 82.247.98.128; 94.100.221.211; 75.70.223.231; 24.192.163.197; 185.203.117.157; 118.217.216.188; 95.31.73.67; 108.238.244.144; 185.223.30.43; 81.217.76.37; 77.225.52.149; 35.182.142.103; 52.166.126.96; 83.209.204.44; 92.206.55.19 # These peers will always be sent rebroadcast transactions. They are also automatically added to P2P.BootstrapPeers, so no need for duplicates. P2P.rebroadcastTo = 78.46.245.194; 94.130.190.156; 78.130.235.166; 176.9.47.157; 45.76.115.113; 108.61.180.135; 169.239.183.229 # Connect to this many bootstrap connection peers before using the peer database to get connected faster. Please be aware, that higher != better (3-5 are usually good values) Set to 0 or comment out to disable. P2P.NumBootstrapConnections = 4 # Known bad peers to be blacklisted P2P.BlacklistedPeers = # Maintain active connections with at least that many peers. Also more != better (you want good peers, not just many) P2P.MaxConnections = 20 # Use Peers Database? (Only if not in Offline mode) P2P.usePeersDb = yes # Save known peers in the PeersDB? (only if P2P.usePeersDB is true) P2P.savePeers = yes # Set to false to disable getting more peers from the currently connected peers. Only useful # when debugging and want to limit the peers to those in peersDb or P2P.BootstrapPeers. P2P.getMorePeers = yes # If database of peers exceed this value more peers will not be downloaded. # This value will never be below MaxConnections. To high value will slowdown connections. P2P.getMorePeersThreshold = 400 # Peer networking connect timeout for outgoing connections. P2P.TimeoutConnect_ms = 4000 # Peer networking read timeout for outgoing connections. P2P.TimeoutRead_ms = 8000 # Peer networking server idle timeout, milliseconds. P2P.TimeoutIdle_ms = 30000 # Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default). P2P.BlacklistingTime_ms = 600000 # Enable re-broadcasting of new transactions until they are received back from at least one # peer, or found in the blockchain. This feature can optionally be disabled, to avoid the # risk of revealing that this node is the submitter of such re-broadcasted new transactions. P2P.enableTxRebroadcast = yes # Transactions that aren't confirmed for this many blocks start getting rebroadcast. P2P.rebroadcastTxAfter = 5 # Transactions being rebroadcast get rebroadcast every this many blocks until they are confirmed. P2P.rebroadcastTxEvery = 2 # Consider a new transaction or block sent after 10 peers have received it. P2P.sendToLimit=10 # Max number of unconfirmed transactions that will be kept in cache. P2P.maxUnconfirmedTransactions = 8192 # JETTY pass-through options. See documentation at # https://www.eclipse.org/jetty/documentation/9.2.22.v20170531/dos-filter.html # P2P section: JETTY.P2P.DoSFilter = on JETTY.P2P.DoSFilter.maxRequestsPerSec = 30 JETTY.P2P.DoSFilter.delayMs = 500 JETTY.P2P.DoSFilter.maxRequestMs = 300000 JETTY.P2P.DoSFilter.throttleMs = 30000 JETTY.P2P.DoSFilter.maxIdleTrackerMs = 30000 JETTY.P2P.DoSFilter.maxWaitMs = 50 JETTY.P2P.DoSFilter.throttledRequests = 5 JETTY.P2P.DoSFilter.insertHeaders = true JETTY.P2P.DoSFilter.trackSessions = false JETTY.P2P.DoSFilter.remotePort = false JETTY.P2P.DoSFilter.ipWhitelist = \"\" JETTY.P2P.DoSFilter.managedAttr = true # see https://www.eclipse.org/jetty/documentation/9.2.22.v20170531/gzip-filter.html # deflate compression and others ommitted on purpose (pending update to GzipHandler anyway) JETTY.P2P.GZIPFilter = on JETTY.P2P.GZIPFilter.methods = \"GET, POST\" JETTY.P2P.GZIPFilter.bufferSize = 8192 JETTY.P2P.GZIPFilter.minGzipSize = 0 # Size of the download cache for blocks brs.blockCacheMB = 40 #### API SERVER #### # Accept http/json API requests. API.Server = on # JETTY pass-through options. See documentation at # https://www.eclipse.org/jetty/documentation/9.2.22.v20170531/dos-filter.html # API section: JETTY.API.DoSFilter = off JETTY.API.DoSFilter.maxRequestsPerSec = 30 JETTY.API.DoSFilter.delayMs = 500 JETTY.API.DoSFilter.maxRequestMs = 30000 JETTY.API.DoSFilter.throttleMs = 30000 JETTY.API.DoSFilter.maxIdleTrackerMs = 30000 JETTY.API.DoSFilter.maxWaitMs = 50 JETTY.API.DoSFilter.throttledRequests = 5 JETTY.API.DoSFilter.insertHeaders = true JETTY.API.DoSFilter.trackSessions = false JETTY.API.DoSFilter.remotePort = false JETTY.API.DoSFilter.ipWhitelist = \"\" JETTY.API.DoSFilter.managedAttr = true # Jetty-passthrough parameters for API responses GZIP compression. See JETTY.P2P.GZIPFilter JETTY.API.GZIPFilter = off JETTY.API.GZIPFilter.methods = \"GET, POST\" JETTY.API.GZIPFilter.bufferSize = 8192 JETTY.API.GZIPFilter.minGzipSize = 0 # Developers or maintenance only! Enable API requests used for # blockchain and database manipulation. If this is enabled and your # wallet is public, you are very vulnerable. API.Debug = off # Hosts or subnets from which to allow http/json API requests, if enabled. # List delimited by ';', IPv4/IPv6 possible, default: localhost API.allowed = 127.0.0.1; localhost; [0:0:0:0:0:0:0:1]; # Does the API accept additional/redundant parameters in an API call? # default is no (Wallet accepts only params specified for given call) # enable this if you have a sloppy client interacting, but please be aware that this # can be a security risk. API.AcceptSurplusParams = no; # Host interface on which to listen for http/json API request, default localhost only. # Set to 0.0.0.0 to allow the API server to accept requests from all network interfaces. API.Listen = 127.0.0.1 # Port for http/json API requests. API.Port = 8125 # Idle timeout for http/json API request connections, milliseconds. API.ServerIdleTimeout = 30000 # Directory with html and javascript files for the new client UI, and admin tools utilizing # the http/json API. API.UI_Dir = html/ui # Enable Cross Origin Filter for the API server. API.CrossOriginFilter = off # Enable SSL for the API server (also need to set API.SSL_keyStorePath and API.SSL_keyStorePassword). API.SSL = off # Enforce requests that require POST to only be accepted when submitted as POST. API.ServerEnforcePOST = yes # keystore file and password, required if uiSSL or apiSSL are enabled. API.SSL_keyStorePath = keystore API.SSL_keyStorePassword = password #### DATABASE #### # Database connection JDBC url # Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access. DB.Url=jdbc:mariadb://localhost:3306/burstwallet DB.Username= DB.Password= # Number of concurrent connections to the Database DB.Connections = 30 # Make H2 database defrag and compact when shutting down. # This is \"off\" by default as it can take 2 minutes # but you really want this to be on after you are aware of this option Db.H2.DefragOnShutdown = off # Enable trimming of derived objects tables. DB.trimDerivedTables = on # If trimming enabled, maintain enough previous height records to allow rollback of at least # that many blocks. Must be at least 1440 to allow normal fork resolution. After increasing # this value, a full re-scan needs to be done in order for previously trimmed records to be # re-created and preserved. DB.maxRollback = 1440 # Database default lock timeout in seconds. DB.LockTimeout = 60 ### GPU Acceleration # enable GPU acceleration GPU.Acceleration = off GPU.AutoDetect = on # If GPU auto-detection is off (GPU.AutoDetect = off), you must specify manually which one to use GPU.PlatformIdx = 0 GPU.DeviceIdx = 0 # GPU memory usage in percent and how many hashes to process in one batch GPU.MemPercent = 50 GPU.HashesPerBatch = 1000 # number of unverified transactions in cache before GPU verification starts. GPU.UnverifiedQueue = 1000 # Uncomment this to limit the number of cpu cores the wallet sees. Default is all available. # CPU.NumCores = 4 #### DEVELOPMENT #### # (mere mortals do not need to look beyond this point) # Set to \"yes\" to run offline - do not connect to peers and do not listen for incoming peer # connections. This is equivalent to setting brs.shareMyAddress = no, brs.wellKnownPeers = , # DEV.P2P.BootstrapPeers = and brs.usePeersDb = no, and if set to \"yes\" overrides those properties. DEV.Offline = no # Use testnet, leave set to false unless you are really testing. # Never unlock your real accounts on testnet! Use separate accounts for testing only. # When using testnet, all custom port settings will be ignored, # and hardcoded ports of 6874 (peer networking), 6875 (UI) and 6876 (API) will be used. DEV.TestNet = no # Database connection JDBC url to use with the test network, if DEV.TestNet DEV.DB.Url = DEV.DB.Username = DEV.DB.Password = # Time Acceleration in Offline/TestNet configurations (1 = normal time, 2 = twice as fast ...) DEV.TimeWarp = 1 # Peers used for testnet only. DEV.P2P.BootstrapPeers = # Testnet only. These peers will always be sent rebroadcast transactions. They are also automatically added to DEV.P2P.BootstrapPeers, so no need for duplicates. DEV.P2P.rebroadcastTo = # Force winning with every deadline DEV.mockMining = off # Enter a version. Upon exit, print a list of peers having this version. DEV.dumpPeersVersion = # Force re-validation of blocks and transaction at start. DEV.forceValidate = off # Force re-build of derived objects tables at start. DEV.forceScan = off # Debugging (part of Development - isn't it) # Used for debugging peer to peer communications. brs.communicationLoggingMask = 0 # Track balances of the following accounts and related events for debugging purposes. brs.debugTraceAccounts= # File name for logging tracked account balances. brs.debugTraceLog = LOG_AccountBalances_trace.csv # Separator character for trace log. (default '\\t' - TAB) brs.debugTraceSeparator = # Quote character for trace log. (default \" - double quote) brs.debugTraceQuote = # Log changes to unconfirmed balances. brs.debugLogUnconfirmed = false","title":"brs-default.properties"},{"location":"en/brs-docker-installation/","text":"Introduction The Burst Reference Software can be run with Docker and Docker-Compose. Since Docker supports all major platforms, this can be an easy-to-setup alternative to a platform-dependent installation of the Burst Reference Software. Prerequisites Docker CE Docker Compose Database Currently, Docker images for BRS version 2.3.0 with MariaDB (recommended) or H2 Database are available at Docker Hub . You have to choose one of them, which is used to store the blockchain. Configuration Please note: From this point on, this article may need to be updated by someone more familiar with docker. MariaDB The following docker-compose.yml file can be used to run the BRS with MariaDB database in containers. version: '3' services: burstcoin: image: pocconsortium/burstcoin:2.2-mariadb restart: always depends_on: - mariadb ports: - 8123:8123 - 8125:8125 mariadb: image: mariadb:10 environment: - MYSQL_ROOT_PASSWORD=burst - MYSQL_DATABASE=burst command: mysqld --character_set_server=utf8mb4 volumes: - ./burst_db:/var/lib/mysql Save the file and run it. docker-compose up -d With the -d flag, both containers are started as background processes. A burst_db folder will be created in the directory of the docker-compose.yml file, if it was not created before. This folder is mounted to the MariaDB storage and holds the burst database containing the blockchain. The containers can be stopped and removed at any time via docker-compose down . With the next start, the burst_db folder will be mounted again and your previous blockchain status will be loaded. H2 Alternatively, H2 can be used as database to store the blockchain. H2 is an embedded database, therefore one does not have to run it in a separate container. Simply run the following command. docker run -p 8123:8123 -p 8125:8125 -v \u201c $(pwd) \u201d /burst_db:/etc/burstcoin/burst_db -d pocconsortium/burstcoin:2.2-h2 \u201c $(pwd) \u201d /burst_db is the path to the folder which is mounted to the H2 storage. If it does not exist a new burst_db folder is created in the current directory. Custom configuration In order to use a custom config - brs.properties file, you can simply mount a folder containing the brs-default.properties and the brs.properties to the /conf mount point. MariaDB version: '3' services: burstcoin: image: pocconsortium/burstcoin:2.2-mariadb restart: always depends_on: - mariadb ports: - 8123:8123 - 8125:8125 volumes: - ./conf:/etc/burstcoin/conf mariadb: image: mariadb:10 environment: - MYSQL_ROOT_PASSWORD=burst - MYSQL_DATABASE=burst command: mysqld --character_set_server=utf8mb4 volumes: - ./burst_db:/var/lib/mysql H2 docker run -p 8123:8123 -p 8125:8125 -v \u201c $(pwd) \u201d /burst_db:/etc/burstcoin/burst_db -v \u201c $(pwd) \u201d /conf:/etc/burstcoin/conf -d pocconsortium/burstcoin:2.2-h2","title":"BRS Docker Installation"},{"location":"en/brs-docker-installation/#introduction","text":"The Burst Reference Software can be run with Docker and Docker-Compose. Since Docker supports all major platforms, this can be an easy-to-setup alternative to a platform-dependent installation of the Burst Reference Software.","title":"Introduction"},{"location":"en/brs-docker-installation/#prerequisites","text":"Docker CE Docker Compose","title":"Prerequisites"},{"location":"en/brs-docker-installation/#database","text":"Currently, Docker images for BRS version 2.3.0 with MariaDB (recommended) or H2 Database are available at Docker Hub . You have to choose one of them, which is used to store the blockchain.","title":"Database"},{"location":"en/brs-docker-installation/#configuration","text":"Please note: From this point on, this article may need to be updated by someone more familiar with docker.","title":"Configuration"},{"location":"en/brs-docker-installation/#mariadb","text":"The following docker-compose.yml file can be used to run the BRS with MariaDB database in containers. version: '3' services: burstcoin: image: pocconsortium/burstcoin:2.2-mariadb restart: always depends_on: - mariadb ports: - 8123:8123 - 8125:8125 mariadb: image: mariadb:10 environment: - MYSQL_ROOT_PASSWORD=burst - MYSQL_DATABASE=burst command: mysqld --character_set_server=utf8mb4 volumes: - ./burst_db:/var/lib/mysql Save the file and run it. docker-compose up -d With the -d flag, both containers are started as background processes. A burst_db folder will be created in the directory of the docker-compose.yml file, if it was not created before. This folder is mounted to the MariaDB storage and holds the burst database containing the blockchain. The containers can be stopped and removed at any time via docker-compose down . With the next start, the burst_db folder will be mounted again and your previous blockchain status will be loaded.","title":"MariaDB"},{"location":"en/brs-docker-installation/#h2","text":"Alternatively, H2 can be used as database to store the blockchain. H2 is an embedded database, therefore one does not have to run it in a separate container. Simply run the following command. docker run -p 8123:8123 -p 8125:8125 -v \u201c $(pwd) \u201d /burst_db:/etc/burstcoin/burst_db -d pocconsortium/burstcoin:2.2-h2 \u201c $(pwd) \u201d /burst_db is the path to the folder which is mounted to the H2 storage. If it does not exist a new burst_db folder is created in the current directory.","title":"H2"},{"location":"en/brs-docker-installation/#custom-configuration","text":"In order to use a custom config - brs.properties file, you can simply mount a folder containing the brs-default.properties and the brs.properties to the /conf mount point. MariaDB version: '3' services: burstcoin: image: pocconsortium/burstcoin:2.2-mariadb restart: always depends_on: - mariadb ports: - 8123:8123 - 8125:8125 volumes: - ./conf:/etc/burstcoin/conf mariadb: image: mariadb:10 environment: - MYSQL_ROOT_PASSWORD=burst - MYSQL_DATABASE=burst command: mysqld --character_set_server=utf8mb4 volumes: - ./burst_db:/var/lib/mysql H2 docker run -p 8123:8123 -p 8125:8125 -v \u201c $(pwd) \u201d /burst_db:/etc/burstcoin/burst_db -v \u201c $(pwd) \u201d /conf:/etc/burstcoin/conf -d pocconsortium/burstcoin:2.2-h2","title":"Custom configuration"},{"location":"en/brs-linux-installation/","text":"Linux Install Video Debian 9 \u201cStretch\u201d installation The following steps are to install BRS Core Wallet on a fresh installation of Debian Linux version 9 \u201cStretch\u201d . Please be sure to check Git Repository for the latest release before proceeding. Note: Commands to be entered into the shell will be formatted in bold text, e.g.: date example command outputs will not be bold, e.g.: Wed 28 Nov 12:02:18 GMT 2018 Prerequisites Before you begin the installation, the following packages need to be installed: java 8 jdk curl dirmngr Make sure your installation is up to date apt update && apt upgrade Run the following command to install the above packages: apt install curl openjdk-8-jdk-headless dirmngr -y Configuring Java environment path Find the path to the jdk update-alternatives --config javac If only one version of Java is installed, this will give you a similar output to the following: There is only one alternative in link group javac (providing /usr/bin/javac): /usr/lib/jvm/java-8-openjdk-amd64/bin/javac Nothing to configure. Copy the path from the last output and edit the environment file: nano /etc/environment Add the following line to the file: JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/bin/javac\" (taken from the path above) To make the above change effective in your current shell, run the following: source /etc/environment Now test that the JAVA_HOME variable is part of PATH echo $JAVA_HOME This will output the path you entered into the environment file. Now confirm the version of java installed javac -version Installing MariaDB Add the MariaDB signing key apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 Grab the and run MariaDB setup script curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash Update your sources list: apt update Install MariaDB: apt install mariadb-server During installation you will be prompted to enter a password for the root user. Enter and remember this as we will need it later. Create a database( brs_master ), user ( brs_user ) and assign a password to the user by running the following command: echo \"CREATE DATABASE brs_master; CREATE USER 'brs_user'@'localhost' IDENTIFIED BY 'yourpassword'; GRANT ALL PRIVILEGES ON brs_master.* TO 'brs_user'@'localhost';\" | mysql -uroot -p mysql -uroot -p < init-mysql.sql This will prompt you for the password you entered for the root user when installing mariaDB Configuring the BRS Wallet Grab the BRSWallet zip from GitHub (always be sure to check link to the latest version. (2.4.2 was latest at time of writing) wget https://github.com/burst-apps-team/burstcoin/releases/download/v2.4.2/burstcoin-2.4.2.zip Create a directory to unzip to: mkdir BRSWallet Unzip the burstcoin zip file to the newly created directory: unzip burstcoin-2.4.2.zip -d BRSWallet/ Navigate to the conf subdirectory within the newly created directory: cd BRSWallet/conf Create a brs.properties file inside the conf folder: nano brs.properties Add the following lines: DB.Url=jdbc:mariadb://localhost:3306/brs_master DB.Username=brs_user DB.Password=yourpassword The burst.sh file is not yet executable. We need to change the permissions to make it so. Drop back to the BRSWallet directory cd`` ``.. and issue the following: chmod 750 burst.sh Now when we list the contents of the directory we can see that the burst.sh file has the correct permissions: ls -l total 1399340 -rw-r--r-- 1 root root 1409751247 Nov 5 12:29 brs.mariadb.zip -rw-r--r-- 1 root root 507 Nov 18 22:17 burst.cmd drwxr-xr-x 2 root root 4096 Nov 18 22:16 burst_db -rw-r--r-- 1 root root 23015701 Nov 18 22:17 burst.jar -rwxr-x--- 1 root root 17831 Nov 18 22:17 burst.sh -rw-r--r-- 1 root root 46 Nov 18 22:17 Burst_Wallet.url drwxr-xr-x 2 root root 4096 Nov 29 15:44 conf -rw-r--r-- 1 root root 29288 Nov 18 22:17 genscoop.cl drwxr-xr-x 3 root root 4096 Nov 18 22:17 html -rw-r--r-- 1 root root 23232 Nov 18 22:17 init-mysql.sql drwxr-xr-x 3 root root 4096 Nov 18 22:17 lib -rw-r--r-- 1 root root 35149 Nov 18 22:17 LICENSE.txt -rw-r--r-- 1 root root 4574 Nov 18 22:17 README.md Importing the database The quickest way to get up an running is to bootstrap the database by importing a relatively up to date dump of the database. Your wallet will synchronise from this point in time automatically. If you prefer to synchronise from scratch this will take much longer to complete. ./burst.sh import mariadb If you already have a/part of a brs_master database present, you will be asked if you want to remove the current database, download and import a new one. Answer y or n. Do you want to remove the current databases, download and import new one? y If you created the brs.properties file as per above you will be asked the following question: Detected a previous database config(conf/brs.properties). Do you want to use the config? Answer: y Answer the questions when prompted. If you are running the wallet locally on the same device that you have your terminal open to and you used the same database ( brs_master ) and username ( brs_user ) above when creating the database, you can simply press enter for the first three questions. For the fourth question, enter the password that you input when creating your database and user. ./burst.sh`` ``import`` ``mariadb Do you want to remove the current databases, download and import new one? y Detected a previous database config(conf/brs.properties). Do you want to use the config? y Could not find Database Password Please enter your connection details Host (localhost) : Database (brs_master): Username (brs_user) : Password empty : --2018-11-29 15:44:47-- https://download.cryptoguru.org/burst/wallet/brs.mariadb.zip Resolving download.cryptoguru.org (download.cryptoguru.org)... 195.201.117.34 Connecting to download.cryptoguru.org (download.cryptoguru.org)|195.201.117.34|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 1409751247 (1.3G) [application/zip] Saving to: \u2018brs.mariadb.zip\u2019 brs.mariadb.zip 100%[====================================================>] 1.31G 1.87MB/s in 12m 4s 2018-11-29 15:56:52 (1.86 MB/s) - \u2018brs.mariadb.zip\u2019 saved [1409751247/1409751247] Archive: brs.mariadb.zip inflating: brs.mariadb.sql [+] Import successful - please remove brs.mariadb.zip Remove the download DB dump zip file to reclaim space and avoid an outdated zip file in future if you require a DB bootstrap rm brs.mariadb.zip Running the Wallet We need to change owner from root to a normal user as all the files/directories are now owned by root (see below) total 1399340 -rw-r--r-- 1 root root 1409751247 Nov 5 12:29 brs.mariadb.zip -rw-r--r-- 1 root root 507 Nov 18 22:17 burst.cmd drwxr-xr-x 2 root root 4096 Nov 18 22:16 burst_db -rw-r--r-- 1 root root 23015701 Nov 18 22:17 burst.jar -rwxr-x--- 1 root root 17831 Nov 18 22:17 burst.sh -rw-r--r-- 1 root root 46 Nov 18 22:17 Burst_Wallet.url drwxr-xr-x 2 root root 4096 Nov 29 15:44 conf -rw-r--r-- 1 root root 29288 Nov 18 22:17 genscoop.cl drwxr-xr-x 3 root root 4096 Nov 18 22:17 html -rw-r--r-- 1 root root 23232 Nov 18 22:17 init-mysql.sql drwxr-xr-x 3 root root 4096 Nov 18 22:17 lib -rw-r--r-- 1 root root 35149 Nov 18 22:17 LICENSE.txt -rw-r--r-- 1 root root 4574 Nov 18 22:17 README.md Navigate to the BRSWallet parent directory cd .. Change ownership of all files and directores within the BRSWallet directory: chown -R burst:burst BRSWallet/ Now the ownership has ben changed to the user burst: total 1399344 -rw-r--r-- 1 burst burst 2506 Nov 29 16:59 brs.log -rw-r--r-- 1 burst burst 1409751247 Nov 5 12:29 brs.mariadb.zip -rw-r--r-- 1 burst burst 507 Nov 18 22:17 burst.cmd drwxr-xr-x 2 burst burst 4096 Nov 18 22:16 burst_db -rw-r--r-- 1 burst burst 23015701 Nov 18 22:17 burst.jar -rwxr-x--- 1 burst burst 17831 Nov 18 22:17 burst.sh -rw-r--r-- 1 burst burst 46 Nov 18 22:17 Burst_Wallet.url drwxr-xr-x 2 burst burst 4096 Nov 30 10:39 conf -rw-r--r-- 1 burst burst 29288 Nov 18 22:17 genscoop.cl drwxr-xr-x 3 burst burst 4096 Nov 18 22:17 html -rw-r--r-- 1 burst burst 23232 Nov 18 22:17 init-mysql.sql drwxr-xr-x 3 burst burst 4096 Nov 18 22:17 lib -rw-r--r-- 1 burst burst 35149 Nov 18 22:17 LICENSE.txt -rw-r--r-- 1 burst burst 4574 Nov 18 22:17 README.md At this stage you can reboot the machine to ensure that the environmental variables are applied to every user session going forward. Following the reboot, log in as the your normal user (burst in this case) and run the wallet: ./burst.sh You will see the following output: Nov 29, 2018 4:28:33 PM brs.Burst loadProperties INFO: Initializing Burst Reference Software (BRS) version 2.3.0 Nov 29, 2018 4:28:33 PM org.ehcache.core.EhcacheManager createCache INFO: Cache 'account' created in EhcacheManager. [INFO] 2018-11-29 16:28:33 brs.db.sql.Db - Using mariadb Backend [INFO] 2018-11-29 16:28:33 brs.db.mariadb.MariadbDbVersion - Database update may take a while if needed, current db version 177... Note: If closing the terminal or pressing Ctrl-c, the wallet will shutdown: [INFO] 2018-11-29 16:53:12 brs.Burst - Shutting down... Configure BRS to run as a service/daemon Closing the terminal or pressing Ctrl-c will result to a shutdown of the wallet. To avoid this, BRS should be run as a service. It is particularly helpful if you run BRS on a linux system using SSH. First, if systemd isn't installed on your system, run the following command: sudo apt install systemd Then, you will have to create a new service file for BRS: sudo nano /etc/systemd/system/brs.service Add the following configuration (replace description, Exec, WorkingDirectory and User according to your setup): [Unit] Description=BRS Wallet After=network.target Wants=network.target [Service] ExecStart=/usr/bin/java -cp /home/burst/burst.jar:/home/burst/conf brs.Burst WorkingDirectory=/home/burst/ User=brs-mariadb Restart=always RestartSec=90 [Install] WantedBy=multi-user.target After that, enable the service: sudo systemctl enable brs.service To start the service, type: systemctl start brs.service To get the status of the service: systemctl status brs.service","title":"BRS Linux Installation"},{"location":"en/brs-linux-installation/#linux-install-video","text":"","title":"Linux Install Video"},{"location":"en/brs-linux-installation/#debian-9-stretch-installation","text":"The following steps are to install BRS Core Wallet on a fresh installation of Debian Linux version 9 \u201cStretch\u201d . Please be sure to check Git Repository for the latest release before proceeding. Note: Commands to be entered into the shell will be formatted in bold text, e.g.: date example command outputs will not be bold, e.g.: Wed 28 Nov 12:02:18 GMT 2018","title":"Debian 9 \u201cStretch\u201d installation"},{"location":"en/brs-linux-installation/#prerequisites","text":"Before you begin the installation, the following packages need to be installed: java 8 jdk curl dirmngr Make sure your installation is up to date apt update && apt upgrade Run the following command to install the above packages: apt install curl openjdk-8-jdk-headless dirmngr -y","title":"Prerequisites"},{"location":"en/brs-linux-installation/#configuring-java-environment-path","text":"Find the path to the jdk update-alternatives --config javac If only one version of Java is installed, this will give you a similar output to the following: There is only one alternative in link group javac (providing /usr/bin/javac): /usr/lib/jvm/java-8-openjdk-amd64/bin/javac Nothing to configure. Copy the path from the last output and edit the environment file: nano /etc/environment Add the following line to the file: JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64/bin/javac\" (taken from the path above) To make the above change effective in your current shell, run the following: source /etc/environment Now test that the JAVA_HOME variable is part of PATH echo $JAVA_HOME This will output the path you entered into the environment file. Now confirm the version of java installed javac -version","title":"Configuring Java environment path"},{"location":"en/brs-linux-installation/#installing-mariadb","text":"Add the MariaDB signing key apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 Grab the and run MariaDB setup script curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash Update your sources list: apt update Install MariaDB: apt install mariadb-server During installation you will be prompted to enter a password for the root user. Enter and remember this as we will need it later. Create a database( brs_master ), user ( brs_user ) and assign a password to the user by running the following command: echo \"CREATE DATABASE brs_master; CREATE USER 'brs_user'@'localhost' IDENTIFIED BY 'yourpassword'; GRANT ALL PRIVILEGES ON brs_master.* TO 'brs_user'@'localhost';\" | mysql -uroot -p mysql -uroot -p < init-mysql.sql This will prompt you for the password you entered for the root user when installing mariaDB","title":"Installing MariaDB"},{"location":"en/brs-linux-installation/#configuring-the-brs-wallet","text":"Grab the BRSWallet zip from GitHub (always be sure to check link to the latest version. (2.4.2 was latest at time of writing) wget https://github.com/burst-apps-team/burstcoin/releases/download/v2.4.2/burstcoin-2.4.2.zip Create a directory to unzip to: mkdir BRSWallet Unzip the burstcoin zip file to the newly created directory: unzip burstcoin-2.4.2.zip -d BRSWallet/ Navigate to the conf subdirectory within the newly created directory: cd BRSWallet/conf Create a brs.properties file inside the conf folder: nano brs.properties Add the following lines: DB.Url=jdbc:mariadb://localhost:3306/brs_master DB.Username=brs_user DB.Password=yourpassword The burst.sh file is not yet executable. We need to change the permissions to make it so. Drop back to the BRSWallet directory cd`` ``.. and issue the following: chmod 750 burst.sh Now when we list the contents of the directory we can see that the burst.sh file has the correct permissions: ls -l total 1399340 -rw-r--r-- 1 root root 1409751247 Nov 5 12:29 brs.mariadb.zip -rw-r--r-- 1 root root 507 Nov 18 22:17 burst.cmd drwxr-xr-x 2 root root 4096 Nov 18 22:16 burst_db -rw-r--r-- 1 root root 23015701 Nov 18 22:17 burst.jar -rwxr-x--- 1 root root 17831 Nov 18 22:17 burst.sh -rw-r--r-- 1 root root 46 Nov 18 22:17 Burst_Wallet.url drwxr-xr-x 2 root root 4096 Nov 29 15:44 conf -rw-r--r-- 1 root root 29288 Nov 18 22:17 genscoop.cl drwxr-xr-x 3 root root 4096 Nov 18 22:17 html -rw-r--r-- 1 root root 23232 Nov 18 22:17 init-mysql.sql drwxr-xr-x 3 root root 4096 Nov 18 22:17 lib -rw-r--r-- 1 root root 35149 Nov 18 22:17 LICENSE.txt -rw-r--r-- 1 root root 4574 Nov 18 22:17 README.md","title":"Configuring the BRS Wallet"},{"location":"en/brs-linux-installation/#importing-the-database","text":"The quickest way to get up an running is to bootstrap the database by importing a relatively up to date dump of the database. Your wallet will synchronise from this point in time automatically. If you prefer to synchronise from scratch this will take much longer to complete. ./burst.sh import mariadb If you already have a/part of a brs_master database present, you will be asked if you want to remove the current database, download and import a new one. Answer y or n. Do you want to remove the current databases, download and import new one? y If you created the brs.properties file as per above you will be asked the following question: Detected a previous database config(conf/brs.properties). Do you want to use the config? Answer: y Answer the questions when prompted. If you are running the wallet locally on the same device that you have your terminal open to and you used the same database ( brs_master ) and username ( brs_user ) above when creating the database, you can simply press enter for the first three questions. For the fourth question, enter the password that you input when creating your database and user. ./burst.sh`` ``import`` ``mariadb Do you want to remove the current databases, download and import new one? y Detected a previous database config(conf/brs.properties). Do you want to use the config? y Could not find Database Password Please enter your connection details Host (localhost) : Database (brs_master): Username (brs_user) : Password empty : --2018-11-29 15:44:47-- https://download.cryptoguru.org/burst/wallet/brs.mariadb.zip Resolving download.cryptoguru.org (download.cryptoguru.org)... 195.201.117.34 Connecting to download.cryptoguru.org (download.cryptoguru.org)|195.201.117.34|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 1409751247 (1.3G) [application/zip] Saving to: \u2018brs.mariadb.zip\u2019 brs.mariadb.zip 100%[====================================================>] 1.31G 1.87MB/s in 12m 4s 2018-11-29 15:56:52 (1.86 MB/s) - \u2018brs.mariadb.zip\u2019 saved [1409751247/1409751247] Archive: brs.mariadb.zip inflating: brs.mariadb.sql [+] Import successful - please remove brs.mariadb.zip Remove the download DB dump zip file to reclaim space and avoid an outdated zip file in future if you require a DB bootstrap rm brs.mariadb.zip","title":"Importing the database"},{"location":"en/brs-linux-installation/#running-the-wallet","text":"We need to change owner from root to a normal user as all the files/directories are now owned by root (see below) total 1399340 -rw-r--r-- 1 root root 1409751247 Nov 5 12:29 brs.mariadb.zip -rw-r--r-- 1 root root 507 Nov 18 22:17 burst.cmd drwxr-xr-x 2 root root 4096 Nov 18 22:16 burst_db -rw-r--r-- 1 root root 23015701 Nov 18 22:17 burst.jar -rwxr-x--- 1 root root 17831 Nov 18 22:17 burst.sh -rw-r--r-- 1 root root 46 Nov 18 22:17 Burst_Wallet.url drwxr-xr-x 2 root root 4096 Nov 29 15:44 conf -rw-r--r-- 1 root root 29288 Nov 18 22:17 genscoop.cl drwxr-xr-x 3 root root 4096 Nov 18 22:17 html -rw-r--r-- 1 root root 23232 Nov 18 22:17 init-mysql.sql drwxr-xr-x 3 root root 4096 Nov 18 22:17 lib -rw-r--r-- 1 root root 35149 Nov 18 22:17 LICENSE.txt -rw-r--r-- 1 root root 4574 Nov 18 22:17 README.md Navigate to the BRSWallet parent directory cd .. Change ownership of all files and directores within the BRSWallet directory: chown -R burst:burst BRSWallet/ Now the ownership has ben changed to the user burst: total 1399344 -rw-r--r-- 1 burst burst 2506 Nov 29 16:59 brs.log -rw-r--r-- 1 burst burst 1409751247 Nov 5 12:29 brs.mariadb.zip -rw-r--r-- 1 burst burst 507 Nov 18 22:17 burst.cmd drwxr-xr-x 2 burst burst 4096 Nov 18 22:16 burst_db -rw-r--r-- 1 burst burst 23015701 Nov 18 22:17 burst.jar -rwxr-x--- 1 burst burst 17831 Nov 18 22:17 burst.sh -rw-r--r-- 1 burst burst 46 Nov 18 22:17 Burst_Wallet.url drwxr-xr-x 2 burst burst 4096 Nov 30 10:39 conf -rw-r--r-- 1 burst burst 29288 Nov 18 22:17 genscoop.cl drwxr-xr-x 3 burst burst 4096 Nov 18 22:17 html -rw-r--r-- 1 burst burst 23232 Nov 18 22:17 init-mysql.sql drwxr-xr-x 3 burst burst 4096 Nov 18 22:17 lib -rw-r--r-- 1 burst burst 35149 Nov 18 22:17 LICENSE.txt -rw-r--r-- 1 burst burst 4574 Nov 18 22:17 README.md At this stage you can reboot the machine to ensure that the environmental variables are applied to every user session going forward. Following the reboot, log in as the your normal user (burst in this case) and run the wallet: ./burst.sh You will see the following output: Nov 29, 2018 4:28:33 PM brs.Burst loadProperties INFO: Initializing Burst Reference Software (BRS) version 2.3.0 Nov 29, 2018 4:28:33 PM org.ehcache.core.EhcacheManager createCache INFO: Cache 'account' created in EhcacheManager. [INFO] 2018-11-29 16:28:33 brs.db.sql.Db - Using mariadb Backend [INFO] 2018-11-29 16:28:33 brs.db.mariadb.MariadbDbVersion - Database update may take a while if needed, current db version 177... Note: If closing the terminal or pressing Ctrl-c, the wallet will shutdown: [INFO] 2018-11-29 16:53:12 brs.Burst - Shutting down...","title":"Running the Wallet"},{"location":"en/brs-linux-installation/#configure-brs-to-run-as-a-servicedaemon","text":"Closing the terminal or pressing Ctrl-c will result to a shutdown of the wallet. To avoid this, BRS should be run as a service. It is particularly helpful if you run BRS on a linux system using SSH. First, if systemd isn't installed on your system, run the following command: sudo apt install systemd Then, you will have to create a new service file for BRS: sudo nano /etc/systemd/system/brs.service Add the following configuration (replace description, Exec, WorkingDirectory and User according to your setup): [Unit] Description=BRS Wallet After=network.target Wants=network.target [Service] ExecStart=/usr/bin/java -cp /home/burst/burst.jar:/home/burst/conf brs.Burst WorkingDirectory=/home/burst/ User=brs-mariadb Restart=always RestartSec=90 [Install] WantedBy=multi-user.target After that, enable the service: sudo systemctl enable brs.service To start the service, type: systemctl start brs.service To get the status of the service: systemctl status brs.service","title":"Configure BRS to run as a service/daemon"},{"location":"en/brs-macos-installation/","text":"Installation of MacOS Burst Wallet This tutorial will walk you through the steps required to run a Burst wallet locally on MacOS. WARNING This article is out of date, and the script below does not install the latest version of BRS Wanted: Someone with macOS experience to install and update the steps below Quick Start Note: A simple bash script is available to complete all of the steps for you if you prefer using a script. Simply download a .zip of the code located here and follow the directions in the README file. If you prefer to execute each step without using a script, begin the process with the dependencies section. Dependencies There are a few dependencies that you should check on prior to starting the install process. OSX 10.10 or higher Sufficient disk space for the full blockchain (~8Gb or so) The ability to leave your computer up and running for several hours in order to allow the full blockchain to synchronize. Steps 1. Install Homebrew Homebrew (brew) is an excellent package manager for MacOS. To install, open a new terminal and run the following command. Note: You may be asked for your password in order to complete. $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" If you already have brew installed, it is a good practice to make sure everything is up to date by entering $ brew update 2. Install MariaDB MariaDB is an open-source fork of the MySQL relational database. It is used to store the blockchain and other wallet information. Install MariaDB by typing the following. $ brew install mariadb 3. Start MariaDB and create a user for the wallet $ brew services start mariadb Once MariaDB is running, log into MariaDB to create a new wallet database and add a user to manage it. Note: Your MariaDB server will likely not have a root password set. Consult google for instructions for setting a new root password. $ mysql -u root -p -h localhost Once you have successfully logged into MariaDB, execute the following SQL commands. CREATE DATABASE burstwallet; CREATE USER 'burstwallet'@'localhost' IDENTIFIED BY '<YOUR PASSWORD>'; GRANT ALL PRIVILEGES ON burstwallet.* TO 'burstwallet'@'localhost'; Assuming these commands have executed successfully, exit the MariaDB console by typing \\q and hitting Enter. 4. Install Java 8 SDK Brew gives you the latest version of all packages, but the latest version of Java may not work without issue. You can install the latest verified version (Java 8) by following these steps. Install brew cask. $ brew tap caskroom/cask Use brew cask to install a specific version of a package. $ brew cask install java8 5. Download and setup the wallet The wallet package from PoC Consortium is located here . Unzip the release (burstcoin-1.3.6.zip) and open the nxt.properties file from the conf directory in a text editor. Add the following lines to the end of the file nxt.dbUrl=jdbc:mariadb://localhost:3306/burstwallet nxt.dbUsername=burstwallet nxt.dbPassword=<YOUR PASSWORD> These values tell Java where to find the MariaDB database. 6. Start the wallet In your open terminal window verify that you are in the same directory as the burst.sh startup script. If you run ls in your terminal window you should see a response similar to the following: [1] In your terminal window, use the following command to make sure you have permission to execute the startup script. chmod +x burst.sh Launch the wallet script. Note: You will need to leave this terminal window running until the full blockchain has synchronized. This could take several hours or days depending on your processor speed and and internet connection. ./burst.sh You should see a lot of output flying by pretty quickly as the wallet starts up. 7. Creating your account and signing in. Assuming you see no obvious errors while the wallet is starting up, check to see if it is running successfully by entering http://localhost:8125/index.html in your browser. You should see a page that looks like this: [2] Click the New? Create Your Account! button. The wallet will generate a passphrase of 12 words. WRITE THESE WORDS DOWN AND DO NOT SHARE THEM . This passphrase is your private key and will be how you access your wallet and Burst funds. Please review the section on securing your Burst . Follow the confirmation step on the next page and click Next . You should now see the wallet dashboard. [3] If so, congratulations! You are up and running. 8. Wait for the blockchain to download Now that you have your wallet running locally and have created an account, you will need to wait for the blockchain to fully synchronize before you can see your up-to-date Burst balance. This may take a few hours or a few days depending on your processor and internet connection speed. Please note: Your Account Id is listed in the top left corner of your wallet. This address is necessary for sending and receiving Burst. 9. References How to run a full node on MacOS? Why Run a Full Node ? Running a full node is one of the most important ways to help support the Burst network. This allows other peers to connect to your wallet and synchronize the blockchain if they are not using an imported DB. When light clients are released, Full Nodes maintain a copy of the blockchain, in the decentralized manner that crypto currencies are designed to run, while light clients will not. Below are the steps for setting up a full node. Network Settings Once you have a local wallet installed and running you need to forward port 8123 to allow other peers to connect to your wallet. Now you will set the machine to have a static IP address. This is so that if the machine restarts, it will not change IP addresses and negate the port forwarding rule we will set up later. Steps on MacOS Firstly, if you have the latest BRS version, UPnP should be enabled and you already run a full node. Otherwise, following these steps : Open \u201cSystem Preferences\u201d Select \u201cNetwork\u201d Select \u201cAdvanced\u201d Select \u201cTCP/IP\u201d Note down your \u201cIPv4 Address\u201d Note down the \u201cRouter\u201d address, this is your default gateway. Leave \u201cConfigure IPv6\u201d set to \u201cAutomatic\u201d. Change \u201cConfigure IPv4\u201d to \u201cManual\u201d. Now in the \u201cIPv4 Address\u201d field, enter the IPv4 address you copied down before switching to manual. Make sure \u201cSubnet Mask\u201d is still 255.255.255.0 Make sure \u201cRouter\u201d still matches the router number you copied down before switching to manual. Click \u201cOk\u201d Click \u201cApply\u201d Close \u201cSystem Preferences\u201d Router Settings Now open your network router settings by entering your default gateway IP in the URL field of your browser. Login to your router. If you have never used these settings before, most ISPs have default username/password combinations. A quick google search will help you find it. If you do not remember your username/password combo, you will need to factory reset your router. Be mindful, this will force you to re-setup your entire network. Find the \u201cPort Forwarding\u201d option. Note, \u201cPort Forwarding\u201d and \u201cPort Triggering\u201d are NOT the same. \u201cPort Forwarding\u201d is generally under the \u201cAdvanced\u201d tab. Select \u201cAdd Service\u201d, \u201cAdd Rule\u201d, or anything along those lines. Set \u201cCommon Service\u201d as \u201cOther\u201d. Set service name to \u201cBurstcoin\u201d. Set \u201cService Type\u201d to \u201cTCP/UDP\u201d. Set IPv4 Address to your machines address which is the address you just made static. Disregard the IPv6 Address field. Set your \u201cStart Port\u201d and \u201cEnd Port\u201d to \u201c8123\u201d.> Save the new service. The local wallet must remain running for your full node to be accessible to the network. References https://medium.com/@aclaytonscott/burst-part-2-macos-wallet-setup-tutorial-2822bb029f54 https://www.reddit.com/r/burstcoin/comments/7lrdc1/guide_to_getting_the_poc_wallet_running_on_a_mac/","title":"BRS MacOS Installation"},{"location":"en/brs-macos-installation/#installation-of-macos-burst-wallet","text":"This tutorial will walk you through the steps required to run a Burst wallet locally on MacOS.","title":"Installation of MacOS Burst Wallet"},{"location":"en/brs-macos-installation/#warning","text":"This article is out of date, and the script below does not install the latest version of BRS Wanted: Someone with macOS experience to install and update the steps below","title":"WARNING"},{"location":"en/brs-macos-installation/#quick-start","text":"Note: A simple bash script is available to complete all of the steps for you if you prefer using a script. Simply download a .zip of the code located here and follow the directions in the README file. If you prefer to execute each step without using a script, begin the process with the dependencies section.","title":"Quick Start"},{"location":"en/brs-macos-installation/#dependencies","text":"There are a few dependencies that you should check on prior to starting the install process. OSX 10.10 or higher Sufficient disk space for the full blockchain (~8Gb or so) The ability to leave your computer up and running for several hours in order to allow the full blockchain to synchronize.","title":"Dependencies"},{"location":"en/brs-macos-installation/#steps","text":"","title":"Steps"},{"location":"en/brs-macos-installation/#1-install-homebrew","text":"Homebrew (brew) is an excellent package manager for MacOS. To install, open a new terminal and run the following command. Note: You may be asked for your password in order to complete. $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" If you already have brew installed, it is a good practice to make sure everything is up to date by entering $ brew update","title":"1. Install Homebrew"},{"location":"en/brs-macos-installation/#2-install-mariadb","text":"MariaDB is an open-source fork of the MySQL relational database. It is used to store the blockchain and other wallet information. Install MariaDB by typing the following. $ brew install mariadb","title":"2. Install MariaDB"},{"location":"en/brs-macos-installation/#3-start-mariadb-and-create-a-user-for-the-wallet","text":"$ brew services start mariadb Once MariaDB is running, log into MariaDB to create a new wallet database and add a user to manage it. Note: Your MariaDB server will likely not have a root password set. Consult google for instructions for setting a new root password. $ mysql -u root -p -h localhost Once you have successfully logged into MariaDB, execute the following SQL commands. CREATE DATABASE burstwallet; CREATE USER 'burstwallet'@'localhost' IDENTIFIED BY '<YOUR PASSWORD>'; GRANT ALL PRIVILEGES ON burstwallet.* TO 'burstwallet'@'localhost'; Assuming these commands have executed successfully, exit the MariaDB console by typing \\q and hitting Enter.","title":"3. Start MariaDB and create a user for the wallet"},{"location":"en/brs-macos-installation/#4-install-java-8-sdk","text":"Brew gives you the latest version of all packages, but the latest version of Java may not work without issue. You can install the latest verified version (Java 8) by following these steps. Install brew cask. $ brew tap caskroom/cask Use brew cask to install a specific version of a package. $ brew cask install java8","title":"4. Install Java 8 SDK"},{"location":"en/brs-macos-installation/#5-download-and-setup-the-wallet","text":"The wallet package from PoC Consortium is located here . Unzip the release (burstcoin-1.3.6.zip) and open the nxt.properties file from the conf directory in a text editor. Add the following lines to the end of the file nxt.dbUrl=jdbc:mariadb://localhost:3306/burstwallet nxt.dbUsername=burstwallet nxt.dbPassword=<YOUR PASSWORD> These values tell Java where to find the MariaDB database.","title":"5. Download and setup the wallet"},{"location":"en/brs-macos-installation/#6-start-the-wallet","text":"In your open terminal window verify that you are in the same directory as the burst.sh startup script. If you run ls in your terminal window you should see a response similar to the following: [1] In your terminal window, use the following command to make sure you have permission to execute the startup script. chmod +x burst.sh Launch the wallet script. Note: You will need to leave this terminal window running until the full blockchain has synchronized. This could take several hours or days depending on your processor speed and and internet connection. ./burst.sh You should see a lot of output flying by pretty quickly as the wallet starts up.","title":"6. Start the wallet"},{"location":"en/brs-macos-installation/#7-creating-your-account-and-signing-in","text":"Assuming you see no obvious errors while the wallet is starting up, check to see if it is running successfully by entering http://localhost:8125/index.html in your browser. You should see a page that looks like this: [2] Click the New? Create Your Account! button. The wallet will generate a passphrase of 12 words. WRITE THESE WORDS DOWN AND DO NOT SHARE THEM . This passphrase is your private key and will be how you access your wallet and Burst funds. Please review the section on securing your Burst . Follow the confirmation step on the next page and click Next . You should now see the wallet dashboard. [3] If so, congratulations! You are up and running.","title":"7. Creating your account and signing in."},{"location":"en/brs-macos-installation/#8-wait-for-the-blockchain-to-download","text":"Now that you have your wallet running locally and have created an account, you will need to wait for the blockchain to fully synchronize before you can see your up-to-date Burst balance. This may take a few hours or a few days depending on your processor and internet connection speed. Please note: Your Account Id is listed in the top left corner of your wallet. This address is necessary for sending and receiving Burst.","title":"8. Wait for the blockchain to download"},{"location":"en/brs-macos-installation/#9-references","text":"","title":"9. References"},{"location":"en/brs-macos-installation/#how-to-run-a-full-node-on-macos","text":"","title":"How to run a full node on MacOS?"},{"location":"en/brs-macos-installation/#why-run-a-full-node","text":"Running a full node is one of the most important ways to help support the Burst network. This allows other peers to connect to your wallet and synchronize the blockchain if they are not using an imported DB. When light clients are released, Full Nodes maintain a copy of the blockchain, in the decentralized manner that crypto currencies are designed to run, while light clients will not. Below are the steps for setting up a full node.","title":"Why Run a Full Node ?"},{"location":"en/brs-macos-installation/#network-settings","text":"Once you have a local wallet installed and running you need to forward port 8123 to allow other peers to connect to your wallet. Now you will set the machine to have a static IP address. This is so that if the machine restarts, it will not change IP addresses and negate the port forwarding rule we will set up later.","title":"Network Settings"},{"location":"en/brs-macos-installation/#steps-on-macos","text":"Firstly, if you have the latest BRS version, UPnP should be enabled and you already run a full node. Otherwise, following these steps : Open \u201cSystem Preferences\u201d Select \u201cNetwork\u201d Select \u201cAdvanced\u201d Select \u201cTCP/IP\u201d Note down your \u201cIPv4 Address\u201d Note down the \u201cRouter\u201d address, this is your default gateway. Leave \u201cConfigure IPv6\u201d set to \u201cAutomatic\u201d. Change \u201cConfigure IPv4\u201d to \u201cManual\u201d. Now in the \u201cIPv4 Address\u201d field, enter the IPv4 address you copied down before switching to manual. Make sure \u201cSubnet Mask\u201d is still 255.255.255.0 Make sure \u201cRouter\u201d still matches the router number you copied down before switching to manual. Click \u201cOk\u201d Click \u201cApply\u201d Close \u201cSystem Preferences\u201d","title":"Steps on MacOS"},{"location":"en/brs-macos-installation/#router-settings","text":"Now open your network router settings by entering your default gateway IP in the URL field of your browser. Login to your router. If you have never used these settings before, most ISPs have default username/password combinations. A quick google search will help you find it. If you do not remember your username/password combo, you will need to factory reset your router. Be mindful, this will force you to re-setup your entire network. Find the \u201cPort Forwarding\u201d option. Note, \u201cPort Forwarding\u201d and \u201cPort Triggering\u201d are NOT the same. \u201cPort Forwarding\u201d is generally under the \u201cAdvanced\u201d tab. Select \u201cAdd Service\u201d, \u201cAdd Rule\u201d, or anything along those lines. Set \u201cCommon Service\u201d as \u201cOther\u201d. Set service name to \u201cBurstcoin\u201d. Set \u201cService Type\u201d to \u201cTCP/UDP\u201d. Set IPv4 Address to your machines address which is the address you just made static. Disregard the IPv6 Address field. Set your \u201cStart Port\u201d and \u201cEnd Port\u201d to \u201c8123\u201d.> Save the new service. The local wallet must remain running for your full node to be accessible to the network.","title":"Router Settings"},{"location":"en/brs-macos-installation/#references","text":"https://medium.com/@aclaytonscott/burst-part-2-macos-wallet-setup-tutorial-2822bb029f54 https://www.reddit.com/r/burstcoin/comments/7lrdc1/guide_to_getting_the_poc_wallet_running_on_a_mac/","title":"References"},{"location":"en/brs-windows-installation/","text":"Introduction This guide is for installing the latest BRS Core wallet from https://www.burst-coin.org/download-wallet on Windows PCs. If you would like a simpler wallet installation... please download QBundle . Installation of BRS only (with MariaDB) Download the latest version of BRS (zip) and extract it to where ever you like. In the conf directory, copy brs-default.properties into a new file named brs.properties. Have the latest version of Java installed on your computer : https://www.java.com/en/download/ . Download and install MariaDB : https://downloads.mariadb.org/ . The MariaDb installation will ask to setup a password for the root user. Add this password to the brs.properties file created above in the following section: DB.Url=jdbc:mariadb://localhost:3306/ burstdatabase DB.Username= root DB.Password= YOUR_PASSWORD Setup MariaDB The MariaDB installation will also install HeidiSQL, a gui tool to administer MariaDb. Use it to connect to the newly created MariaDb server and create a new DB called 'burstwallet'. MariaDB knowledge base : https://mariadb.com/kb/en/library/documentation/ HeidiSQL documentation : https://www.heidisql.com/help.php You can also directly connect to mysql and create database trough console : mysql -u root -p Now we create the database burstwallet for the blockchain. CREATE DATABASE burstwallet; In addition, we create a user which is used by the wallet to access the database. Replace with a password of your choice. CREATE USER 'burstwallet'@'localhost' IDENTIFIED BY ' '; Finally we, grant this user all privileges for the database burstwallet . GRANT ALL PRIVILEGES ON burstwallet.* TO 'burstwallet'@'localhost'; Finally, now that the database is created and the brs.properties configured, you only have to run burst.cmd in the burstcoin folder. How to run a full node on Windows? Why Run a Full Node ? Running a full node is one of the most important ways to help support the Burst network. This allows other peers to connect to your wallet and synchronize the blockchain if they are not using an imported DB. When light clients are released, Full Nodes maintain a copy of the blockchain, in the decentralized manner that crypto currencies are designed to run, while light clients will not. Below are the steps for setting up a full node. Steps on Windows Firstly, if you have the latest BRS version, UPnP should be enabled and you already run a full node. Otherwise, following these steps : Once you have a local wallet installed and running you need to forward port 8123 to allow other peers to connect to your wallet. We now need to get some IP addresses. Open \u201cCommand Prompt\u201d. Type \u201cipconfig\u201d Find and record your \u201cDefault Gateway\u201d and \u201cIPv4 Address\u201d Now you will set the machine to have a static IP address. This is so that if the machine restarts, it will not change IP addresses and negate the port forwarding rule we will set up later. Open \u201cControl Panel\u201d. Open \u201cNetwork and Internet\u201d. Open \u201cNetwork and Charing Center\u201d. In the left menu, open \u201cChange Adapter Settings\u201d. Right click your preferred method of internet connection. Select \u201cProperties\u201d. Uncheck \u201cInternet Protocol Version 6 (TCP/IPv6)\u201d. Click \u201cInternet Protocol Version 4 (TCP/IPv4)\u201d. Open \u201cProperties\u201d Select \u201cUse the following IP address\u201d In \u201cIP address\u201d type the IPv4 number that you got in Command Prompt. In \u201cSubnet Mask\u201d type \u201c255.255.255.0\u201d. In \u201cDefault Gateway\u201d type the default gateway address you got in Command Prompt. Select \u201cUse the following DNS server addresses\u201d In \u201cPreferred DNS server\u201d type \u201c8.8.8.8\u201d In \u201cAlternate DNS server\u201d type \u201c8.8.4.4\u201d Check \u201cValidate settings upon exit\u201d Click \u201cOK\u201d If you receive a warning about \u201cMultiple default gateways...\u201d select \u201cYes\u201d. Click \u201cClose\u201d Now open your network router settings by entering your default gateway IP in the URL field of your browser. Login to your router. If you have never used these settings before, most ISPs have default username/password combinations. A quick google search will help you find it. If you do not remember your username/password combo, you will need to factory reset your router. Be mindful, this will force you to re-setup your entire network. Find the \u201cPort Forwarding\u201d option. Note, \u201cPort Forwarding\u201d and \u201cPort Triggering\u201d are NOT the same. \u201cPort Forwarding\u201d is generally under the \u201cAdvanced\u201d tab. Select \u201cAdd Service\u201d, \u201cAdd Rule\u201d, or anything along those lines. Set \u201cCommon Service\u201d as \u201cOther\u201d. Set service name to \u201cBurstcoin\u201d. Set \u201cService Type\u201d to \u201cTCP/UDP\u201d. Set IPv4 Address to your machines address which is the address you just made static. Disregard the IPv6 Address field. Set your \u201cStart Port\u201d and \u201cEnd Port\u201d to \u201c8123\u201d. Save the new service. Finally, you must reserve the IP address for your specific machine Navigate to \u201cConnected Devices\u201d (or something of the like). Find and click-on the machine you are running the node from. Select \u201cEdit\u201d Change configuration to \u201cReserved IP\u201d Verify the IP is the same one you set in port forwarding. Select Save. You are now finished and can close out network settings. The local wallet must remain running for your full node to be accessible to the network. After a few hours to a few days the network observer will update and you can check that your set up worked. First find your external IP address and then search your external IP address and port in the network observer (ex. 193.182.13.162:8123).","title":"BRS Windows Installation"},{"location":"en/brs-windows-installation/#introduction","text":"This guide is for installing the latest BRS Core wallet from https://www.burst-coin.org/download-wallet on Windows PCs. If you would like a simpler wallet installation... please download QBundle .","title":"Introduction"},{"location":"en/brs-windows-installation/#installation-of-brs-only-with-mariadb","text":"Download the latest version of BRS (zip) and extract it to where ever you like. In the conf directory, copy brs-default.properties into a new file named brs.properties. Have the latest version of Java installed on your computer : https://www.java.com/en/download/ . Download and install MariaDB : https://downloads.mariadb.org/ . The MariaDb installation will ask to setup a password for the root user. Add this password to the brs.properties file created above in the following section: DB.Url=jdbc:mariadb://localhost:3306/ burstdatabase DB.Username= root DB.Password= YOUR_PASSWORD","title":"Installation of BRS only (with MariaDB)"},{"location":"en/brs-windows-installation/#setup-mariadb","text":"The MariaDB installation will also install HeidiSQL, a gui tool to administer MariaDb. Use it to connect to the newly created MariaDb server and create a new DB called 'burstwallet'. MariaDB knowledge base : https://mariadb.com/kb/en/library/documentation/ HeidiSQL documentation : https://www.heidisql.com/help.php You can also directly connect to mysql and create database trough console : mysql -u root -p Now we create the database burstwallet for the blockchain. CREATE DATABASE burstwallet; In addition, we create a user which is used by the wallet to access the database. Replace with a password of your choice. CREATE USER 'burstwallet'@'localhost' IDENTIFIED BY ' '; Finally we, grant this user all privileges for the database burstwallet . GRANT ALL PRIVILEGES ON burstwallet.* TO 'burstwallet'@'localhost'; Finally, now that the database is created and the brs.properties configured, you only have to run burst.cmd in the burstcoin folder.","title":"Setup MariaDB"},{"location":"en/brs-windows-installation/#how-to-run-a-full-node-on-windows","text":"","title":"How to run a full node on Windows?"},{"location":"en/brs-windows-installation/#why-run-a-full-node","text":"Running a full node is one of the most important ways to help support the Burst network. This allows other peers to connect to your wallet and synchronize the blockchain if they are not using an imported DB. When light clients are released, Full Nodes maintain a copy of the blockchain, in the decentralized manner that crypto currencies are designed to run, while light clients will not. Below are the steps for setting up a full node.","title":"Why Run a Full Node ?"},{"location":"en/brs-windows-installation/#steps-on-windows","text":"Firstly, if you have the latest BRS version, UPnP should be enabled and you already run a full node. Otherwise, following these steps : Once you have a local wallet installed and running you need to forward port 8123 to allow other peers to connect to your wallet. We now need to get some IP addresses. Open \u201cCommand Prompt\u201d. Type \u201cipconfig\u201d Find and record your \u201cDefault Gateway\u201d and \u201cIPv4 Address\u201d Now you will set the machine to have a static IP address. This is so that if the machine restarts, it will not change IP addresses and negate the port forwarding rule we will set up later. Open \u201cControl Panel\u201d. Open \u201cNetwork and Internet\u201d. Open \u201cNetwork and Charing Center\u201d. In the left menu, open \u201cChange Adapter Settings\u201d. Right click your preferred method of internet connection. Select \u201cProperties\u201d. Uncheck \u201cInternet Protocol Version 6 (TCP/IPv6)\u201d. Click \u201cInternet Protocol Version 4 (TCP/IPv4)\u201d. Open \u201cProperties\u201d Select \u201cUse the following IP address\u201d In \u201cIP address\u201d type the IPv4 number that you got in Command Prompt. In \u201cSubnet Mask\u201d type \u201c255.255.255.0\u201d. In \u201cDefault Gateway\u201d type the default gateway address you got in Command Prompt. Select \u201cUse the following DNS server addresses\u201d In \u201cPreferred DNS server\u201d type \u201c8.8.8.8\u201d In \u201cAlternate DNS server\u201d type \u201c8.8.4.4\u201d Check \u201cValidate settings upon exit\u201d Click \u201cOK\u201d If you receive a warning about \u201cMultiple default gateways...\u201d select \u201cYes\u201d. Click \u201cClose\u201d Now open your network router settings by entering your default gateway IP in the URL field of your browser. Login to your router. If you have never used these settings before, most ISPs have default username/password combinations. A quick google search will help you find it. If you do not remember your username/password combo, you will need to factory reset your router. Be mindful, this will force you to re-setup your entire network. Find the \u201cPort Forwarding\u201d option. Note, \u201cPort Forwarding\u201d and \u201cPort Triggering\u201d are NOT the same. \u201cPort Forwarding\u201d is generally under the \u201cAdvanced\u201d tab. Select \u201cAdd Service\u201d, \u201cAdd Rule\u201d, or anything along those lines. Set \u201cCommon Service\u201d as \u201cOther\u201d. Set service name to \u201cBurstcoin\u201d. Set \u201cService Type\u201d to \u201cTCP/UDP\u201d. Set IPv4 Address to your machines address which is the address you just made static. Disregard the IPv6 Address field. Set your \u201cStart Port\u201d and \u201cEnd Port\u201d to \u201c8123\u201d. Save the new service. Finally, you must reserve the IP address for your specific machine Navigate to \u201cConnected Devices\u201d (or something of the like). Find and click-on the machine you are running the node from. Select \u201cEdit\u201d Change configuration to \u201cReserved IP\u201d Verify the IP is the same one you set in port forwarding. Select Save. You are now finished and can close out network settings. The local wallet must remain running for your full node to be accessible to the network. After a few hours to a few days the network observer will update and you can check that your set up worked. First find your external IP address and then search your external IP address and port in the network observer (ex. 193.182.13.162:8123).","title":"Steps on Windows"},{"location":"en/burst-blockchain/","text":"Introduction The Burst Blockchain is the digital ledger in which transactions (including AT, Escrow, Messages, etc) made in Burstcoin are recorded chronologically and publicly. All these informations are stored on the Blockchain, in a H2 or MariaDB database. Database Fields All the blockchain is stored on these tables : 1. Block Table These 19 fields define a block on the blockchain in the current version of the Burst software. Field Name Data Type NOT NULL db_id BIGINT(20) yes id BIGINT(20) yes version INTEGER(11) yes timestamp INTEGER(11) yes previous_block_id BIGINT(20) no total_amount BIGINT(20) yes total_fee BIGINT(20) yes payload_length INTEGER(11) yes generator_public_key VARBINARY(32) yes previous_block_hash VARBINARY(32) no cumulative_difficulty BLOB yes base_target BIGINT(20) yes next_block_id BIGINT(20) no height INTEGER(11) yes generation_signature VARBINARY(64) yes block_signature VARBINARY(64) yes payload_hash VARBINARY(32) yes nonce BIGINT(20) yes ats BLOB ? Note: the block table has evolved since the genesis block. Note: most fields cannot be NULL. The exceptions are the previous_... and next_... fields which link the blocks into a chain both forward and backward. The genesis block has a NULL previous_block_id and the last (current) block has a NULL next_block_id . Below the column list is a list of indexes. The indexes are all used for sorting various columns for fast retrieval, but the following columns are also restricted to have unique values: db_id , height , id , timestamp . They are all used to uniquely identify blocks. db_id is the autoincrement field of the table. It normally increases by one with each new block but gaps can occur in the sequence due to occasional deleted blocks. height is zero for the genesis block and increases by one with each block in the blockchain. There are no gaps in this sequence. id is a unique block id derived from the hash of some of the block fields. timestamp is the block creation time measured in number of seconds elapsed since the genesis block. Note: blocks stored in the BLOCK table are associated with transactions stored in the transaction table through the fields payload_length and payload_hash , and total_amount and total_fee . payload_length is the total number of bytes of certain fields of all transactions associated with the block and payload_hash is the hash of all those fields. total_amount and total_fee are the total amounts and fees of all transactions associated with the block. All four of these block fields are zero when there are no transactions associated with the block. 2. TRANSACTION Table These 25 fields define a transaction the current version of the Burst software. Note that the transaction table has evolved since the genesis block. Field Name Data Type NOT NULL db_id BIGINT(20) yes id BIGINT(20) yes deadline SMALLINT(6) yes sender_public_key VARBINARY(32) yes recipient_id BIGINT(20) no amount BIGINT(20) yes fee BIGINT(20) yes height INTEGER(11) yes block_id BIGINT(20) yes signature VARBINARY(64) yes timestamp INTEGER(11) yes type TINYINT(4) yes subtype TINYINT(4) yes sender_id BIGINT(20) yes block_timestamp INTEGER(11) yes full_hash VARBINARY(32) yes referenced_transaction_full_hash VARBINARY(32) no attachments_bytes BLOB no version TINYINT(4) yes has_message BOOLEAN(1) yes has_encrypted_message BOOLEAN(1) yes has_public_key_announcement BOOLEAN(1) yes ec_block_height INTEGER(11) no ec_block_id BIGINT(20) no has_encrypttoself_message BOOLEAN(1) yes Note: most fields cannot be NULL. The exceptions are recipient_id , referenced_transaction_full_hash , attachments_bytes and the ec_block_... fields. A transaction is valid without any of these fields specified. Below the column list is a list of indexes. The indexes are all used for sorting various columns for fast retrieval, but the following columns are also restricted to have unique values: db_id , id , full_hash . Note: transactions stored in the TRANSACTION table are associated with blocks stored in the BLOCK table through the fields height , block_id and block_timestamp . All other tables, with field names, and data types are listed in the image above.","title":"Burst Blockchain"},{"location":"en/burst-blockchain/#introduction","text":"The Burst Blockchain is the digital ledger in which transactions (including AT, Escrow, Messages, etc) made in Burstcoin are recorded chronologically and publicly. All these informations are stored on the Blockchain, in a H2 or MariaDB database.","title":"Introduction"},{"location":"en/burst-blockchain/#database-fields","text":"All the blockchain is stored on these tables :","title":"Database Fields"},{"location":"en/burst-blockchain/#1-block-table","text":"These 19 fields define a block on the blockchain in the current version of the Burst software. Field Name Data Type NOT NULL db_id BIGINT(20) yes id BIGINT(20) yes version INTEGER(11) yes timestamp INTEGER(11) yes previous_block_id BIGINT(20) no total_amount BIGINT(20) yes total_fee BIGINT(20) yes payload_length INTEGER(11) yes generator_public_key VARBINARY(32) yes previous_block_hash VARBINARY(32) no cumulative_difficulty BLOB yes base_target BIGINT(20) yes next_block_id BIGINT(20) no height INTEGER(11) yes generation_signature VARBINARY(64) yes block_signature VARBINARY(64) yes payload_hash VARBINARY(32) yes nonce BIGINT(20) yes ats BLOB ? Note: the block table has evolved since the genesis block. Note: most fields cannot be NULL. The exceptions are the previous_... and next_... fields which link the blocks into a chain both forward and backward. The genesis block has a NULL previous_block_id and the last (current) block has a NULL next_block_id . Below the column list is a list of indexes. The indexes are all used for sorting various columns for fast retrieval, but the following columns are also restricted to have unique values: db_id , height , id , timestamp . They are all used to uniquely identify blocks. db_id is the autoincrement field of the table. It normally increases by one with each new block but gaps can occur in the sequence due to occasional deleted blocks. height is zero for the genesis block and increases by one with each block in the blockchain. There are no gaps in this sequence. id is a unique block id derived from the hash of some of the block fields. timestamp is the block creation time measured in number of seconds elapsed since the genesis block. Note: blocks stored in the BLOCK table are associated with transactions stored in the transaction table through the fields payload_length and payload_hash , and total_amount and total_fee . payload_length is the total number of bytes of certain fields of all transactions associated with the block and payload_hash is the hash of all those fields. total_amount and total_fee are the total amounts and fees of all transactions associated with the block. All four of these block fields are zero when there are no transactions associated with the block.","title":"1. Block Table"},{"location":"en/burst-blockchain/#2-transaction-table","text":"These 25 fields define a transaction the current version of the Burst software. Note that the transaction table has evolved since the genesis block. Field Name Data Type NOT NULL db_id BIGINT(20) yes id BIGINT(20) yes deadline SMALLINT(6) yes sender_public_key VARBINARY(32) yes recipient_id BIGINT(20) no amount BIGINT(20) yes fee BIGINT(20) yes height INTEGER(11) yes block_id BIGINT(20) yes signature VARBINARY(64) yes timestamp INTEGER(11) yes type TINYINT(4) yes subtype TINYINT(4) yes sender_id BIGINT(20) yes block_timestamp INTEGER(11) yes full_hash VARBINARY(32) yes referenced_transaction_full_hash VARBINARY(32) no attachments_bytes BLOB no version TINYINT(4) yes has_message BOOLEAN(1) yes has_encrypted_message BOOLEAN(1) yes has_public_key_announcement BOOLEAN(1) yes ec_block_height INTEGER(11) no ec_block_id BIGINT(20) no has_encrypttoself_message BOOLEAN(1) yes Note: most fields cannot be NULL. The exceptions are recipient_id , referenced_transaction_full_hash , attachments_bytes and the ec_block_... fields. A transaction is valid without any of these fields specified. Below the column list is a list of indexes. The indexes are all used for sorting various columns for fast retrieval, but the following columns are also restricted to have unique values: db_id , id , full_hash . Note: transactions stored in the TRANSACTION table are associated with blocks stored in the BLOCK table through the fields height , block_id and block_timestamp . All other tables, with field names, and data types are listed in the image above.","title":"2. TRANSACTION Table"},{"location":"en/burst-reference-software/","text":"Introduction The Burst Reference Software (BRS) is the main Burst wallet. It allows connection to the Burst network. Installation Windows Installation MacOS Installation Linux Installation Docker Installation","title":"Burstcoin Reference Software"},{"location":"en/burst-reference-software/#introduction","text":"The Burst Reference Software (BRS) is the main Burst wallet. It allows connection to the Burst network.","title":"Introduction"},{"location":"en/burst-reference-software/#installation","text":"Windows Installation MacOS Installation Linux Installation Docker Installation","title":"Installation"},{"location":"en/burst-services/","text":"Introduction In addition to a plethora of Burst Software , the Burst ecosystem also offers a lot of services to use without - or very little - software installation of yours. Online Wallets Every BRS - the Burst Reference Software - has a builtin web server (based on Jetty ) to deliver it's front end content to the user. This can happen locally (when you have a local wallet installed either via Qbundle or standalone) and of course this also allows the wallet to be accessible from anywhere in the internet - if you made the API accessible on a public IP. As a user, you should always be aware of the security implications using an online wallet. Essentially you may be giving away your password to this wallet, so either use only 100% trusted public wallets, or use just a subset of their functionality - such as address watch only (when you enter the BURST-xxx address instead of a password) A few well known public wallets are: VoIPLanParty Burst-Team Online Wallets (operated by Haitch): 1 , 2 3 , 4 , 5 Burstforum: 1 , 2 , 3 Explorers Blockchain explorers provide insight into various events happening in the blockchain, such as transactions, block forging, assets overview and others. Some explorers have also an extensive charts section to provide even more visual feedback about blockchain activities, often putting them in historical context. The main Burst blockchain explorers are: BAT Explorer PoCC Explorer Burstcoin.RO Explorer BurstNeon Monitor Observers/Analyzers Some services provide deeper or different insight into activities within the Burst network, such as monitoring mining-related activity, alternate views on network consensus integrity etc. Notable services in this area are: BAT Pool Spy Burstcoin.CC by Luxe Tx Notification Service: Burst Alerts Pool uptime monitor Mortimer, the Burstcoin Butler On December, 6th 2018 the PoCC announced the renaming of the \u201cPoCC Bot\u201d to Mortimer as well its functionality. Originally started as a Tip bot, Mortimer will provide a lot of services within the Burst ecosystem: tip bot (Reddit, Twitter, Discord, Discourse forum software) pricing information (coinmarketcap API) supporting BURST and NXT (not all functionality), maybe others too mixing service exchange bank and others. See the dedicated page on Mortimer .","title":"Burst Services"},{"location":"en/burst-services/#introduction","text":"In addition to a plethora of Burst Software , the Burst ecosystem also offers a lot of services to use without - or very little - software installation of yours.","title":"Introduction"},{"location":"en/burst-services/#online-wallets","text":"Every BRS - the Burst Reference Software - has a builtin web server (based on Jetty ) to deliver it's front end content to the user. This can happen locally (when you have a local wallet installed either via Qbundle or standalone) and of course this also allows the wallet to be accessible from anywhere in the internet - if you made the API accessible on a public IP. As a user, you should always be aware of the security implications using an online wallet. Essentially you may be giving away your password to this wallet, so either use only 100% trusted public wallets, or use just a subset of their functionality - such as address watch only (when you enter the BURST-xxx address instead of a password) A few well known public wallets are: VoIPLanParty Burst-Team Online Wallets (operated by Haitch): 1 , 2 3 , 4 , 5 Burstforum: 1 , 2 , 3","title":"Online Wallets"},{"location":"en/burst-services/#explorers","text":"Blockchain explorers provide insight into various events happening in the blockchain, such as transactions, block forging, assets overview and others. Some explorers have also an extensive charts section to provide even more visual feedback about blockchain activities, often putting them in historical context. The main Burst blockchain explorers are: BAT Explorer PoCC Explorer Burstcoin.RO Explorer BurstNeon Monitor","title":"Explorers"},{"location":"en/burst-services/#observersanalyzers","text":"Some services provide deeper or different insight into activities within the Burst network, such as monitoring mining-related activity, alternate views on network consensus integrity etc. Notable services in this area are: BAT Pool Spy Burstcoin.CC by Luxe Tx Notification Service: Burst Alerts Pool uptime monitor","title":"Observers/Analyzers"},{"location":"en/burst-services/#mortimer-the-burstcoin-butler","text":"On December, 6th 2018 the PoCC announced the renaming of the \u201cPoCC Bot\u201d to Mortimer as well its functionality. Originally started as a Tip bot, Mortimer will provide a lot of services within the Burst ecosystem: tip bot (Reddit, Twitter, Discord, Discourse forum software) pricing information (coinmarketcap API) supporting BURST and NXT (not all functionality), maybe others too mixing service exchange bank and others. See the dedicated page on Mortimer .","title":"Mortimer, the Burstcoin Butler"},{"location":"en/burst-sodium-press-release/","text":"All Aboard the Burstcoin SODIUM Hard Fork Salt of the Earth, the pioneer of Proof of Capacity On May 10, 2020, version 2.5.0 of the Burst Reference Software (BRS) for the Burstcoin blockchain will be released. Active nodes running the new version will automatically participate in a hard fork of the Burst blockchain around the June 20, 2020, at blockheight 765,000 . Codenamed SODIUM , the hard fork will unlock new platform-wide features, better performance, and security improvements. To unleash more of Burstcoin\u2019s potential, the Burst Apps Team is seeking fast, network-wide adoption of this new release. Bursting into the next decade The SODIUM protocol modifications contain updated smart contracts , allowing for 50 times larger complexity, with lower fees. Combined with the BlockTalk Java Smart Contract compiler, these changes usher in the next chapter of trustless projects (DeFi, Non-Fungible Tokens, DEXs, Games, etc). Among further fixes and upgrades, the consensus protocol has been reinforced with stricter fee regulations, which ensures the consensus is fairly enforced for miners. Further, a new logarithmic time constant will determine when blocks are accepted on the blockchain. This gives everyone a more predictable timespan for transactions to be validated, and is much closer to the target 4 minutes per block . It improves security for both miners and users. In the second half of 2020, BRS 3.0 an open-source rewrite of the core software from Java to Kotlin will be released. It represents a faster and more energy efficient future for Burstcoin and includes the hard fork protocol changes comprising SODIUM . Phoenix, an open source cross-platform Burst Wallet UI will be included in BRS 3.0 as default web wallet. It provides multiple account management, improved security, and better interoperability between Burst applications, making it easy for developers to expand on the Burstcoin platform. SODIUM , BRS 2.5 and BRS 3.0 together represent over a year\u2019s worth of work for the Burst Apps Team. Through rigorous testing, reviews, and iterations, they have been preparing for this event for months, and are actively calling out to all Burstcoiners to update their nodes . To learn more about SODIUM visit burstwiki.org to see all details. The source and installers: https://github.com/burst-apps-team/burstcoin/releases Burstcoin Exchanges: https://burstwiki.org/en/exchanges/ The Burst Apps Team has been preparing the Burst blockchain since early 2019 for the next decade. Increasing speed, stability and functionality, a new software version combined with an upcoming hard fork will solidify Burstcoin once again as a next-generation cryptocurrency. The open-source Burstcoin blockchain was first developed in 2014 and has been at the forefront of blockchain technology with the first implementation of smart contracts. Burst is the pioneer of the \u201cProof of Capacity\u201d consensus algorithm, a green alternative to Proof of Work. keywords; burstcoin hardfork sodium proofofcapacity blockchain platform Contact Burst Apps Team; https://twitter.com/BurstAppsTeam/ https://github.com/burst-apps-team","title":"Burst sodium press release"},{"location":"en/burst-sodium-press-release/#all-aboard-the-burstcoin-sodium-hard-fork","text":"","title":"All Aboard the Burstcoin SODIUM Hard Fork"},{"location":"en/burst-sodium-press-release/#salt-of-the-earth-the-pioneer-of-proof-of-capacity","text":"On May 10, 2020, version 2.5.0 of the Burst Reference Software (BRS) for the Burstcoin blockchain will be released. Active nodes running the new version will automatically participate in a hard fork of the Burst blockchain around the June 20, 2020, at blockheight 765,000 . Codenamed SODIUM , the hard fork will unlock new platform-wide features, better performance, and security improvements. To unleash more of Burstcoin\u2019s potential, the Burst Apps Team is seeking fast, network-wide adoption of this new release.","title":"Salt of the Earth, the pioneer of Proof of Capacity"},{"location":"en/burst-sodium-press-release/#bursting-into-the-next-decade","text":"The SODIUM protocol modifications contain updated smart contracts , allowing for 50 times larger complexity, with lower fees. Combined with the BlockTalk Java Smart Contract compiler, these changes usher in the next chapter of trustless projects (DeFi, Non-Fungible Tokens, DEXs, Games, etc). Among further fixes and upgrades, the consensus protocol has been reinforced with stricter fee regulations, which ensures the consensus is fairly enforced for miners. Further, a new logarithmic time constant will determine when blocks are accepted on the blockchain. This gives everyone a more predictable timespan for transactions to be validated, and is much closer to the target 4 minutes per block . It improves security for both miners and users. In the second half of 2020, BRS 3.0 an open-source rewrite of the core software from Java to Kotlin will be released. It represents a faster and more energy efficient future for Burstcoin and includes the hard fork protocol changes comprising SODIUM . Phoenix, an open source cross-platform Burst Wallet UI will be included in BRS 3.0 as default web wallet. It provides multiple account management, improved security, and better interoperability between Burst applications, making it easy for developers to expand on the Burstcoin platform. SODIUM , BRS 2.5 and BRS 3.0 together represent over a year\u2019s worth of work for the Burst Apps Team. Through rigorous testing, reviews, and iterations, they have been preparing for this event for months, and are actively calling out to all Burstcoiners to update their nodes . To learn more about SODIUM visit burstwiki.org to see all details. The source and installers: https://github.com/burst-apps-team/burstcoin/releases Burstcoin Exchanges: https://burstwiki.org/en/exchanges/ The Burst Apps Team has been preparing the Burst blockchain since early 2019 for the next decade. Increasing speed, stability and functionality, a new software version combined with an upcoming hard fork will solidify Burstcoin once again as a next-generation cryptocurrency. The open-source Burstcoin blockchain was first developed in 2014 and has been at the forefront of blockchain technology with the first implementation of smart contracts. Burst is the pioneer of the \u201cProof of Capacity\u201d consensus algorithm, a green alternative to Proof of Work. keywords; burstcoin hardfork sodium proofofcapacity blockchain platform Contact Burst Apps Team; https://twitter.com/BurstAppsTeam/ https://github.com/burst-apps-team","title":"Bursting into the next decade"},{"location":"en/burst-sodium-technical-details/","text":"Burstcoin SODIUM Hard Fork: Technical Details Burstcoin is the *pioneer of the \u201cProof of Capacity\u201d consensus algorithm, a green alternative to Proof of Work. First developed in 2014, Burst has been at the forefront of blockchain technology with the first implementation of smart contracts. Since 2019, the Burst Apps Team has been preparing the Burst blockchain for the next decade. *Increasing speed, stability and functionality , a new software version combined with an upcoming hard fork will solidify Burst once again as a next-generation cryptocurrency. Summary On May 10, 2020, BRS 2.5 (Java) will be released. It is imperative that node operators upgrade to support the updated consensus protocol , SODIUM . Around June 20, 2020, the Burst blockchain will hard fork at block 765,000. Includes improvements CIP 20, 22, 23, 24 and 25. Second half of 2020, BRS 3.0 (a Kotlin rewrite) will be released. SODIUM Around the 20th of June 2020, active nodes running the Burst Apps Team\u2019s Burst Reference Software (BRS) will automatically participate in a fork of the Burst blockchain, codenamed SODIUM . SODIUM will be released in a dormant state in BRS 2.5.0 and activated on Block 765K, which will unlock new platform-wide features, better performance, and security improvements. The first release, BRS version 2.5.0, will be released the 10th of May , and will contain all of the protocol changes which will automatically activate around the 20th of June at blockheight 765K . In order to ensure a successful fork, it is imperative that node operators upgrade to BRS 2.5.0 as soon as possible . Protocol Changes The hard fork contains a set of modifications to the Burst protocol. While the API updates detailed in CIP 22 contains no breaking changes, these changes will expand the ability for miners and nodes to operate within the network. The advancements in CIP 20, 23, 24, and 25 represent breaking changes to the Burstcoin consensus protocol, which will result in a hard fork once enabled. To address easy community adoption, a plan has been developed which involves the release of two new versions of BRS. The CIP details are included at the end of this report. Our Approach: Two-Staged Release For the past year, a lot of work has been done to create a new BRS version 3.0, while also adding major features and improvements to version 2.5.0. To ensure stability of the network the HF will be performed on the original Java codebase. Followed by the release of BRS 3.0. BRS 3.0 is a practical rewrite of the underlying software. In a migration from Java to Kotlin, it represents the future. From a risk management perspective, tying its release to a hard fork would not be prudent, it is imperative to keep critical infrastructure stable. Stage 1: BRS 2.5 - Java Enter BRS 2.5.0, which is the existing Java 8 BRS codebase, plus the protocol changes comprising SODIUM . Including all fixes, CIP updates and hard fork protocol changes. BRS 2.5.0 has been thoroughly fork-tested on Testnet independently, and in conjunction with BRS 3.0, to simulate both normal and failover scenarios. Below a diagram illustrating the release plan: Community adoption of the new BRS version 2.5.0 is essential to *SODIUM *\u2019s success . To achieve timely consensus before the hard fork block height. So please spread the word! Stage 2: BRS 3.0 - Kotlin To be released in the second half of 2020, BRS 3.0, created by Harry1432, brings more major improvements to BRS in terms of architecture, performance, and user experience. Improved Architecture BRS has been rewritten in the Kotlin programming language to prepare it for the future, leaving the old Java 8 software behind. BRS 3.0 opens up new possibilities, and makes it easier to deploy on any platform and hardware architecture. Performance Improvements BRS 3.0 is much faster and more efficient than prior BRS versions. Running a BRS 3.0 node will be easier and more energy-efficient than ever before. BRS 3.0 represents years of hard work toward our vision of making Burstcoin even more green, while staying truly decentralised. UI Overhaul Phoenix, an open source cross-platform Burst Wallet UI, will be the default wallet UI in BRS 3.0. Phoenix provides multiple account management, improved security, and better interoperability. Phoenix makes it very easy to integrate Burstcoin in projects and webshops for quick and easy payments. For users who still want to use the legacy UI, a link will be provided to it, which will ship alongside Phoenix in BRS 3.0. Protocol Change Details Smart Contract Upgrade (CIP20) Author: jjos Smart contracts (Automated Transactions) have become an increasingly important feature for next generation financial technology. The Burstcoin blockchain now has the ability to run larger and more complex smart contracts with lower fees. Combined with the BlockTalk Java smart contract compiler, these changes bring the creation of new trustless projects (DeFi, Non-Fungible Tokens, DEXs, Games, etc), which were before unimaginable, within reach. Burst Deep Link Specification (CIP 22) Author: ohager This specification of deep linking within the Burst eco-system simplifies the interoperability between Burst applications. It permits that the feature-rich platform can be splitted in different specialized applications, i.e. asset exchange, simple wallet, messaging application, while maintaining an integrated user-experience. It is even possible to create \"meta-applications\", which serves as a container for those applications. Fee Slot Enforcement (CIP23) Author: CurbShifter In relation to CIP03, the slot-based transaction fee system allows for variable fees depending on the transaction load on the blockchain. As a secondary goal it prevents spamming blocks with lots of transactions with minimum fees. However the block validation did not strictly enforce these minimum fees used relative to the slot number. With CIP23 enabled, validating a block will check the fee amounts of all transactions to ensure these fees conform to the minimum. Otherwise the block will be deemed invalid. This change also implies the removal of fat forging blocks where all fees are disregarded. Which caused an unenforceable and unbalanced distribution of fees among the blocks and their miners. Blocktime Stabilization (CIP24) Author: jjos The deadline computation and block time control currently implemented on Burstcoin provides nearly perfect average block times of 4 minutes. However, as currently implemented, individual block times still show a broad variation with individual block times ranging typically from 10 up to 2000 seconds. With the CIP24 protocol upgrade, this can be much reduced, with block times ranging from 100 to 360 seconds. There is no change on the expected (average) value of 240 seconds (4 minutes) and mining software can be left unchanged. Subscription Fee Reduction (CIP25) Author: Harry1432 When the new fee model was introduced with CIP03, the execution costs of a subscription were not adjusted. The fees for subscriptions still remained at 1 burst per subscription payment. This change makes the fee for a subscription payment 0.00735 Burst. Conclusion BRS 2.5 and 3.0 together represent over a year\u2019s worth of work. Through rigorous testing, reviews, and iterations, the Burst Apps Team has been preparing for this event for months. They are proud of the results, and are excited to work with the community on the successful deployment of this and future hard forks. The SODIUM HF checklist for the Burst community is available at https://burstwiki.org If you have any questions, comments, or concerns, we encourage you to reach out to us via Discord: https://discord.gg/ag4qK83 Twitter: https://twitter.com/BurstAppsTeam Github: https://github.com/burst-apps-team","title":"Burst sodium technical details"},{"location":"en/burst-sodium-technical-details/#burstcoin-sodium-hard-fork-technical-details","text":"Burstcoin is the *pioneer of the \u201cProof of Capacity\u201d consensus algorithm, a green alternative to Proof of Work. First developed in 2014, Burst has been at the forefront of blockchain technology with the first implementation of smart contracts. Since 2019, the Burst Apps Team has been preparing the Burst blockchain for the next decade. *Increasing speed, stability and functionality , a new software version combined with an upcoming hard fork will solidify Burst once again as a next-generation cryptocurrency.","title":"Burstcoin SODIUM Hard Fork: Technical Details"},{"location":"en/burst-sodium-technical-details/#summary","text":"On May 10, 2020, BRS 2.5 (Java) will be released. It is imperative that node operators upgrade to support the updated consensus protocol , SODIUM . Around June 20, 2020, the Burst blockchain will hard fork at block 765,000. Includes improvements CIP 20, 22, 23, 24 and 25. Second half of 2020, BRS 3.0 (a Kotlin rewrite) will be released.","title":"Summary"},{"location":"en/burst-sodium-technical-details/#sodium","text":"Around the 20th of June 2020, active nodes running the Burst Apps Team\u2019s Burst Reference Software (BRS) will automatically participate in a fork of the Burst blockchain, codenamed SODIUM . SODIUM will be released in a dormant state in BRS 2.5.0 and activated on Block 765K, which will unlock new platform-wide features, better performance, and security improvements. The first release, BRS version 2.5.0, will be released the 10th of May , and will contain all of the protocol changes which will automatically activate around the 20th of June at blockheight 765K . In order to ensure a successful fork, it is imperative that node operators upgrade to BRS 2.5.0 as soon as possible .","title":"SODIUM"},{"location":"en/burst-sodium-technical-details/#protocol-changes","text":"The hard fork contains a set of modifications to the Burst protocol. While the API updates detailed in CIP 22 contains no breaking changes, these changes will expand the ability for miners and nodes to operate within the network. The advancements in CIP 20, 23, 24, and 25 represent breaking changes to the Burstcoin consensus protocol, which will result in a hard fork once enabled. To address easy community adoption, a plan has been developed which involves the release of two new versions of BRS. The CIP details are included at the end of this report.","title":"Protocol Changes"},{"location":"en/burst-sodium-technical-details/#our-approach-two-staged-release","text":"For the past year, a lot of work has been done to create a new BRS version 3.0, while also adding major features and improvements to version 2.5.0. To ensure stability of the network the HF will be performed on the original Java codebase. Followed by the release of BRS 3.0. BRS 3.0 is a practical rewrite of the underlying software. In a migration from Java to Kotlin, it represents the future. From a risk management perspective, tying its release to a hard fork would not be prudent, it is imperative to keep critical infrastructure stable.","title":"Our Approach: Two-Staged Release"},{"location":"en/burst-sodium-technical-details/#stage-1-brs-25-java","text":"Enter BRS 2.5.0, which is the existing Java 8 BRS codebase, plus the protocol changes comprising SODIUM . Including all fixes, CIP updates and hard fork protocol changes. BRS 2.5.0 has been thoroughly fork-tested on Testnet independently, and in conjunction with BRS 3.0, to simulate both normal and failover scenarios. Below a diagram illustrating the release plan: Community adoption of the new BRS version 2.5.0 is essential to *SODIUM *\u2019s success . To achieve timely consensus before the hard fork block height. So please spread the word!","title":"Stage 1: BRS 2.5 - Java"},{"location":"en/burst-sodium-technical-details/#stage-2-brs-30-kotlin","text":"To be released in the second half of 2020, BRS 3.0, created by Harry1432, brings more major improvements to BRS in terms of architecture, performance, and user experience.","title":"Stage 2: BRS 3.0 - Kotlin"},{"location":"en/burst-sodium-technical-details/#improved-architecture","text":"BRS has been rewritten in the Kotlin programming language to prepare it for the future, leaving the old Java 8 software behind. BRS 3.0 opens up new possibilities, and makes it easier to deploy on any platform and hardware architecture.","title":"Improved Architecture"},{"location":"en/burst-sodium-technical-details/#performance-improvements","text":"BRS 3.0 is much faster and more efficient than prior BRS versions. Running a BRS 3.0 node will be easier and more energy-efficient than ever before. BRS 3.0 represents years of hard work toward our vision of making Burstcoin even more green, while staying truly decentralised.","title":"Performance Improvements"},{"location":"en/burst-sodium-technical-details/#ui-overhaul","text":"Phoenix, an open source cross-platform Burst Wallet UI, will be the default wallet UI in BRS 3.0. Phoenix provides multiple account management, improved security, and better interoperability. Phoenix makes it very easy to integrate Burstcoin in projects and webshops for quick and easy payments. For users who still want to use the legacy UI, a link will be provided to it, which will ship alongside Phoenix in BRS 3.0.","title":"UI Overhaul"},{"location":"en/burst-sodium-technical-details/#protocol-change-details","text":"","title":"Protocol Change Details"},{"location":"en/burst-sodium-technical-details/#smart-contract-upgrade-cip20","text":"Author: jjos Smart contracts (Automated Transactions) have become an increasingly important feature for next generation financial technology. The Burstcoin blockchain now has the ability to run larger and more complex smart contracts with lower fees. Combined with the BlockTalk Java smart contract compiler, these changes bring the creation of new trustless projects (DeFi, Non-Fungible Tokens, DEXs, Games, etc), which were before unimaginable, within reach.","title":"Smart Contract Upgrade (CIP20)"},{"location":"en/burst-sodium-technical-details/#burst-deep-link-specification-cip-22","text":"Author: ohager This specification of deep linking within the Burst eco-system simplifies the interoperability between Burst applications. It permits that the feature-rich platform can be splitted in different specialized applications, i.e. asset exchange, simple wallet, messaging application, while maintaining an integrated user-experience. It is even possible to create \"meta-applications\", which serves as a container for those applications.","title":"Burst Deep Link Specification (CIP 22)"},{"location":"en/burst-sodium-technical-details/#fee-slot-enforcement-cip23","text":"Author: CurbShifter In relation to CIP03, the slot-based transaction fee system allows for variable fees depending on the transaction load on the blockchain. As a secondary goal it prevents spamming blocks with lots of transactions with minimum fees. However the block validation did not strictly enforce these minimum fees used relative to the slot number. With CIP23 enabled, validating a block will check the fee amounts of all transactions to ensure these fees conform to the minimum. Otherwise the block will be deemed invalid. This change also implies the removal of fat forging blocks where all fees are disregarded. Which caused an unenforceable and unbalanced distribution of fees among the blocks and their miners.","title":"Fee Slot Enforcement (CIP23)"},{"location":"en/burst-sodium-technical-details/#blocktime-stabilization-cip24","text":"Author: jjos The deadline computation and block time control currently implemented on Burstcoin provides nearly perfect average block times of 4 minutes. However, as currently implemented, individual block times still show a broad variation with individual block times ranging typically from 10 up to 2000 seconds. With the CIP24 protocol upgrade, this can be much reduced, with block times ranging from 100 to 360 seconds. There is no change on the expected (average) value of 240 seconds (4 minutes) and mining software can be left unchanged.","title":"Blocktime Stabilization (CIP24)"},{"location":"en/burst-sodium-technical-details/#subscription-fee-reduction-cip25","text":"Author: Harry1432 When the new fee model was introduced with CIP03, the execution costs of a subscription were not adjusted. The fees for subscriptions still remained at 1 burst per subscription payment. This change makes the fee for a subscription payment 0.00735 Burst.","title":"Subscription Fee Reduction (CIP25)"},{"location":"en/burst-sodium-technical-details/#conclusion","text":"BRS 2.5 and 3.0 together represent over a year\u2019s worth of work. Through rigorous testing, reviews, and iterations, the Burst Apps Team has been preparing for this event for months. They are proud of the results, and are excited to work with the community on the successful deployment of this and future hard forks. The SODIUM HF checklist for the Burst community is available at https://burstwiki.org If you have any questions, comments, or concerns, we encourage you to reach out to us via Discord: https://discord.gg/ag4qK83 Twitter: https://twitter.com/BurstAppsTeam Github: https://github.com/burst-apps-team","title":"Conclusion"},{"location":"en/burst-software/","text":"Introduction The Burst ecosystem uses lots of software. A majority of these are used either to plot, mine, or simply to transfer BURST. A majority of users will want a local wallet, and there are plenty to choose from! Wallets QBundle The easiest choice for beginners using Windows is to download Qbundle. QBundle is a convenient launcher which installs the BRS local wallet, plotting software, and mining software with a few clicks. Main Developer : harry1453 Download link : https://github.com/burst-apps-team/Qbundle/releases Platform : Windows Installation Guide : QBundle Installation and User Guide Phoenix According to CIP-18 this is the new Cross-Platform Burst Wallet. A multi-platform application architecture is made possible through a few key front-end technologies: React Native, Angular, and Electron. By using these technologies in conjunction, Burst wallet developers will enjoy a modern application development workflow without sacrificing the quality of the end-product. Main Developer : Burst Apps Team (BAT) Download link : https://github.com/burst-apps-team/phoenix/releases Platform : Windows, MacOS, Linux, iOS, Android Burst Reference Software (BRS) The Burst Reference Software (BRS) is the main Burst wallet. It allows connection to the Burst network. The Burst Reference Software is the wallet/software included in QBundle. This wallet version is developed and maintained by the Burst Apps Team (BAT) and supports a multitude of database backends. Main Developer : Burst Apps Team (BAT) Download link : https://github.com/burst-apps-team/burstcoin/releases/latest Platform : Windows, Linux, macOS, Docker Installation Guide : Windows Installation , Linux Installation , macOS Installation , Docker Installation BurstHotWallet A light-weight version of the current BURST wallet for easy access to send and receive BURST. Main Developer : CurbShifter Download link : https://github.com/CurbShifter/BurstHotWallet/releases Platform : Windows, MacOS Easy2Burst [ARCHIVED] Easy2Burst was a Burst Wallet written in Rust, as the successor of QBundle. It is no longer being developed [1] Main Developer : HeosSacer Github repo : https://github.com/HeosSacer/Easy2Burst Platform : Windows, Linux, MacOS Aspera [ARCHIVED] Aspera was a Burst Wallet written in go. This wallet opens up a whole new dimension for Burst with state-of-the-art technologies (partial blocks validation, new front-end, etc.). It is no longer being developed since the PoCC exit of Burstcoin. Main Developer : PoC-Consortium Github repo : https://github.com/PoC-Consortium/Aspera Platform : Windows, Linux, MacOS Burst Client For Windows All-In-One Wallet [ARCHIVED] Burst Win Client extends the original Burst Wallet (BRS) with Plotter and Miner software from other developers. It\u2019s a helper tool for a Windows user. This software is End-of-Life and is no longer updated nor supported. It remains archived online, but will not connect to the Burst network. Main Developer : daWallet Website : https://burstwallet.io/archived-pages-reference-only/dawallets-burst-windows-wallet/ Platform : Windows .NET Windows Chromium All-In-One Wallet [ARCHIVED] This all-in-one wrapper provides easy access to features and resources for Burst. For security conscious people, the passwords used to access the wallet can be encrypted. This wallet is no longer being developed, and is not recommended for use. Main Developer : Lexicon Website : https://burstwallet.io/archived-pages-reference-only/lexicons-net-windows-wallet/ Platform : Windows Plotting Software A large collection of plotting software has been developed for specific needs, specific hardware, and specific operating systems. ENGRAVER Engraver is a BURST plotter that natively generates optimized plot files. It generates PoC2 files and is intended to work on most platforms. Being the fastest plotter there is... it features: direct and async i/o, SIMD support (sse2, avx, avx2, avx512f), and gpu support. Main Developer : PoC-Consortium Download link : https://github.com/PoC-Consortium/engraver/releases Platform : Linux, Unix, Windows, MacOS (32&64bit) Installation guide : Compile from Source TurboPlotter 9000 TurboPlotter 9000 is a CPU/GPU PoC 1 + PoC 2 plotter and plot integrity checker. Main Developer : Blackpawn Download link : https://blackpawn.com/tp/ Platform : Windows, Linux, MacOS XPlotterGui XplotterGui is a GUI version of Xplotter with SSD Cache, File Merging and POC2 Conversion features. Main Developer : JohnnyFFM Download link : https://github.com/JohnnyFFM/XPlotterGui/releases/latest Platform : Windows XPlotter modded XPlotter is the default plotter that comes with QBundle and provides CPU PoC 1 plotting for BURST whith AVX support. This modded version supports PoC2 plotting. Main Developer : JohnnyFFM Download link : https://github.com/JohnnyFFM/XPlotter/releases/latest Platform : Windows gpuPlotGenerator gpuPlotGenerator is a GPU PoC 1 plotter. Main Developer : bhamon Download link : https://github.com/bhamon/gpuPlotGenerator/releases/latest Platform : Windows, Linux, MacOS Mining Software The following software is used to mine plot files. Scavenger Scavenger is a Burst miner developed by PoC Consortium and written in Rust. It features direct io, avx512f, avx2, avx, sse and opencl. Main Developer : PoC Consortium Download link : https://github.com/PoC-Consortium/scavenger/releases/latest Platform : Windows, MacOS, Linux, Unix (64 bit) Gyra Gyra is a front-end tool that creates formally valid and logically consistent configurations for the Scavenger Proof-of-Capacity miner. The configuration file used by Scavenger and created by Gyra is a .yaml file, which users can download in their browser and save it in the root directory where the Scavenger executable is placed. Main Developer : feyd27 Source Code : https://github.com/feyd27/gyra Download link : https://gyra-for-scavenger.firebaseapp.com/config Announcement : https://www.reddit.com/r/burst/comments/cuzect/gyra_for_scavenger_a_submission_for_the_2019/ Platform : Cross Platform foxy-miner A scavenger / conqueror wrapper for collision free multi-mining. Main Developer : felix Download link : https://github.com/felixbrucker/foxy-miner/releases Platform : Windows, MacOS, Linux Blagominer quetzalcoatl A modded version based off of andzno1's version of Blagominer. This version features major improvements and bug fixes. Main Developer : quetzalcoatl Download link : https://github.com/quetzalcoatl/blagominer/releases Platform : Windows Blagominer andzno1 A modded version based off of JohnnyFFM's version of Blagominer. This version features collision free dual mining of Burstcoin and Bitcoin HD (configurable via priority) and tracking (and displaying) of possibly corrupted plot files. Main Developer : andzno1 Download link : https://github.com/andzno1/blagominer/releases Platform : Windows Blagominer JohnnyFFM This is a modified version of Blagominer. This modification of Blagominer builds upon modifications previously made by Quibus. Main Developer : JohnnyFFM Download link : https://github.com/JohnnyFFM/miner-burst/releases/latest Platform : Windows Burstcoin-jminer Burstcoin-jminer is a GPU assisted Proof of Capacity (PoC) Miner for Burstcoin. Main Developer : de-luxe Download link : https://github.com/de-luxe/burstcoin-jminer/releases/latest Platform : Windows, Linux, MacOS CreepMiner The creepMiner is a client application for mining Burst on a pool or solo. It supports CPU mining (SSE2/SSE4/AVX/AVX2) or GPU mining (OpenCL, CUDA). Main Developer : Creepsky Download link : https://github.com/Creepsky/creepMiner/releases/latest Platform : Windows, MacOS, Linux x86_64 or ARM7 The bencher A PoW miner for PoC. Its main purpose is to benchmark hashing devices for PoC and to make different hardware comparable. It also has an educational aspect as it shows how inefficient it is to mine a PoC coin without storage (a BIS GPU can emulate around 1TB). Main Developer : JohnnyFFM Download link : https://github.com/PoC-Consortium/bencher/releases Platform : Windows, MacOS, Linux, Unix (64 bit) Proxy Software Archon A collision free, multi-chain proof of capacity mining proxy. Main Developer : Aya Download link : https://github.com/Bloodreaver/Archon/releases Platform : Windows, Linux foxy-proxy A BHD, LHD, DISC, BOOM and BURST proxy which supports solo and pool mining upstreams Main Developer : felix Download link : https://github.com/felixbrucker/foxy-proxy/releases Platform : Windows, Linux dApps CloudBurst CloudBurst is a decentralized cloud storage application to upload & download files from the Burstcoin blockchain. Main Developer : CurbShifter Download link : https://github.com/CurbShifter/CloudBurstDAPP/releases/latest Platform : Windows, MacOS BurstCoupon BurstCoupon allows you to create and claim password protected coupons as extension for the Burstcoin blockchain. Main Developer : CurbShifter Download link : https://github.com/CurbShifter/BurstCoupon/releases/latest Platform : Windows, MacOS Libraries - Development tools BurstLib BurstLib is a cross platform dynamic library to make developing applications and tools compatible with the Burst blockchain easier. Main Developer : Curbshifter Download link : https://github.com/CurbShifter/BurstLib/releases/latest Platform : Windows, MacOS, Linux, Unix @burstjs @burstjs is a BURST JavaScript library to make it easier for developers to build apps using Angular/React/Node.js/JavaScript. The library is broken down into four packages: @burstjs/core, @burstjs/crypto, @burstjs/http, and @burstjs/util. Main Developer : blankey1337 (BAT) and Ohager (BAT) Download link : https://burst-apps-team.github.io/phoenix/index.html Platform : Cross Platform Burstkit4j Burstkit4j is a BURST Java Development Framework. Main Developer : harry1453 (BAT) Download link : https://github.com/burst-apps-team/burstkit4j/releases Platform : Cross Platform Pool Software Nogrod Nogrod is the all-new PoCC pool software written in GO. It provides SSE4 + AVX2 support, a fair share system based on estimated capacity, grpc api, multiple wallets as backends using the wallet API, can talk directly to wallet database, and dynamic payout thresholds/intervals based on messages on the blockchain. Main Developer : PoC-Consortium Download link : https://github.com/PoC-Consortium/Nogrod Platform : Linux BurstNeon Burst-Pool This is a pool software developed by BurstNeon . Main Developer : BurstNeon Download link : https://github.com/BurstNeon/burst-pool/releases Platform : Linux Other tools TurboSwizzler TurboSwizzler is an application to convert PoC 1 plots to the PoC 2 format. Currently supports drive to drive mode with plot merging. Main Developer : Blackpawn Download link : https://blackpawn.com/tp/ Platform : Windows Poc1to2Converter Poc1to2Converter converts PoC1 plots to POC2 plots. Main Developer : JohnnyFFM Download link : https://github.com/JohnnyFFM/Poc1to2Converter/releases/latest Platform : Windows PoC-Consortium Poc1to2 Converters This Poc1to2 Converter for Linux converts PoC1 plots to POC2 plots. There is a rust binary converter (recommended) or a perl script version. Main Developer : PoC-Consortium Download link : https://github.com/PoC-Consortium/Utilities Platform : Linux Burstcoin Explorer Mobile App Burstcoin explorer is a block explorer for the Burstcoin network Features include: Search for and view blocks, accounts and transactions Keep a list of accounts you are watching Keep an eye on the current Burst price, both in BTC and USD Observe the current status of the Burstcoin Network Countdown upcoming events such as the Pre-Dymaxion Hard Fork Main Developer : harry1453 Download link : https://github.com/harry1453/burstcoin-explorer-android/releases/latest | https://play.google.com/store/apps/details?id=com.harrysoft.burstcoinexplorer Platform : Android PaperBurst PaperBurst is a paper wallet generator for Burstcoin. Main Developer : Umbrellacorp03 Download link : https://github.com/umbrellacorp03/PaperBurst/releases/latest Platform : Windows BlockTalk BlockTalk allows the user to write, debug, and deploy Burst smart contracts relying only on Java. You can use a simple text editor or your preferred IDE. Main Developer : jjos Download link : https://github.com/jjos2372/blocktalk Platform : Cross Platform More Information: BlockTalk","title":"Burst Software"},{"location":"en/burst-software/#introduction","text":"The Burst ecosystem uses lots of software. A majority of these are used either to plot, mine, or simply to transfer BURST. A majority of users will want a local wallet, and there are plenty to choose from!","title":"Introduction"},{"location":"en/burst-software/#wallets","text":"","title":"Wallets"},{"location":"en/burst-software/#qbundle","text":"The easiest choice for beginners using Windows is to download Qbundle. QBundle is a convenient launcher which installs the BRS local wallet, plotting software, and mining software with a few clicks. Main Developer : harry1453 Download link : https://github.com/burst-apps-team/Qbundle/releases Platform : Windows Installation Guide : QBundle Installation and User Guide","title":"QBundle"},{"location":"en/burst-software/#phoenix","text":"According to CIP-18 this is the new Cross-Platform Burst Wallet. A multi-platform application architecture is made possible through a few key front-end technologies: React Native, Angular, and Electron. By using these technologies in conjunction, Burst wallet developers will enjoy a modern application development workflow without sacrificing the quality of the end-product. Main Developer : Burst Apps Team (BAT) Download link : https://github.com/burst-apps-team/phoenix/releases Platform : Windows, MacOS, Linux, iOS, Android","title":"Phoenix"},{"location":"en/burst-software/#burst-reference-software-brs","text":"The Burst Reference Software (BRS) is the main Burst wallet. It allows connection to the Burst network. The Burst Reference Software is the wallet/software included in QBundle. This wallet version is developed and maintained by the Burst Apps Team (BAT) and supports a multitude of database backends. Main Developer : Burst Apps Team (BAT) Download link : https://github.com/burst-apps-team/burstcoin/releases/latest Platform : Windows, Linux, macOS, Docker Installation Guide : Windows Installation , Linux Installation , macOS Installation , Docker Installation","title":"Burst Reference Software (BRS)"},{"location":"en/burst-software/#bursthotwallet","text":"A light-weight version of the current BURST wallet for easy access to send and receive BURST. Main Developer : CurbShifter Download link : https://github.com/CurbShifter/BurstHotWallet/releases Platform : Windows, MacOS","title":"BurstHotWallet"},{"location":"en/burst-software/#easy2burst-91archived93","text":"Easy2Burst was a Burst Wallet written in Rust, as the successor of QBundle. It is no longer being developed [1] Main Developer : HeosSacer Github repo : https://github.com/HeosSacer/Easy2Burst Platform : Windows, Linux, MacOS","title":"Easy2Burst [ARCHIVED]"},{"location":"en/burst-software/#aspera-91archived93","text":"Aspera was a Burst Wallet written in go. This wallet opens up a whole new dimension for Burst with state-of-the-art technologies (partial blocks validation, new front-end, etc.). It is no longer being developed since the PoCC exit of Burstcoin. Main Developer : PoC-Consortium Github repo : https://github.com/PoC-Consortium/Aspera Platform : Windows, Linux, MacOS","title":"Aspera [ARCHIVED]"},{"location":"en/burst-software/#burst-client-for-windows-all-in-one-wallet-91archived93","text":"Burst Win Client extends the original Burst Wallet (BRS) with Plotter and Miner software from other developers. It\u2019s a helper tool for a Windows user. This software is End-of-Life and is no longer updated nor supported. It remains archived online, but will not connect to the Burst network. Main Developer : daWallet Website : https://burstwallet.io/archived-pages-reference-only/dawallets-burst-windows-wallet/ Platform : Windows","title":"Burst Client For Windows All-In-One Wallet [ARCHIVED]"},{"location":"en/burst-software/#net-windows-chromium-all-in-one-wallet-91archived93","text":"This all-in-one wrapper provides easy access to features and resources for Burst. For security conscious people, the passwords used to access the wallet can be encrypted. This wallet is no longer being developed, and is not recommended for use. Main Developer : Lexicon Website : https://burstwallet.io/archived-pages-reference-only/lexicons-net-windows-wallet/ Platform : Windows","title":".NET Windows Chromium All-In-One Wallet [ARCHIVED]"},{"location":"en/burst-software/#plotting-software","text":"A large collection of plotting software has been developed for specific needs, specific hardware, and specific operating systems.","title":"Plotting Software"},{"location":"en/burst-software/#engraver","text":"Engraver is a BURST plotter that natively generates optimized plot files. It generates PoC2 files and is intended to work on most platforms. Being the fastest plotter there is... it features: direct and async i/o, SIMD support (sse2, avx, avx2, avx512f), and gpu support. Main Developer : PoC-Consortium Download link : https://github.com/PoC-Consortium/engraver/releases Platform : Linux, Unix, Windows, MacOS (32&64bit) Installation guide : Compile from Source","title":"ENGRAVER"},{"location":"en/burst-software/#turboplotter-9000","text":"TurboPlotter 9000 is a CPU/GPU PoC 1 + PoC 2 plotter and plot integrity checker. Main Developer : Blackpawn Download link : https://blackpawn.com/tp/ Platform : Windows, Linux, MacOS","title":"TurboPlotter 9000"},{"location":"en/burst-software/#xplottergui","text":"XplotterGui is a GUI version of Xplotter with SSD Cache, File Merging and POC2 Conversion features. Main Developer : JohnnyFFM Download link : https://github.com/JohnnyFFM/XPlotterGui/releases/latest Platform : Windows","title":"XPlotterGui"},{"location":"en/burst-software/#xplotter-modded","text":"XPlotter is the default plotter that comes with QBundle and provides CPU PoC 1 plotting for BURST whith AVX support. This modded version supports PoC2 plotting. Main Developer : JohnnyFFM Download link : https://github.com/JohnnyFFM/XPlotter/releases/latest Platform : Windows","title":"XPlotter modded"},{"location":"en/burst-software/#gpuplotgenerator","text":"gpuPlotGenerator is a GPU PoC 1 plotter. Main Developer : bhamon Download link : https://github.com/bhamon/gpuPlotGenerator/releases/latest Platform : Windows, Linux, MacOS","title":"gpuPlotGenerator"},{"location":"en/burst-software/#mining-software","text":"The following software is used to mine plot files.","title":"Mining Software"},{"location":"en/burst-software/#scavenger","text":"Scavenger is a Burst miner developed by PoC Consortium and written in Rust. It features direct io, avx512f, avx2, avx, sse and opencl. Main Developer : PoC Consortium Download link : https://github.com/PoC-Consortium/scavenger/releases/latest Platform : Windows, MacOS, Linux, Unix (64 bit)","title":"Scavenger"},{"location":"en/burst-software/#gyra","text":"Gyra is a front-end tool that creates formally valid and logically consistent configurations for the Scavenger Proof-of-Capacity miner. The configuration file used by Scavenger and created by Gyra is a .yaml file, which users can download in their browser and save it in the root directory where the Scavenger executable is placed. Main Developer : feyd27 Source Code : https://github.com/feyd27/gyra Download link : https://gyra-for-scavenger.firebaseapp.com/config Announcement : https://www.reddit.com/r/burst/comments/cuzect/gyra_for_scavenger_a_submission_for_the_2019/ Platform : Cross Platform","title":"Gyra"},{"location":"en/burst-software/#foxy-miner","text":"A scavenger / conqueror wrapper for collision free multi-mining. Main Developer : felix Download link : https://github.com/felixbrucker/foxy-miner/releases Platform : Windows, MacOS, Linux","title":"foxy-miner"},{"location":"en/burst-software/#blagominer-quetzalcoatl","text":"A modded version based off of andzno1's version of Blagominer. This version features major improvements and bug fixes. Main Developer : quetzalcoatl Download link : https://github.com/quetzalcoatl/blagominer/releases Platform : Windows","title":"Blagominer quetzalcoatl"},{"location":"en/burst-software/#blagominer-andzno1","text":"A modded version based off of JohnnyFFM's version of Blagominer. This version features collision free dual mining of Burstcoin and Bitcoin HD (configurable via priority) and tracking (and displaying) of possibly corrupted plot files. Main Developer : andzno1 Download link : https://github.com/andzno1/blagominer/releases Platform : Windows","title":"Blagominer andzno1"},{"location":"en/burst-software/#blagominer-johnnyffm","text":"This is a modified version of Blagominer. This modification of Blagominer builds upon modifications previously made by Quibus. Main Developer : JohnnyFFM Download link : https://github.com/JohnnyFFM/miner-burst/releases/latest Platform : Windows","title":"Blagominer JohnnyFFM"},{"location":"en/burst-software/#burstcoin-jminer","text":"Burstcoin-jminer is a GPU assisted Proof of Capacity (PoC) Miner for Burstcoin. Main Developer : de-luxe Download link : https://github.com/de-luxe/burstcoin-jminer/releases/latest Platform : Windows, Linux, MacOS","title":"Burstcoin-jminer"},{"location":"en/burst-software/#creepminer","text":"The creepMiner is a client application for mining Burst on a pool or solo. It supports CPU mining (SSE2/SSE4/AVX/AVX2) or GPU mining (OpenCL, CUDA). Main Developer : Creepsky Download link : https://github.com/Creepsky/creepMiner/releases/latest Platform : Windows, MacOS, Linux x86_64 or ARM7","title":"CreepMiner"},{"location":"en/burst-software/#the-bencher","text":"A PoW miner for PoC. Its main purpose is to benchmark hashing devices for PoC and to make different hardware comparable. It also has an educational aspect as it shows how inefficient it is to mine a PoC coin without storage (a BIS GPU can emulate around 1TB). Main Developer : JohnnyFFM Download link : https://github.com/PoC-Consortium/bencher/releases Platform : Windows, MacOS, Linux, Unix (64 bit)","title":"The bencher"},{"location":"en/burst-software/#proxy-software","text":"","title":"Proxy Software"},{"location":"en/burst-software/#archon","text":"A collision free, multi-chain proof of capacity mining proxy. Main Developer : Aya Download link : https://github.com/Bloodreaver/Archon/releases Platform : Windows, Linux","title":"Archon"},{"location":"en/burst-software/#foxy-proxy","text":"A BHD, LHD, DISC, BOOM and BURST proxy which supports solo and pool mining upstreams Main Developer : felix Download link : https://github.com/felixbrucker/foxy-proxy/releases Platform : Windows, Linux","title":"foxy-proxy"},{"location":"en/burst-software/#dapps","text":"","title":"dApps"},{"location":"en/burst-software/#cloudburst","text":"CloudBurst is a decentralized cloud storage application to upload & download files from the Burstcoin blockchain. Main Developer : CurbShifter Download link : https://github.com/CurbShifter/CloudBurstDAPP/releases/latest Platform : Windows, MacOS","title":"CloudBurst"},{"location":"en/burst-software/#burstcoupon","text":"BurstCoupon allows you to create and claim password protected coupons as extension for the Burstcoin blockchain. Main Developer : CurbShifter Download link : https://github.com/CurbShifter/BurstCoupon/releases/latest Platform : Windows, MacOS","title":"BurstCoupon"},{"location":"en/burst-software/#libraries-development-tools","text":"","title":"Libraries - Development tools"},{"location":"en/burst-software/#burstlib","text":"BurstLib is a cross platform dynamic library to make developing applications and tools compatible with the Burst blockchain easier. Main Developer : Curbshifter Download link : https://github.com/CurbShifter/BurstLib/releases/latest Platform : Windows, MacOS, Linux, Unix","title":"BurstLib"},{"location":"en/burst-software/#burstjs","text":"@burstjs is a BURST JavaScript library to make it easier for developers to build apps using Angular/React/Node.js/JavaScript. The library is broken down into four packages: @burstjs/core, @burstjs/crypto, @burstjs/http, and @burstjs/util. Main Developer : blankey1337 (BAT) and Ohager (BAT) Download link : https://burst-apps-team.github.io/phoenix/index.html Platform : Cross Platform","title":"@burstjs"},{"location":"en/burst-software/#burstkit4j","text":"Burstkit4j is a BURST Java Development Framework. Main Developer : harry1453 (BAT) Download link : https://github.com/burst-apps-team/burstkit4j/releases Platform : Cross Platform","title":"Burstkit4j"},{"location":"en/burst-software/#pool-software","text":"","title":"Pool Software"},{"location":"en/burst-software/#nogrod","text":"Nogrod is the all-new PoCC pool software written in GO. It provides SSE4 + AVX2 support, a fair share system based on estimated capacity, grpc api, multiple wallets as backends using the wallet API, can talk directly to wallet database, and dynamic payout thresholds/intervals based on messages on the blockchain. Main Developer : PoC-Consortium Download link : https://github.com/PoC-Consortium/Nogrod Platform : Linux","title":"Nogrod"},{"location":"en/burst-software/#burstneon-burst-pool","text":"This is a pool software developed by BurstNeon . Main Developer : BurstNeon Download link : https://github.com/BurstNeon/burst-pool/releases Platform : Linux","title":"BurstNeon Burst-Pool"},{"location":"en/burst-software/#other-tools","text":"","title":"Other tools"},{"location":"en/burst-software/#turboswizzler","text":"TurboSwizzler is an application to convert PoC 1 plots to the PoC 2 format. Currently supports drive to drive mode with plot merging. Main Developer : Blackpawn Download link : https://blackpawn.com/tp/ Platform : Windows","title":"TurboSwizzler"},{"location":"en/burst-software/#poc1to2converter","text":"Poc1to2Converter converts PoC1 plots to POC2 plots. Main Developer : JohnnyFFM Download link : https://github.com/JohnnyFFM/Poc1to2Converter/releases/latest Platform : Windows","title":"Poc1to2Converter"},{"location":"en/burst-software/#poc-consortium-poc1to2-converters","text":"This Poc1to2 Converter for Linux converts PoC1 plots to POC2 plots. There is a rust binary converter (recommended) or a perl script version. Main Developer : PoC-Consortium Download link : https://github.com/PoC-Consortium/Utilities Platform : Linux","title":"PoC-Consortium Poc1to2 Converters"},{"location":"en/burst-software/#burstcoin-explorer-mobile-app","text":"Burstcoin explorer is a block explorer for the Burstcoin network Features include: Search for and view blocks, accounts and transactions Keep a list of accounts you are watching Keep an eye on the current Burst price, both in BTC and USD Observe the current status of the Burstcoin Network Countdown upcoming events such as the Pre-Dymaxion Hard Fork Main Developer : harry1453 Download link : https://github.com/harry1453/burstcoin-explorer-android/releases/latest | https://play.google.com/store/apps/details?id=com.harrysoft.burstcoinexplorer Platform : Android","title":"Burstcoin Explorer Mobile App"},{"location":"en/burst-software/#paperburst","text":"PaperBurst is a paper wallet generator for Burstcoin. Main Developer : Umbrellacorp03 Download link : https://github.com/umbrellacorp03/PaperBurst/releases/latest Platform : Windows","title":"PaperBurst"},{"location":"en/burst-software/#blocktalk","text":"BlockTalk allows the user to write, debug, and deploy Burst smart contracts relying only on Java. You can use a simple text editor or your preferred IDE. Main Developer : jjos Download link : https://github.com/jjos2372/blocktalk Platform : Cross Platform More Information: BlockTalk","title":"BlockTalk"},{"location":"en/burst-support-for-erc20-tokens/","text":"Introduction ERC20 is a popular Ethereum standard for token management, explained here https://github.com/ethereum/EIPs/issues/20 . The BURST asset exchange already supports most of the ERC20 operations out of the box without the need to issue a smart contract. This document explains how to implement the ERC20 APIs using the equivalent BURST APIs. Issuing Tokens Each ERC20 token is represented as a BURST asset. Issue the asset using the issueAsset API. Each asset is identified by a unique asset id set to the transaction id of the issueAsset transaction. For more details, please take a look at The Burst API and The Burst API Examples . ERC20 API Implementation totalSupply To get the total token supply invoke the getAsset API and supply the asset id. The total supply is provided by the initialQuantityQNT attribute, the existing supply, after possible share deletes, is specified by the quantityQNT attribute. Quantity values are always provided as integer values, the number of decimal positions to apply to these quantities is specified by the \u201cdecimals\u201d attribute. balanceOf To get the account balance of another account with a given address, invoke the getAssetAccounts API and provide the BURST address as the account parameter and the asset id as the asset parameter. Please look to the Burst API for an example . The unconfirmedQuantityQNT attribute in the response represents the current account balance. The quantityQNT attribute represents the quantity available for use at the moment after taking into account balance locked by open asset orders. transfer To send tokens from your address to another address use the transferAsset API, specify the recipient address, the asset id and the quantity to transfer as well as your account passphrase, the transaction fee and transaction deadline. The transferAsset transaction is recorded on the BURST blockchain. You can later track token transfers using the Get Asset Transfers API","title":"Burst Support for ERC20 tokens"},{"location":"en/burst-support-for-erc20-tokens/#introduction","text":"ERC20 is a popular Ethereum standard for token management, explained here https://github.com/ethereum/EIPs/issues/20 . The BURST asset exchange already supports most of the ERC20 operations out of the box without the need to issue a smart contract. This document explains how to implement the ERC20 APIs using the equivalent BURST APIs.","title":"Introduction"},{"location":"en/burst-support-for-erc20-tokens/#issuing-tokens","text":"Each ERC20 token is represented as a BURST asset. Issue the asset using the issueAsset API. Each asset is identified by a unique asset id set to the transaction id of the issueAsset transaction. For more details, please take a look at The Burst API and The Burst API Examples .","title":"Issuing Tokens"},{"location":"en/burst-support-for-erc20-tokens/#erc20-api-implementation","text":"","title":"ERC20 API Implementation"},{"location":"en/burst-support-for-erc20-tokens/#totalsupply","text":"To get the total token supply invoke the getAsset API and supply the asset id. The total supply is provided by the initialQuantityQNT attribute, the existing supply, after possible share deletes, is specified by the quantityQNT attribute. Quantity values are always provided as integer values, the number of decimal positions to apply to these quantities is specified by the \u201cdecimals\u201d attribute.","title":"totalSupply"},{"location":"en/burst-support-for-erc20-tokens/#balanceof","text":"To get the account balance of another account with a given address, invoke the getAssetAccounts API and provide the BURST address as the account parameter and the asset id as the asset parameter. Please look to the Burst API for an example . The unconfirmedQuantityQNT attribute in the response represents the current account balance. The quantityQNT attribute represents the quantity available for use at the moment after taking into account balance locked by open asset orders.","title":"balanceOf"},{"location":"en/burst-support-for-erc20-tokens/#transfer","text":"To send tokens from your address to another address use the transferAsset API, specify the recipient address, the asset id and the quantity to transfer as well as your account passphrase, the transaction fee and transaction deadline. The transferAsset transaction is recorded on the BURST blockchain. You can later track token transfers using the Get Asset Transfers API","title":"transfer"},{"location":"en/burst-who-s-who/","text":"Introduction A number of developers and community members have contributed to the Burst ecosystem over the years. The main objective of this page is to present the current teams and contributors. This information can be found on https://www.burst-coin.org/community/ .","title":"Burst Who's Who"},{"location":"en/burst-who-s-who/#introduction","text":"A number of developers and community members have contributed to the Burst ecosystem over the years. The main objective of this page is to present the current teams and contributors. This information can be found on https://www.burst-coin.org/community/ .","title":"Introduction"},{"location":"en/burst-wiki/","text":"Burst - the \"cryptocurrency 2.0\" Burst is a cryptocurrency and an open-source decentralized blockchain platform that connects people, companies, and financial institutions. It allows you to move value \u2013 according to your own rules \u2013 within a scalable, green, and customizable ledger. It has multiple core-level features and has been running publicly since August of 2014. Burst is a deflationary currency. The total number of coins that can ever be mined is capped at 2,158,812,800. The mining period for Burst will end in the 2033. An informative and fast paced video introduction to Burst is located here: Burst was officially introduced on the 10th of August 2014 with a goal to solve the largest problems faced by other cryptocurrencies: lack of decentralization unsustainable waste of energy unfair pre-mines and ICO releases supremacy of corporate interests and large mining operations Burst is the first and only cryptocurrency secured by the energy efficient Proof-of-Capacity algorithm (PoC). Bitcoin and many other \u201caltcoins\u201d use the unsustainable Proof-of-Work model that is widely regarded as a pending environmental disaster due to excessive energy usage. The Proof-of-Work model provides for network security by requiring computers to needlessly and repeatedly perform computationally intensive hashing functions in real time. As network difficulty increases over time, an arms race to remain competitive has emerged whereby Proof-of-Work miners employ ever more powerful processors, graphics cards, and expensive application-specific integrated circuits (ASICS). The energy costs are astounding with electric usage devoted to Proof-of-Work estimated to be more than the total usage of some countries. The Bitcoin network's annual electricity usage alone is frequently sited as exceeding that of the country of Switzerland. Burst\u2019s alternative Proof-of-Capacity algorithm provides equivalent security using regular computer resources and inexpensive hard drives to store and retrieve the results of hashing functions that have been pre-computed and are reusable in perpetuity. Decentralization Burst addresses the centralist tendency problem plaguing other cryptocurrencies by further using an algorithm that is ASIC-proof. With no possibility for ASICs to replace regular everyday hardware as a minimum barrier to feasible entry, continued decentralization is assured. Energy-Efficient Burst uses minimal computational resources beyond that required for initial setup. It is estimated that a Burst transaction uses one 400th of the energy required to process a bitcoin[1] transaction. This makes Burst eco-friendly and green. It can be mined using something as small as a Raspberry Pi. Fair Release Burst was released with advance public notice, without premine[2], without airdrops, and without an ICO . All Burst in existence today has been mined beginning with the genesis block using the PoC algorithm. Equal Opportunity Because there is no need to buy expensive specialized hardware, Burst is and will remain accessible to anyone who owns a personal computer. No matter how well funded an individual or organization, they cannot use expensive equipment to gain advantage over regular miners using regular computer equipment. References https://www.burstcoin.ist/how-burst-puts-bitcoin-to-shame https://www.cryptocompare.com/coins/guides/what-is-a-premine/","title":"Burst Wiki"},{"location":"en/burst-wiki/#burst-the-cryptocurrency-20","text":"Burst is a cryptocurrency and an open-source decentralized blockchain platform that connects people, companies, and financial institutions. It allows you to move value \u2013 according to your own rules \u2013 within a scalable, green, and customizable ledger. It has multiple core-level features and has been running publicly since August of 2014. Burst is a deflationary currency. The total number of coins that can ever be mined is capped at 2,158,812,800. The mining period for Burst will end in the 2033. An informative and fast paced video introduction to Burst is located here: Burst was officially introduced on the 10th of August 2014 with a goal to solve the largest problems faced by other cryptocurrencies: lack of decentralization unsustainable waste of energy unfair pre-mines and ICO releases supremacy of corporate interests and large mining operations Burst is the first and only cryptocurrency secured by the energy efficient Proof-of-Capacity algorithm (PoC). Bitcoin and many other \u201caltcoins\u201d use the unsustainable Proof-of-Work model that is widely regarded as a pending environmental disaster due to excessive energy usage. The Proof-of-Work model provides for network security by requiring computers to needlessly and repeatedly perform computationally intensive hashing functions in real time. As network difficulty increases over time, an arms race to remain competitive has emerged whereby Proof-of-Work miners employ ever more powerful processors, graphics cards, and expensive application-specific integrated circuits (ASICS). The energy costs are astounding with electric usage devoted to Proof-of-Work estimated to be more than the total usage of some countries. The Bitcoin network's annual electricity usage alone is frequently sited as exceeding that of the country of Switzerland. Burst\u2019s alternative Proof-of-Capacity algorithm provides equivalent security using regular computer resources and inexpensive hard drives to store and retrieve the results of hashing functions that have been pre-computed and are reusable in perpetuity.","title":"Burst - the \"cryptocurrency 2.0\""},{"location":"en/burst-wiki/#decentralization","text":"Burst addresses the centralist tendency problem plaguing other cryptocurrencies by further using an algorithm that is ASIC-proof. With no possibility for ASICs to replace regular everyday hardware as a minimum barrier to feasible entry, continued decentralization is assured.","title":"Decentralization"},{"location":"en/burst-wiki/#energy-efficient","text":"Burst uses minimal computational resources beyond that required for initial setup. It is estimated that a Burst transaction uses one 400th of the energy required to process a bitcoin[1] transaction. This makes Burst eco-friendly and green. It can be mined using something as small as a Raspberry Pi.","title":"Energy-Efficient"},{"location":"en/burst-wiki/#fair-release","text":"Burst was released with advance public notice, without premine[2], without airdrops, and without an ICO . All Burst in existence today has been mined beginning with the genesis block using the PoC algorithm.","title":"Fair Release"},{"location":"en/burst-wiki/#equal-opportunity","text":"Because there is no need to buy expensive specialized hardware, Burst is and will remain accessible to anyone who owns a personal computer. No matter how well funded an individual or organization, they cannot use expensive equipment to gain advantage over regular miners using regular computer equipment.","title":"Equal Opportunity"},{"location":"en/burst-wiki/#references","text":"https://www.burstcoin.ist/how-burst-puts-bitcoin-to-shame https://www.cryptocompare.com/coins/guides/what-is-a-premine/","title":"References"},{"location":"en/bursts-features/","text":"Current features of Burst include: Asset Exchange To exchange cryptocurrencies and other digital assets until now, you had to sign up for an account on a centralized platform such as Kraken/Bter/etc, transfer your assets to them and then pay them transaction fees. This brings in a large concern: a centralized exchange could just bail with everyone's deposits. Burst has developed a peer-to-peer exchange into the software to allow for decentralized trading which eliminates this trust point. It also eliminates trading fees. The same technology that allows you to trade BURST for many other digital assets can allow you to trade BURST for almost any commodity. This feature is based on the \u201ccolored coins\u201d concept. Since the blockchain provides a trustworthy record of transactions, it can be leveraged to provide a record of trade of items other than BURST. To do this, Burst allows the designation or \u201ccoloring\u201d of a particular coin, which builds a bridge from the virtual crypto-currency world to the physical world. The \u201ccolored coin\u201d can represent property, stocks/bonds, commodites, or even concepts. As a result, the Burst network could be used to trade almost anything . Marketplace This feature provides a protocol for decentralized, peer-to-peer stores for any kind of digital goods. Alias System Burst implements an alias system that translates alphanumeric text into almost anything: Burst account addresses, email addresses, URLs, phone numbers, SKU codes, and more. This not only gives Burst the ability to function as a Decentralized DNS system, but adds additional possibilities for mapping short names to other entities. Arbitrary Messages This feature allows Burst users to send small amounts of data through the decentralized network. These data can be encrypted. The term \u201cmessage\u201d is loose: this feature can be used to send simple text messages, but can also be used to send up to 1000 bytes of any data. As a result, it can be used to build file-sharing services, decentralized applications, and higher-level Burst services. Crowdfunding Burst implements a crowdfunding system which allows every burst user to set up a crowfunding.","title":"Burst's Features"},{"location":"en/bursts-features/#asset-exchange","text":"To exchange cryptocurrencies and other digital assets until now, you had to sign up for an account on a centralized platform such as Kraken/Bter/etc, transfer your assets to them and then pay them transaction fees. This brings in a large concern: a centralized exchange could just bail with everyone's deposits. Burst has developed a peer-to-peer exchange into the software to allow for decentralized trading which eliminates this trust point. It also eliminates trading fees. The same technology that allows you to trade BURST for many other digital assets can allow you to trade BURST for almost any commodity. This feature is based on the \u201ccolored coins\u201d concept. Since the blockchain provides a trustworthy record of transactions, it can be leveraged to provide a record of trade of items other than BURST. To do this, Burst allows the designation or \u201ccoloring\u201d of a particular coin, which builds a bridge from the virtual crypto-currency world to the physical world. The \u201ccolored coin\u201d can represent property, stocks/bonds, commodites, or even concepts. As a result, the Burst network could be used to trade almost anything .","title":"Asset Exchange"},{"location":"en/bursts-features/#marketplace","text":"This feature provides a protocol for decentralized, peer-to-peer stores for any kind of digital goods.","title":"Marketplace"},{"location":"en/bursts-features/#alias-system","text":"Burst implements an alias system that translates alphanumeric text into almost anything: Burst account addresses, email addresses, URLs, phone numbers, SKU codes, and more. This not only gives Burst the ability to function as a Decentralized DNS system, but adds additional possibilities for mapping short names to other entities.","title":"Alias System"},{"location":"en/bursts-features/#arbitrary-messages","text":"This feature allows Burst users to send small amounts of data through the decentralized network. These data can be encrypted. The term \u201cmessage\u201d is loose: this feature can be used to send simple text messages, but can also be used to send up to 1000 bytes of any data. As a result, it can be used to build file-sharing services, decentralized applications, and higher-level Burst services.","title":"Arbitrary Messages"},{"location":"en/bursts-features/#crowdfunding","text":"Burst implements a crowdfunding system which allows every burst user to set up a crowfunding.","title":"Crowdfunding"},{"location":"en/cip/","text":"Capability Improvement Proposal Similar to the practice of BIPs and EIPs , the Burst community has established CIPs (short for \u201cCapability Improvement Proposal\u201d or even \u201cCoin Improvement Proposal\u201d) to advance further development of Burstcoin. So CIPs describe standards for the Burstcoin platform, including core protocol specifications, client APIs, and contract standards. Abstract A (Burst)Coin or Capability Improvement Proposal (CIP) is a document providing information to the Burstcoin community, or describing a new feature for Burstcoin, its processes or environment. The CIP should provide a concise technical specification of the feature and a rationale for the feature. We intend CIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Burstcoin. The CIP author is responsible for building consensus within the community and documenting dissenting opinions. Because the CIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal. CIP workflow The CIP process begins with a new idea for Burstcoin. Each potential CIP must have an author -- someone who writes the CIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The CIP author should first attempt to ascertain whether the idea is CIP-able. Small enhancements or patches to a particular piece of software often don't require standardization between multiple projects; these don't need a CIP and should be injected into the relevant project-specific development workflow with a patch submission to the applicable issue tracker. Additionally, many ideas have been brought forward for changing Burstcoin that have been rejected for various reasons. The first step should be to search past discussions to see if an idea has been considered before, and if so, what issues arose in its progression. After investigating past work, the best way to proceed is by posting about the new idea to the Burstcoin Discord . Vetting an idea publicly before going as far as writing a CIP is meant to save both the potential author and the wider community time. Asking the Burstcoin community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Burstcoin is used. Once the author has asked the Burstcoin community as to whether an idea has any chance of acceptance, a draft CIP should be presented to the Burstcoin Discord . This gives the author a chance to flesh out the draft CIP to make it properly formatted, of high quality, and to address additional concerns about the proposal. Following a discussion, the proposal should be submitted to the CIPs repository . This draft must be written in CIP style as described below, and named with an alias such as \u201ccip-johndoe-infiniteburstcoins\u201d until an editor has assigned it a CIP number (authors MUST NOT self-assign CIP numbers). When the CIP draft is complete, the CIP editor will assign the CIP a number, label it as Standards Track, Informational, or Process. Once the CIP has been approved for draft inclusion by an editor (who must ensure that the above steps have been taken), the CIP will be merged with draft status, and the editor will open a new pull request to activate the CIP. This pull request will serve as the comments / discussion thread for the CIP and must remain open for a minimum of 30 days. Reasons for rejecting CIPs include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Burstcoin philosophy. It is highly recommended that a single CIP contain a single key proposal or new idea. The more focused the CIP, the more successful it tends to be. If in doubt, split your CIP into several well-focused ones. For a CIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly. Transferring CIP Ownership It occasionally becomes necessary to transfer ownership of CIPs to a new author. In general, we'd like to retain the original author as a co-author of the transferred CIP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the CIP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the CIP. We try to build consensus around a CIP, but if that's not possible, you can always submit a competing CIP. If you are interested in assuming ownership of a CIP, send a message asking to take over, addressed to both the original author and the CIP editor. If the original author doesn't respond to email in a timely manner, the CIP editor will make a unilateral decision (it's not like such decisions can't be reversed :). CIP Editors The current CIP editors can be contacted on Discord. CIP Editor Responsibilities & Workflow The CIP editor is present in the Burst Discord channel. For each new CIP that comes in an editor does the following: Read the CIP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted. The title should accurately describe the content. A link to the CIP draft must have been sent to the Burst Discord channel for discussion. Motivation and backward compatibility (when applicable) must be addressed. The defined Layer header must be correctly assigned for the given specification. Licensing terms must be acceptable for CIPs. If the CIP isn't ready, the editor will send it back to the author for revision, with specific instructions. Once the CIP is ready for the repository it should be submitted to the CIPs repository where it may get further feedback. The CIP editor will: Assign a CIP number. Move the CIP to its final Wiki name when it is ready. The CIP editors are intended to fulfill administrative and editorial responsibilities. The CIP editors monitor CIP changes, and update CIP headers as appropriate. CIP format and structure Specification CIPs must be written in markdown format. Each CIP should have the following parts: Preamble -- Headers containing metadata about the CIP (see below). Abstract -- A short (~200 word) description of the technical issue being addressed. Copyright -- As the CIPs are part of this Burstwiki project the license is GNU FDL. Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for different Burstcoin platforms. Motivation -- The motivation is critical for CIPs that want to change the Burstcoin protocol. It should clearly explain why the existing protocol is inadequate to address the problem that the CIP solves. Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work. The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. Backwards compatibility -- All CIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The CIP must explain how the author proposes to deal with these incompatibilities. Reference implementation -- The reference implementation must be completed before any CIP is given status \u201cFinal\u201d, but it need not be completed before the CIP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code. The final implementation must include test code and documentation appropriate for the Burstcoin protocol. CIP header preamble Each CIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with \u201c*\u201d are optional and are described below. All other headers are required. CIP: <CIP number, or \"?\" before being assigned> * Layer: <Consensus (soft fork) | Consensus (hard fork) | Peer Services | API/RPC | Applications> Title: <CIP title; maximum 44 characters> Author: <list of author names or known community handles> * Discussions-To: <email address> * Comments-Summary: <summary tone> Comments-URI: <links to wiki page for comments> Status: <Draft | Active | Proposed | Deferred | Rejected | Withdrawn | Final | Replaced | Obsolete> Type: <Standards Track | Informational | Process> Created: <date created on, in ISO 8601 (yyyy-mm-dd) format> License: <abbreviation for approved license(s)> * License-Code: <abbreviation for code under different approved license(s)> * Post-History: <dates of postings to bitcoin mailing list, or link to thread in mailing list archive> * Requires: <CIP number(s)> * Replaces: <CIP number> * Superseded-By: <CIP number> The Layer header (only for Standards Track CIPs) documents which layer of Burstcoin the CIP applies to. The Author header lists the names and email addresses of all the authors/owners of the CIP. The format of the Author header value must be Random J. User <address@dom.ain> If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions. While a CIP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the CIP is being discussed. No Discussions-To header is necessary if the CIP is being discussed privately with the author, or on the bitcoin email mailing lists. The Type header specifies the type of CIP: Standards Track, Informational, or Process. The Created header records the date that the CIP was assigned a number, while Post-History is used to record when new versions of the CIP are posted to bitcoin mailing lists. Dates should be in yyyy-mm-dd format, e.g. 2001-08-14. Post-History is permitted to be a link to a specific thread in a mailing list archive. CIPs may have a Requires header, indicating the CIP numbers that this CIP depends on. CIPs may also have a Superseded-By header indicating that a CIP has been rendered obsolete by a later document; the value is the number of the CIP that replaces the current document. The newer CIP must have a Replaces header containing the number of the CIP that it rendered obsolete. Auxiliary Files CIPs may include auxiliary files such as diagrams. Auxiliary files should be included in a subdirectory for that CIP. CIP types There are three kinds of CIP: A Standards Track CIP describes any change that affects most or all Burstcoin implementations, such as a change to the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Burstcoin. Standards Track CIPs consist of two parts, a design document and a reference implementation. An Informational CIP describes a Burstcoin design issue, or provides general guidelines or information to the Burstcoin community, but does not propose a new feature. Informational CIPs do not necessarily represent a Burstcoin community consensus or recommendation, so users and implementors are free to ignore Informational CIPs or follow their advice. A Process CIP describes a process surrounding Burstcoin, or proposes a change to (or an event in) a process. Process CIPs are like Standards Track CIPs but apply to areas other than the Burstcoin protocol itself. They may propose an implementation, but not to Burstcoin's codebase; they often require community consensus; unlike Informational CIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Burstcoin development. Any meta-CIP is also considered a Process CIP. CIP status field Specification The typical paths of the status of CIPs are in the CIP Workflow diagram. Authors of a CIP may decide on their own to change the status between Draft , Deferred , or Withdrawn . The CIP editor may also change the status to Deferred when no progress is being made on the CIP. A CIP may only change status from Draft (or Rejected ) to Proposed , when the author deems it is complete, has a working implementation (where applicable), and has community plans to progress it to the Final status. CIPs should be changed from Draft or Proposed status, to Rejected status, upon request by any person, if they have not made progress in three years. Such a CIP may be changed to Draft status if the author provides revisions that meaningfully address public criticism of the proposal, or to Proposed status if it meets the criteria required as described in the previous paragraph. An Proposed CIP may progress to Final only when specific criteria reflecting real-world adoption has occurred. This is different for each CIP depending on the nature of its proposed changes, which will be expanded on below. Evaluation of this status change should be objectively verifiable, and/or be discussed on the development channel(s). When a Final CIP is no longer relevant, its status may be changed to Replaced or Obsolete (which is equivalent to Replaced ). This change must also be objectively verifiable and/or discussed. A process CIP may change status from Draft to Active when it achieves rough consensus on the mailing list. Such a proposal is said to have rough consensus if it has been open to discussion on the development channel(s)for at least one month, and no person maintains any unaddressed substantiated objections to it. Addressed or obstructive objections may be ignored/overruled by general agreement that they have been sufficiently addressed, but clear reasoning must be given in such circumstances. A soft-fork CIP strictly requires a clear miner majority expressed by blockchain voting (eg, using CIP 9). In addition, if the economy seems willing to make a \u201cno confidence\u201d hard-fork (such as a change in proof-of-work algorithm), the soft-fork does not become Final for as long as such a hard-fork might have majority support, or at most three months. Soft-fork CIPs may also set additional requirements for their adoption. Because of the possibility of changes to miner dynamics, especially in light of delegated voting (mining pools), it is highly recommended that a supermajority vote around 95% be required by the CIP itself, unless rationale is given for a lower threshold. A hard-fork CIP requires adoption from the entire Burstcoin economy, particularly including those selling desirable goods and services in exchange for bitcoin payments, as well as Burstcoin holders who wish to spend or would spend their bitcoins (including selling for other currencies) differently in the event of such a hard-fork. Adoption must be expressed by de facto usage of the hard-fork in practice (ie, not merely expressing public support, although that is a good step to establish agreement before adoption of the CIP). This economic adoption cannot be established merely by a super-majority, except by literally forcing the minority to accept the hard-fork (whether this is viable or not is outside the scope of this document). Peer services CIPs should be observed to be adopted by at least 1% of public listening nodes for one month. API/RPC and application layer CIPs must be implemented by at least two independent and compatible software applications. Software authors are encouraged to publish summaries of what CIPs their software supports to aid in verification of status changes. These criteria are considered objective ways to observe the de facto adoption of the CIP, and are not to be used as reasons to oppose or reject a CIP. Should a CIP become actually and unambiguously adopted despite not meeting the criteria outlined here, it should still be updated to Final status. -->","title":"CIP"},{"location":"en/cip/#capability-improvement-proposal","text":"Similar to the practice of BIPs and EIPs , the Burst community has established CIPs (short for \u201cCapability Improvement Proposal\u201d or even \u201cCoin Improvement Proposal\u201d) to advance further development of Burstcoin. So CIPs describe standards for the Burstcoin platform, including core protocol specifications, client APIs, and contract standards.","title":"Capability Improvement Proposal"},{"location":"en/cip/#abstract","text":"A (Burst)Coin or Capability Improvement Proposal (CIP) is a document providing information to the Burstcoin community, or describing a new feature for Burstcoin, its processes or environment. The CIP should provide a concise technical specification of the feature and a rationale for the feature. We intend CIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Burstcoin. The CIP author is responsible for building consensus within the community and documenting dissenting opinions. Because the CIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.","title":"Abstract"},{"location":"en/cip/#cip-workflow","text":"The CIP process begins with a new idea for Burstcoin. Each potential CIP must have an author -- someone who writes the CIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The CIP author should first attempt to ascertain whether the idea is CIP-able. Small enhancements or patches to a particular piece of software often don't require standardization between multiple projects; these don't need a CIP and should be injected into the relevant project-specific development workflow with a patch submission to the applicable issue tracker. Additionally, many ideas have been brought forward for changing Burstcoin that have been rejected for various reasons. The first step should be to search past discussions to see if an idea has been considered before, and if so, what issues arose in its progression. After investigating past work, the best way to proceed is by posting about the new idea to the Burstcoin Discord . Vetting an idea publicly before going as far as writing a CIP is meant to save both the potential author and the wider community time. Asking the Burstcoin community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Burstcoin is used. Once the author has asked the Burstcoin community as to whether an idea has any chance of acceptance, a draft CIP should be presented to the Burstcoin Discord . This gives the author a chance to flesh out the draft CIP to make it properly formatted, of high quality, and to address additional concerns about the proposal. Following a discussion, the proposal should be submitted to the CIPs repository . This draft must be written in CIP style as described below, and named with an alias such as \u201ccip-johndoe-infiniteburstcoins\u201d until an editor has assigned it a CIP number (authors MUST NOT self-assign CIP numbers). When the CIP draft is complete, the CIP editor will assign the CIP a number, label it as Standards Track, Informational, or Process. Once the CIP has been approved for draft inclusion by an editor (who must ensure that the above steps have been taken), the CIP will be merged with draft status, and the editor will open a new pull request to activate the CIP. This pull request will serve as the comments / discussion thread for the CIP and must remain open for a minimum of 30 days. Reasons for rejecting CIPs include duplication of effort, disregard for formatting rules, being too unfocused or too broad, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Burstcoin philosophy. It is highly recommended that a single CIP contain a single key proposal or new idea. The more focused the CIP, the more successful it tends to be. If in doubt, split your CIP into several well-focused ones. For a CIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.","title":"CIP workflow"},{"location":"en/cip/#transferring-cip-ownership","text":"It occasionally becomes necessary to transfer ownership of CIPs to a new author. In general, we'd like to retain the original author as a co-author of the transferred CIP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the CIP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the CIP. We try to build consensus around a CIP, but if that's not possible, you can always submit a competing CIP. If you are interested in assuming ownership of a CIP, send a message asking to take over, addressed to both the original author and the CIP editor. If the original author doesn't respond to email in a timely manner, the CIP editor will make a unilateral decision (it's not like such decisions can't be reversed :).","title":"Transferring CIP Ownership"},{"location":"en/cip/#cip-editors","text":"The current CIP editors can be contacted on Discord.","title":"CIP Editors"},{"location":"en/cip/#cip-editor-responsibilities-workflow","text":"The CIP editor is present in the Burst Discord channel. For each new CIP that comes in an editor does the following: Read the CIP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted. The title should accurately describe the content. A link to the CIP draft must have been sent to the Burst Discord channel for discussion. Motivation and backward compatibility (when applicable) must be addressed. The defined Layer header must be correctly assigned for the given specification. Licensing terms must be acceptable for CIPs. If the CIP isn't ready, the editor will send it back to the author for revision, with specific instructions. Once the CIP is ready for the repository it should be submitted to the CIPs repository where it may get further feedback. The CIP editor will: Assign a CIP number. Move the CIP to its final Wiki name when it is ready. The CIP editors are intended to fulfill administrative and editorial responsibilities. The CIP editors monitor CIP changes, and update CIP headers as appropriate.","title":"CIP Editor Responsibilities &amp; Workflow"},{"location":"en/cip/#cip-format-and-structure","text":"Specification CIPs must be written in markdown format. Each CIP should have the following parts: Preamble -- Headers containing metadata about the CIP (see below). Abstract -- A short (~200 word) description of the technical issue being addressed. Copyright -- As the CIPs are part of this Burstwiki project the license is GNU FDL. Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for different Burstcoin platforms. Motivation -- The motivation is critical for CIPs that want to change the Burstcoin protocol. It should clearly explain why the existing protocol is inadequate to address the problem that the CIP solves. Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work. The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. Backwards compatibility -- All CIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The CIP must explain how the author proposes to deal with these incompatibilities. Reference implementation -- The reference implementation must be completed before any CIP is given status \u201cFinal\u201d, but it need not be completed before the CIP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code. The final implementation must include test code and documentation appropriate for the Burstcoin protocol.","title":"CIP format and structure"},{"location":"en/cip/#cip-header-preamble","text":"Each CIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with \u201c*\u201d are optional and are described below. All other headers are required. CIP: <CIP number, or \"?\" before being assigned> * Layer: <Consensus (soft fork) | Consensus (hard fork) | Peer Services | API/RPC | Applications> Title: <CIP title; maximum 44 characters> Author: <list of author names or known community handles> * Discussions-To: <email address> * Comments-Summary: <summary tone> Comments-URI: <links to wiki page for comments> Status: <Draft | Active | Proposed | Deferred | Rejected | Withdrawn | Final | Replaced | Obsolete> Type: <Standards Track | Informational | Process> Created: <date created on, in ISO 8601 (yyyy-mm-dd) format> License: <abbreviation for approved license(s)> * License-Code: <abbreviation for code under different approved license(s)> * Post-History: <dates of postings to bitcoin mailing list, or link to thread in mailing list archive> * Requires: <CIP number(s)> * Replaces: <CIP number> * Superseded-By: <CIP number> The Layer header (only for Standards Track CIPs) documents which layer of Burstcoin the CIP applies to. The Author header lists the names and email addresses of all the authors/owners of the CIP. The format of the Author header value must be Random J. User <address@dom.ain> If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions. While a CIP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the CIP is being discussed. No Discussions-To header is necessary if the CIP is being discussed privately with the author, or on the bitcoin email mailing lists. The Type header specifies the type of CIP: Standards Track, Informational, or Process. The Created header records the date that the CIP was assigned a number, while Post-History is used to record when new versions of the CIP are posted to bitcoin mailing lists. Dates should be in yyyy-mm-dd format, e.g. 2001-08-14. Post-History is permitted to be a link to a specific thread in a mailing list archive. CIPs may have a Requires header, indicating the CIP numbers that this CIP depends on. CIPs may also have a Superseded-By header indicating that a CIP has been rendered obsolete by a later document; the value is the number of the CIP that replaces the current document. The newer CIP must have a Replaces header containing the number of the CIP that it rendered obsolete.","title":"CIP header preamble"},{"location":"en/cip/#auxiliary-files","text":"CIPs may include auxiliary files such as diagrams. Auxiliary files should be included in a subdirectory for that CIP.","title":"Auxiliary Files"},{"location":"en/cip/#cip-types","text":"There are three kinds of CIP: A Standards Track CIP describes any change that affects most or all Burstcoin implementations, such as a change to the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Burstcoin. Standards Track CIPs consist of two parts, a design document and a reference implementation. An Informational CIP describes a Burstcoin design issue, or provides general guidelines or information to the Burstcoin community, but does not propose a new feature. Informational CIPs do not necessarily represent a Burstcoin community consensus or recommendation, so users and implementors are free to ignore Informational CIPs or follow their advice. A Process CIP describes a process surrounding Burstcoin, or proposes a change to (or an event in) a process. Process CIPs are like Standards Track CIPs but apply to areas other than the Burstcoin protocol itself. They may propose an implementation, but not to Burstcoin's codebase; they often require community consensus; unlike Informational CIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Burstcoin development. Any meta-CIP is also considered a Process CIP.","title":"CIP types"},{"location":"en/cip/#cip-status-field","text":"","title":"CIP status field"},{"location":"en/cip/#specification","text":"The typical paths of the status of CIPs are in the CIP Workflow diagram. Authors of a CIP may decide on their own to change the status between Draft , Deferred , or Withdrawn . The CIP editor may also change the status to Deferred when no progress is being made on the CIP. A CIP may only change status from Draft (or Rejected ) to Proposed , when the author deems it is complete, has a working implementation (where applicable), and has community plans to progress it to the Final status. CIPs should be changed from Draft or Proposed status, to Rejected status, upon request by any person, if they have not made progress in three years. Such a CIP may be changed to Draft status if the author provides revisions that meaningfully address public criticism of the proposal, or to Proposed status if it meets the criteria required as described in the previous paragraph. An Proposed CIP may progress to Final only when specific criteria reflecting real-world adoption has occurred. This is different for each CIP depending on the nature of its proposed changes, which will be expanded on below. Evaluation of this status change should be objectively verifiable, and/or be discussed on the development channel(s). When a Final CIP is no longer relevant, its status may be changed to Replaced or Obsolete (which is equivalent to Replaced ). This change must also be objectively verifiable and/or discussed. A process CIP may change status from Draft to Active when it achieves rough consensus on the mailing list. Such a proposal is said to have rough consensus if it has been open to discussion on the development channel(s)for at least one month, and no person maintains any unaddressed substantiated objections to it. Addressed or obstructive objections may be ignored/overruled by general agreement that they have been sufficiently addressed, but clear reasoning must be given in such circumstances. A soft-fork CIP strictly requires a clear miner majority expressed by blockchain voting (eg, using CIP 9). In addition, if the economy seems willing to make a \u201cno confidence\u201d hard-fork (such as a change in proof-of-work algorithm), the soft-fork does not become Final for as long as such a hard-fork might have majority support, or at most three months. Soft-fork CIPs may also set additional requirements for their adoption. Because of the possibility of changes to miner dynamics, especially in light of delegated voting (mining pools), it is highly recommended that a supermajority vote around 95% be required by the CIP itself, unless rationale is given for a lower threshold. A hard-fork CIP requires adoption from the entire Burstcoin economy, particularly including those selling desirable goods and services in exchange for bitcoin payments, as well as Burstcoin holders who wish to spend or would spend their bitcoins (including selling for other currencies) differently in the event of such a hard-fork. Adoption must be expressed by de facto usage of the hard-fork in practice (ie, not merely expressing public support, although that is a good step to establish agreement before adoption of the CIP). This economic adoption cannot be established merely by a super-majority, except by literally forcing the minority to accept the hard-fork (whether this is viable or not is outside the scope of this document). Peer services CIPs should be observed to be adopted by at least 1% of public listening nodes for one month. API/RPC and application layer CIPs must be implemented by at least two independent and compatible software applications. Software authors are encouraged to publish summaries of what CIPs their software supports to aid in verification of status changes. These criteria are considered objective ways to observe the de facto adoption of the CIP, and are not to be used as reasons to oppose or reject a CIP. Should a CIP become actually and unambiguously adopted despite not meeting the criteria outlined here, it should still be updated to Final status. -->","title":"Specification"},{"location":"en/colored-coins/","text":"Introduction For an excellent white paper on the concept of Colored Coins, as written for the Bitcoin project, see https://bitcoil.co.il/BitcoinX.pdf Colored coins are a method to track the origin of Burst coins, so that a certain set of coins can be set aside and conserved, allowing a party to acknowledge them in various ways. Such coins can be used to represent arbitrary digital tokens, such as stocks, bonds, smart property and so on. They can even represent real-world objects. When a coin is \u201ccolored\u201d, it can be traded on the Burst network just like any other coin in the system. This will allow BURST to be exchanged for whatever object the colored coin represents. This concept forms the basis for the Burst Asset Exchange .","title":"Colored Coins"},{"location":"en/colored-coins/#introduction","text":"For an excellent white paper on the concept of Colored Coins, as written for the Bitcoin project, see https://bitcoil.co.il/BitcoinX.pdf Colored coins are a method to track the origin of Burst coins, so that a certain set of coins can be set aside and conserved, allowing a party to acknowledge them in various ways. Such coins can be used to represent arbitrary digital tokens, such as stocks, bonds, smart property and so on. They can even represent real-world objects. When a coin is \u201ccolored\u201d, it can be traded on the Burst network just like any other coin in the system. This will allow BURST to be exchanged for whatever object the colored coin represents. This concept forms the basis for the Burst Asset Exchange .","title":"Introduction"},{"location":"en/engraver-how-to-compile-from-source/","text":"Introduction Engraver is the reference Burstcoin (or Burst) cross-platform plotting software, endorsed by the PoC Consortium, created to further improve and optimize Burst plot file creation. The following steps are to install Engraver 2.2.0 by compiling from source on a fresh installation of Debian Linux version 9 \u201cStretch\u201d . Please be sure to check Git Repository for the latest release before proceeding. Note: Commands to be entered into the shell will be formatted in bold text, e.g.: date example command outputs will not be bold, e.g.: Wed 28 Nov 12:02:18 GMT 2018 Prerequisites Before you begin the installation, the following packages need to be installed: curl git build-essential Change to root user: su Enter root password Install curl, git and build essential packages: apt install curl git build-essential -y Once the above packages have completed installation, its time to install Rust. Installing Rust (stable) To install Rust, run the following command: curl https://sh.rustup.rs -sSf | sh You will be presented with three options (see below): Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: stable modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation > Chose option 1 to install Once installation is complete, follow the instructions to configure your current terminal sessions' environment variable so that you can run Rust related commands: source $HOME/.cargo/env To confirm the instalation of the correct channel of Rust, type the following: rustc --version This should give you the output below: rustc 1.31.0 (abe02cefd 2018-12-04) Obtaining the source files To download the source files from the Git repository, run the following command, (please make sure to check the exact path to the latest version) : git clone https://github.com/PoC-Consortium/engraver This will download and extract the files to the engraver sub directory (from where your present working directory is) Compiling the source files Navigate to the engraver directory: cd engraver build the application: cargo build --release Running Engraver Once the above has completed, navigate to the executable: cd /target/release From here you can run engraver and begin plotting. Example command: ./engraver --n 1000 --id 12345678912345678912 --path /home/burst/Burst --sn 0 To understand the complete range of flags/options available for the engraver application, please read the Wiki page on GitHub. Video Instruction","title":"Engraver - How to compile from source"},{"location":"en/engraver-how-to-compile-from-source/#introduction","text":"Engraver is the reference Burstcoin (or Burst) cross-platform plotting software, endorsed by the PoC Consortium, created to further improve and optimize Burst plot file creation. The following steps are to install Engraver 2.2.0 by compiling from source on a fresh installation of Debian Linux version 9 \u201cStretch\u201d . Please be sure to check Git Repository for the latest release before proceeding. Note: Commands to be entered into the shell will be formatted in bold text, e.g.: date example command outputs will not be bold, e.g.: Wed 28 Nov 12:02:18 GMT 2018","title":"Introduction"},{"location":"en/engraver-how-to-compile-from-source/#prerequisites","text":"Before you begin the installation, the following packages need to be installed: curl git build-essential Change to root user: su Enter root password Install curl, git and build essential packages: apt install curl git build-essential -y Once the above packages have completed installation, its time to install Rust.","title":"Prerequisites"},{"location":"en/engraver-how-to-compile-from-source/#installing-rust-stable","text":"To install Rust, run the following command: curl https://sh.rustup.rs -sSf | sh You will be presented with three options (see below): Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: stable modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation > Chose option 1 to install Once installation is complete, follow the instructions to configure your current terminal sessions' environment variable so that you can run Rust related commands: source $HOME/.cargo/env To confirm the instalation of the correct channel of Rust, type the following: rustc --version This should give you the output below: rustc 1.31.0 (abe02cefd 2018-12-04)","title":"Installing Rust (stable)"},{"location":"en/engraver-how-to-compile-from-source/#obtaining-the-source-files","text":"To download the source files from the Git repository, run the following command, (please make sure to check the exact path to the latest version) : git clone https://github.com/PoC-Consortium/engraver This will download and extract the files to the engraver sub directory (from where your present working directory is)","title":"Obtaining the source files"},{"location":"en/engraver-how-to-compile-from-source/#compiling-the-source-files","text":"Navigate to the engraver directory: cd engraver build the application: cargo build --release","title":"Compiling the source files"},{"location":"en/engraver-how-to-compile-from-source/#running-engraver","text":"Once the above has completed, navigate to the executable: cd /target/release From here you can run engraver and begin plotting. Example command: ./engraver --n 1000 --id 12345678912345678912 --path /home/burst/Burst --sn 0 To understand the complete range of flags/options available for the engraver application, please read the Wiki page on GitHub.","title":"Running Engraver"},{"location":"en/engraver-how-to-compile-from-source/#video-instruction","text":"","title":"Video Instruction"},{"location":"en/exchanges/","text":"Exchanges currently trading Burst Burst can be traded on the following exchanges against the given other currencies: Name Currencies HF1 Support SODIUM HF Support Bittrex BTC Confirmed TBC eterbase EUR / USDT / BTC / ETH / EBASE / XBASE / XBASE-B Confirmed TBC UPbit BTC Confirmed TBC Livecoin BTC Confirmed TBC STEX BTC Confirmed TBC BTDEX Crypto / Fiat Currencies Confirmed TBC (*) Attention! Bittrex requires the target address to have a public key activated on the blockchain before they will send send coins. Activating a public key on the block chain usually requires having made an outgoing transaction from the target address. If you do not have BURST to make that outgoing transaction (vicious circle - right?), simply look for a faucet or ASK someone for a few. See FAQ 1 . Information for Exchanges to List Burstcoin https://www.burst-coin.org/information-for-exchanges References https://www.burst-coin.org/exchanges https://coinmarketcap.com/currencies/burst/#markets https://burstcoin.ist/2019/10/15/burst-now-listed-on-eterbase/","title":"Exchanges"},{"location":"en/exchanges/#exchanges-currently-trading-burst","text":"Burst can be traded on the following exchanges against the given other currencies: Name Currencies HF1 Support SODIUM HF Support Bittrex BTC Confirmed TBC eterbase EUR / USDT / BTC / ETH / EBASE / XBASE / XBASE-B Confirmed TBC UPbit BTC Confirmed TBC Livecoin BTC Confirmed TBC STEX BTC Confirmed TBC BTDEX Crypto / Fiat Currencies Confirmed TBC (*) Attention! Bittrex requires the target address to have a public key activated on the blockchain before they will send send coins. Activating a public key on the block chain usually requires having made an outgoing transaction from the target address. If you do not have BURST to make that outgoing transaction (vicious circle - right?), simply look for a faucet or ASK someone for a few. See FAQ 1 .","title":"Exchanges currently trading Burst"},{"location":"en/exchanges/#information-for-exchanges-to-list-burstcoin","text":"https://www.burst-coin.org/information-for-exchanges","title":"Information for Exchanges to List Burstcoin"},{"location":"en/exchanges/#references","text":"https://www.burst-coin.org/exchanges https://coinmarketcap.com/currencies/burst/#markets https://burstcoin.ist/2019/10/15/burst-now-listed-on-eterbase/","title":"References"},{"location":"en/faq/","text":"What is Burst? Burst is a cryptocurrency and a blockchain platform with multiple core-level features that has been running publicly since August 2014. It is a fork of Nxt and uses the Proof of Capacity (PoC) consensus algorithm exclusively. Burst can be mined using regular computer hardware and spare hard drive space. The more hard drive space assigned to Burst mining, the higher the chances of earning block rewards. Unlike the Proof-of-Work (PoW) consensus algorithm, which needlessly wastes energy, Proof-of-Capacity uses minimal computational resources beyond that required for initial setup. A full node can run on something as light as a Raspberry Pi. There will be a total of 2,158,812,800 Burst coins in existence when mining ends around the year 2033. An informative and fast paced video introduction to Burst is located here: General Questions How can I obtain burst to cover my initial transaction fee? Request the amount necessary to get started in one of the community forums or pool operated faucets: The current amount needed is .00735 Burst. With this amount, you can set the reward recipient on your account (if you will be Burst mining), or set the name on your account (if you will not be Burst mining). Either option will create an outbound transaction that will secure your new account by activating your public key on the blockchain. When you are able, return the burst that you have received, or pay it forward by assisting a new member to get started as well. Congratulations in advance and welcome to the Burst community. Burst Forums: https://discordapp.com/invite/RPhpjVv https://forums.getburst.net/c/new-members-introductions/getting-started-initial-burstcoin-requests https://www.reddit.com/r/burstcoinmining/comments/903gq6/initial_burstcoin_requests/ Burst Faucets: List of Faucets How can I resolve difficulty transferring coins to and from Bittrex? Bittrex will only transfer to accounts which are active on the blockchain with a public key. Bittrex requires every deposit to include an un-encrypted message indicating which account is to be credited. Burst encrypts messages by default. If you did not deselect the encryption box, or did not include the required message, contact Bittrex support with all of the details and eventually they will credit your account. It is important to follow instructions carefully and to fully understand what you are doing at all times as it is possible to loose coins due to inadvertent errors such as this. Where can I buy, sell, or trade Burst for other coins, tokens, or fiat currencies? A list of exchanges is maintained at https://www.burst-coin.org/exchanges . Direct Fiat-to-Burst purchases are currently available on indacoin.com. Please note: Not all exchanges listed operate in every country. For example, Indacoin does not operate in the United States. One option for individuals in the United States is to purchase Bitcoin from Coinbase, transfer the Bitcoin to Bittrex, and convert the Bitcoin to Burst using a market order. What is the minimum transaction fee? Minimum transaction fees were recently reduced with the pre-Dymaxion hard fork. The fee structure is now dynamic with pricing tiers that include cheap, standard, and priority. This fee structure will allow transactions to be prioritized in times of heavy volume. The minimum transaction fee is now .007535 burst. Security Questions Should I store my Burst in an offline wallet, online wallet, or on an exchange? This is a personal choice that should be made with the security in mind as there are benefits to each depending on your circumstances. If you are not absolutely certain that your computer or other devices are safe from hackers, key stroke loggers, etc., it is safest to leave your coins on a reputable exchange with two factor authentication activated. Two factor authentication requires a secondary method to identify yourself. For example, you may be required to enter a pin number that is text messaged to you when log in or before making a transfer. This protects your coins if your exchange password is ever compromised. Local wallets can be a safe option if your computer and passphrase is secure. If you decide to use an online wallet, the reputation on the provider is very important. You might maintain the majority of your holdings in a local wallet for cold storage, a few coins on an exchange for trading, and another amount in an online wallet for convenience. There is no limit on the number of wallets you can maintain. Are the system generated 12 word passphrases secure? These have been designed to be secure. It has been estimated that a systematic attack testing all possible combinations of words from the selection set (dictionary) against an account (known as a brute force attack) would require 13,537,856,339,904,134,474,012,675,034 years to be successful. While the system generated passphrase is secure, many users adjust the passphrase by adding an element of complexity (entropy) such as special characters, numbers, capitalization, or a few extra words in a foreign language. These and other modifications to increase complexity are permitted and will not adversely affect the operation of your wallet. They may even provide a degree of psychological comfort. For more information, see the following analysis: https://burstforum.net/topic/4766/the-canary-burst-early-warning-system What other security measures can I take to keep my coins safe? Before transferring coins to a new wallet, verify your passphrase by signing in and out of your wallet until you are comfortable that your record of the passphrase is accurate. Keep at least two copies of your passphrase in separate locations. Do not disclose your passphrase to anyone who cannot absolutely be trusted with it. Will your passphrase still be available to you if your computer is stolen, after a natural disaster, or to your estate or other trusted individual if this should be necessary? Your passphrase is your only access to your Burst assets. Depending on the value of your account, extraordinary measures should be employed to protect it. Your security plan might include multiple wallets, one or more for cold storage, one or more for convenience, and another for special activities such as mining or operating a full node. Community and Organization Questions Why does the development team choose to remain anonymous? Each member of the development team operates with varying and self-selected degrees of anonymity while remaining accessible and approachable through public forums and other methods of communication. The development team is comprised of highly skilled individuals that have demonstrated leadership for the Burst community and have produced results that are readily observable from the advanced state and success of Burst today. The development team is not immutable in its constituency as its membership changes from time to time as development needs are identified and met. Some members will move on to other projects and interests. Each is invested in the success of Burst and works for the community without remuneration or other advantage, each seeking to maximize the value of burst, and as a direct result, the value of their individual portfolios acquired through market based arm\u2019s length transactions. The degree to which an individual member of the development team chooses to remain anonymous is a personal choice considering their individual desire for privacy, limits to their engagement, and security concerns. The best way to reach the development team is to post a comment in one of the public forums. Does Burst partner with 3rd parties and businesses? Who should I contact? Burst is a currency with a robust platform that is attractive to many businesses for a variety of use cases. In the sense that Burst is a currency, it cannot have partners. In the sense that Burst is a platform with a public blockchain, the Burst community, through its current leadership team, seeks to maximize Burst\u2019s value to businesses and 3rd parties in the same way that it does for individual community members. From time to time, there will be joint development processes in place assisting businesses who join the burst community. In this context, the word \u201cpartnership\u201d is useful and does not imply that burst will constrain itself to the interest of any third party. The development team will engage in mutually beneficial cooperation with 3rd parties when doing so is understood to maximize the value and utility of burst. The burst development team greatly values those who contribute to Burst by adopting its public platform to address their internal public blockchain needs. How can I contribute to the success of Burst and the Burst community? Run a local wallet as a public node to assist with network growth and synchronization. If you are a programmer, contact the development team on discord to offer project assistance in the area of your expertise. Raise awareness whenever you can without engaging in the practice known as \u2018shilling\u2019. Help translate burst materials into your local or 2nd language (Esperanto?). Learn to assist others who will be getting started and will have the same type of questions related to Burst that you do. How can I follow development progress and general news about the community? Subcribe to The Burstcoinist, a weekly summary newsletter related to these topics. For an informative history of Burst development, take the time to read the first issue and each subsequent issue in chronological order. As they say, \u201cit\u2019s a good read\u201d. The Burstcoinist newsletter is located here: https://www.burstcoin.ist/ What are the official websites, forums, and other official Burst resources? Main website: https://www.burst-coin.org/ Discord: https://discordapp.com/invite/RPhpjVv Reddit: https://www.reddit.com/r/burst Burstforum forum: https://www.burstforum.net/ Getburst forum: https://forums.getburst.net/ Facebook channel: https://m.facebook.com/groups/398967360565392 Other ways to talk to the community: Telegram (General): https://t.me/burstcoin Telegram (Mining): https://t.me/BurstCoinMining If you know of others, please direct message me on discord (decrescendo) for inclusion. Are there resources available in languages other than English? Yes, some resources have been developed and others are in progress. Translation assistance is always needed to make Burst more accessible to communities throughout the world. Telegram: Spanish: https://t.me/burstcoin_es German: https://t.me/Burstcoinde Italian: https://t.me/BurstCoinItalia Forum: Spanish: https://burst-coin.es/index.php/forum/index Discord: Spanish: https://discordapp.com/invite/RaaGna9 Bulgarian: https://discord.gg/r4uzTd If you know of others, please direct message me on discord (decrescendo) for inclusion. Translation assistance is always needed in providing Burst resources in other languages. Roadmap Questions Does Burst have a roadmap? Yes, the roadmap is located here: https://www.burst-coin.org/roadmap What is the Dymaxion? The Dymaxion white paper is located here: https://dymaxion.burst.cryptoguru.org/ A less technical treatise on the subject is located here: https://www.burstcoin.ist/2017/12/27/the-dymaxion-explained-in-laymans-terms/ I have a great idea for Burst, how should I proceed? Great ideas are always welcome! Please submit your idea to the development team on Burst\u2019s discord channel located here: https://discordapp.com/invite/RPhpjVv . Post in #technical-discussion, #marketing, #general or other section as applicable. Please understand that the Burst community extends across every time zone so not all community members are available at all times. If your idea has merit, you will likely be contacted by a more senior member of the community or the development team for more information. Many ideas that may be new to you will have already been discussed by the community in the past. Some have been thoroughly evaluated and Burst has moved permanently in a different direction. As an example, any variation on the theme of incorporating \u201cproof-of-stake\u201d has been determined to be opposed to Burst\u2019s commitment to the \"proof of capacity\" consensus algorithm. Will the Development team burn any coins? No. Burst was not introduced with an ICO (initial coin offering) so there are no remaining undistributed coins to be \u201cburned\u201d in that sense. Each coin in existence was mined individually starting with the genesis block reward. While it is possible to \u201cburn\u201d a coin by sending it to an account for which there is no access, there are no plans to reduce the number of coins in circulation by doing so. If any coins are \u201cburned\u201d by anyone, this could only be done by an individual \u201cburning\u201d personal coins that have been acquired for this purpose at market rate and in an arm\u2019s length transaction. The development team recently considered the number of coins in circulation and the lowest available denomination (referred to as a Planck) and determined that these amounts are ideal and will not constrain universal adoption if that is to be the future of Burst. Wallet and Software Questions When will there be an IOS wallet? An IOS wallet has been developed. However, Apple has not yet approved it for distribution through the Apple store. Which local, online, or mobile wallet should I use? For Windows, Mac, Android, and Linux, the recommended wallets can be downloaded here: https://www.burst-coin.org/download-wallet . Windows users can download Qbundle , a package that installs the BRS wallet and related software with just a few clicks) What should I do if QBundle will not start? Click on settings, Java, verify that \u201cportable java\u201d has been selected. Did this solve the problem? If you have just upgraded your wallet to a new version, close the wallet completely, reopen, and restart. Did this solve the problem? If your wallet is using the H2 database, you can likely resolve this issue by changing the database type to portable MariaDB. Select \u2018Database\u2019, \u2018change database\u2019, 'portable MariaDB', and click 'Next'. This will require a re-synchronization of the blockchain from the genesis block and may take a significant amount of time. (See FAQ 10) What should I do if Qbundle starts but will not completely synchronize? This is a new answer and is not fully vetted. If you are syncing the wallet for the first time, there may have been a drop in your connection. Restart the wallet. If the wallet appears to be syncing from and earlier time, wait for a few minutes and restart the wallet again. If wallet does not appear to be back on track, click on \"wallet\", click on \"Rolback chain (Popoff), select a number of blocks (use the recommended amount), and click \"rollback\". Did this resolve the issue? Why does my balance appear to be incorrect when I log into my account? Synchronization with the blockchain occurs each time a wallet is opened. Until synchronization is complete, older balances will be displayed. If, after synchronization has completed, the balance still appears to be incorrect, verify that you have entered the correct passphrase into the correct account. If you have copied and pasted your passphrase, verify that you have not inadvertently copied an extra space before or after the passphrase. At this point any difference between the displayed balance and the perceived correct balance should be reconcilable by reviewing recent transactions. Is there a faster way to synchronize the blockchain? It is recommended that you use portable MariaDB rather than H2. If you have not done so already, you can make the change at any time, but it can time consuming. Regarding a faster download method, in the Qbundle wallet, select \u2018Database\u2019, \u2018Import database\u2019. Verify that the \u2018CryptoGuru repository\u2019 is selected, and then \u2018start import\u2019. This will download a relatively fast and up-to-date copy of the blockchain in a process referred to as \u2018boot strapping\u2019. When complete, the most recent blocks will be updated automatically using regular peer to peer synchronization. How can I set up a node? All wallets operate as public nodes by default while open. It may be necessary to open port 8123 on your internet router in order for your wallet to function as such. Running a public node continuously (24/7) is one of the most important and easiest ways you can contribute to the burst community. You can verify that your public node is operating as follows: Copy the following link: https://explore.burst.cryptoguru.org/peer/XXX:8123 In your browser, replace the \u201cX\u201ds with your external IP address and then refresh the link. (If you do not know your ip address, type \"what is my ip address\" into google). The results will inform you of your public node status. If your public node is not recognized after a period of time, it may be that your 8123 is closed. An easy way to check this is to visit http:ismyportopen.com . Opening port 8123 may require access to your internet router's settings. As each router may be different, you can check for advice on one of the forums or contact your ISP (internet service provider) for assistance. A common username for many routers is \u201cadmin\u201d with a password of \u201cadmin\u201d. Exchange Information and Exchange Rate Questions When will Burst be listed on a particular exchange? Exchanges will occasionally list a coin upon client request. Some exchanges require a listing fee. These fees are often exorbitant. You can request that Burst be listed on your favorite exchange by contacting them and providing details such as the information found here: https://www.burst-coin.org/information-for-exchanges The fee currently being requested by Binance is too large. At some time in the future, the fee may be reduced, the perceived benefit may be increased, or Binance may decide to list Burst in order to remain competitive with the growing cadre of exchanges continually entering the market. Binance is a favorite exchange for many, and we look forward to an eventual listing when the conditions are more favorable. When will the value of Burst increase? Burst development is focused on refining Burst\u2019s fundamentally sound and unique technology rather than short term gains or the day to day exchange rate. It is anticipated that exchange rates will increase when the value of its underlying technology is more fully recognized. With this recognition will come greater adoption, and with greater adoption will come increasing exchange rates. Much attention is given to the environmental disaster that accompanies the PoW (proof of work) consensus algorithm that is the darling of Bitcoin and so many altcoins. Because Burst was the first (and currently only) cryptocurrency in existence that has adopted the environmentally friendly PoC (proof of capacity) consensus algorithm, greater awareness and appreciation of this distinction will almost certainly lead to increasing exchange rates over time. Mining General Questions How profitable is mining Burst? Many people mine Burst as a service to the community without regard to profitability, just as they might run a 24/7 public node. All of these activities contribute to the stability and continued decentralization of Burst. Burst mining is incredibly inexpensive however, and can also be profitable, especially considering the potential for upward price movement in the future. It is actually quite fun and provides a sense accomplishment when you get your mining operation working just so. The following calculator gives you an average expected earnings over time: (assumes 100% up time, average luck, no overlapping plot files, a good scan time, etc.) https://explore.burst.cryptoguru.org/tool/calculate What is difference between \u2018solo\u2019 and \u2018pool\u2019 mining? With \u201csolo\u201d mining your software submits mining results (deadlines) in direct competition for the lowest deadline value against all other \u201csolo\u201d and \u201cpool\u201d miners. With this setup you receive the entire block reward. However, the rewards can be infrequent depending on the cumulative size of your plot files. With \u201cpool\u201d mining, you join forces with other miners and share block rewards earned by the pool. With \u201cpool\u201d mining you can expect smaller payouts per block but will receive these payouts more frequently. Each pool divides rewards differently so you will want to evaluate each pool's reward distribution method to find one that is right for your mining setup. A pool generally has 2 basic numbers that denote pay-out method in the format \u2018XX-XX\u2019. The first number is the percent of the block reward that is paid to the miner submitting the winning deadline on behalf of the pool. The second is the percentage that is shared with other members of the pool. It is a common misconception that 0 - 100 pools are only intended for miners with up to 100 terabyte capacity. This is not the case, 0 - 100 signifies that all block rewards are shared by all of the miners. Do I have to leave my wallet open to continue mining No, if you are using Blago's miner, included with QBundle, once you have started mining, the miner is independent of your wallet. You can exit your wallet, or leave it running as desired. Other mining software should operate in this same way. If you are running a node however, the related wallet must remain open. Why is my wallet not reflecting any earning from mining. If you are mining solo, you may not have successfully forged a block. If your plot size is relatively small, you will have better luck mining with a pool. If you are already mining with a pool, check the pools distribution requirements. Because mining payments are subject to transaction fees, most pools require you to accumulate a certain amount of Burst before they will make a payout. Some pools make their payouts on a set schedule as well so your reward may simply not be payable yet. If you have only been mining for a short time, but long enough to have received a payment, it may be that you have entered an incorrect value in your reward recipient setting. How do I see what I have pending? For CryptoGuru based pools, there is a \u2018Pending (burst)\u2019 column. For other pools you will have to become familiar with their user interfaces. For most, you can look for you burst ID and locate the information that you need presented in a grid format. Review your pool's documentation or contact their support if necessary. When will block rewards end and the last coin be mined? Block rewards (although diminishing over time) will continue into 2026 when it is anticipated that the last coin will be mined. Transaction fees will continually increase during this time due to the expanding number of transactions that will be processed on the burst network. Mining profitability will slowly transition from being primarily based on block rewards to primarily based on transaction fees over this same period. Can I game while mining Burst? Some people have done so, but depending on the number of drives that you have in operation and how resource intensive your gaming is, you may experience degradation of performance at some point. With this level of resources at your disposal, you will likely have to experiment to see what works. Can I CPU mine Burst while GPU mining other coins? Yes. What is a \u2018plot\u2019? A plot is a file that contains the pre-computed hashes that are used to mine Burst. A plot is tied to an account, but they can be created (with the same account ID) on other machines and transferred back to your mining computer. It is a common strategy to plot hard drives using computers with faster CPUs or GPUs and then mine the disks using computers with slower CPUs. Why do overlapping plots matter? Having overlapping plots means that a portion of your drive has duplicate plot files. Plot your drives carefully to avoid this overlap. If you find that you have overlapping plot files and can identify them, it is best to re-plot these sections to assure best possible utilization of your available hard drive space. Overlap in your plot files will not cause a malfunction, but it will waste space that would otherwise be productive. Why is my effective capacity reported differently than my actual plot size? Effective capacity is calculated from the frequency and quality of your submitted deadlines. If you have only been mining for a few hours, it will take some additional time for your true capacity to be realized. Your effective capacity on pool will fluctuate (normally plus or minus 5% but sometimes up to 10%) Setting a maximum reported deadline on some pools will lead to a better calculation of your effective capacity. Revisit this setting periodically for best results. If you have overlapping plots, your effective capacity will be lower than expected. Why are my plots being corrupted when GPU mining Burst and other coins? It is recommended that you dedicate your GPU to either the task of plotting or to the task of mining rather than trying to do both at the same time. Plotting is by design a temporary activity. You should probably suspend mining until the task of plotting is complete. Why are my read times so slow? There are many reasons for this, if your computer is relatively modern, it may have both USB2 and USB3 hubs. The USB3 hub will provide better performance. For more advance mining information, such as building mining rigs, visit the mining subreddit. You will likely find more detailed information than can be provided in a simple FAQ. The mining subreddit is located here: https://www.reddit.com/r/burstcoinmining/ Where can I find additional mining information? Besides this FAQ, additional resources can be found at the following locations: Introduction to Burst Mining https://www.reddit.com/r/burstcoinmining/ https://t.me/BurstCoinMining Mining Hardware Questions What hardware is recommended? It depends on so many variables. Burst can be mined on consumer grade computers, even those that are several years old. It is likely than any mining configuration undertaken today will eventually be profitable as the value of Burst rises with further development, marketing, and wide scale adoption. If you want to build a Burst mining rig with capabilities beyond a basic system supporting the network and earning a few coins, you can get the latest recommendations from one of the community forums such as the Burst mining subreddit located here: https://www.reddit.com/r/burstcoinmining/ If I use SSDs (solid state drives) would I earn more? No. Because mining success is based approximately on 95% plot file capacity and only 5% related to the time it takes to read the plot files, and because SSDs are currently so much more expensive than regular drives, it is far more profitable to invest in regular drives with a lower cost per terabyte. A popular starting point is an external 8 Terabyte drive from Western Digital or Seagate. The difference in price between these drives and a more expensive SSD would be better invested in buying Burst directly from one of the exchanges. Is any particular model of hard drive better for mining? When given a choice between hard drives of the same capacity, the cheapest is usually best. Divide the cost by the number of terabytes to establish the cost per terabyte and go with the lower cost per terabyte option, assuming they are both covered by comparable warranties. 8 terabyte drives are currently the best value among the readily available consumer hard drives, but price differences do exist between different manufactures. Remember, you can start by using a portion of your existing computer\u2019s hard drive and add an additional external drive later. Why do some drives take longer to plot? SMR drives take a particularly long time to plot. If using an SMR drive, start by plotting onto an SSD and then move the plots to the SMR. This will make the process much faster. Plotting software with the capability to do this automatically has been developed and can be found in our list of plotting software . What is a good source for hard drives? Ebay is good source for previously owned drives, drives in job lots, and refurbished drives with short or no warranties. Amazon, Best Buy, Frys Electronics, and Micro Center are popular options for new drives depending on your geographic location. Any retail establishment that stocks hard drives is a good option if the price in competitive. Can I mine on NAS (network attached storage)? Technically yes, however, mileage may vary. Mining with NAS is generally slower as it is dependent on network speed between the NAS and the scanning computer. With a plot size over 8 \u2013 16 terabytes, the network speed might become an issue. Can I mine on Google drive or other cloud based storage? Maybe yes, but probably no. It may depends on your service level agreement. You may find yourself blocked for various reasons. This space changes from time to time so do research and report back if you find success. Some cloud based services have terms and conditions that specifically disallow cryptocurrency mining. Can I mine on multiple machines with the same account? Yes, but be prepared for small issues such as your effective plot size being reported incorrectly. Be sure that you do not have overlapping plot files. Mining Software Questions What mining software should I use? The Qbundle wallet includes Blago\u2019s miner which is commonly used for CPU mining. Other mining software has been developed, such as Creepsky and Scavenger, and is being used successfully. Check out the full list of mining software . Try them all out, and see which one gives you the best scan rate as they are all different, and perform differently on different hardware configurations.","title":"FAQ"},{"location":"en/faq/#what-is-burst","text":"Burst is a cryptocurrency and a blockchain platform with multiple core-level features that has been running publicly since August 2014. It is a fork of Nxt and uses the Proof of Capacity (PoC) consensus algorithm exclusively. Burst can be mined using regular computer hardware and spare hard drive space. The more hard drive space assigned to Burst mining, the higher the chances of earning block rewards. Unlike the Proof-of-Work (PoW) consensus algorithm, which needlessly wastes energy, Proof-of-Capacity uses minimal computational resources beyond that required for initial setup. A full node can run on something as light as a Raspberry Pi. There will be a total of 2,158,812,800 Burst coins in existence when mining ends around the year 2033. An informative and fast paced video introduction to Burst is located here:","title":"What is Burst?"},{"location":"en/faq/#general-questions","text":"","title":"General Questions"},{"location":"en/faq/#how-can-i-obtain-burst-to-cover-my-initial-transaction-fee","text":"Request the amount necessary to get started in one of the community forums or pool operated faucets: The current amount needed is .00735 Burst. With this amount, you can set the reward recipient on your account (if you will be Burst mining), or set the name on your account (if you will not be Burst mining). Either option will create an outbound transaction that will secure your new account by activating your public key on the blockchain. When you are able, return the burst that you have received, or pay it forward by assisting a new member to get started as well. Congratulations in advance and welcome to the Burst community. Burst Forums: https://discordapp.com/invite/RPhpjVv https://forums.getburst.net/c/new-members-introductions/getting-started-initial-burstcoin-requests https://www.reddit.com/r/burstcoinmining/comments/903gq6/initial_burstcoin_requests/ Burst Faucets: List of Faucets","title":"How can I obtain burst to cover my initial transaction fee?"},{"location":"en/faq/#how-can-i-resolve-difficulty-transferring-coins-to-and-from-bittrex","text":"Bittrex will only transfer to accounts which are active on the blockchain with a public key. Bittrex requires every deposit to include an un-encrypted message indicating which account is to be credited. Burst encrypts messages by default. If you did not deselect the encryption box, or did not include the required message, contact Bittrex support with all of the details and eventually they will credit your account. It is important to follow instructions carefully and to fully understand what you are doing at all times as it is possible to loose coins due to inadvertent errors such as this.","title":"How can I resolve difficulty transferring coins to and from Bittrex?"},{"location":"en/faq/#where-can-i-buy-sell-or-trade-burst-for-other-coins-tokens-or-fiat-currencies","text":"A list of exchanges is maintained at https://www.burst-coin.org/exchanges . Direct Fiat-to-Burst purchases are currently available on indacoin.com. Please note: Not all exchanges listed operate in every country. For example, Indacoin does not operate in the United States. One option for individuals in the United States is to purchase Bitcoin from Coinbase, transfer the Bitcoin to Bittrex, and convert the Bitcoin to Burst using a market order.","title":"Where can I buy, sell, or trade Burst for other coins, tokens, or fiat currencies?"},{"location":"en/faq/#what-is-the-minimum-transaction-fee","text":"Minimum transaction fees were recently reduced with the pre-Dymaxion hard fork. The fee structure is now dynamic with pricing tiers that include cheap, standard, and priority. This fee structure will allow transactions to be prioritized in times of heavy volume. The minimum transaction fee is now .007535 burst.","title":"What is the minimum transaction fee?"},{"location":"en/faq/#security-questions","text":"","title":"Security Questions"},{"location":"en/faq/#should-i-store-my-burst-in-an-offline-wallet-online-wallet-or-on-an-exchange","text":"This is a personal choice that should be made with the security in mind as there are benefits to each depending on your circumstances. If you are not absolutely certain that your computer or other devices are safe from hackers, key stroke loggers, etc., it is safest to leave your coins on a reputable exchange with two factor authentication activated. Two factor authentication requires a secondary method to identify yourself. For example, you may be required to enter a pin number that is text messaged to you when log in or before making a transfer. This protects your coins if your exchange password is ever compromised. Local wallets can be a safe option if your computer and passphrase is secure. If you decide to use an online wallet, the reputation on the provider is very important. You might maintain the majority of your holdings in a local wallet for cold storage, a few coins on an exchange for trading, and another amount in an online wallet for convenience. There is no limit on the number of wallets you can maintain.","title":"Should I store my Burst in an offline wallet, online wallet, or on an exchange?"},{"location":"en/faq/#are-the-system-generated-12-word-passphrases-secure","text":"These have been designed to be secure. It has been estimated that a systematic attack testing all possible combinations of words from the selection set (dictionary) against an account (known as a brute force attack) would require 13,537,856,339,904,134,474,012,675,034 years to be successful. While the system generated passphrase is secure, many users adjust the passphrase by adding an element of complexity (entropy) such as special characters, numbers, capitalization, or a few extra words in a foreign language. These and other modifications to increase complexity are permitted and will not adversely affect the operation of your wallet. They may even provide a degree of psychological comfort. For more information, see the following analysis: https://burstforum.net/topic/4766/the-canary-burst-early-warning-system","title":"Are the system generated 12 word passphrases secure?"},{"location":"en/faq/#what-other-security-measures-can-i-take-to-keep-my-coins-safe","text":"Before transferring coins to a new wallet, verify your passphrase by signing in and out of your wallet until you are comfortable that your record of the passphrase is accurate. Keep at least two copies of your passphrase in separate locations. Do not disclose your passphrase to anyone who cannot absolutely be trusted with it. Will your passphrase still be available to you if your computer is stolen, after a natural disaster, or to your estate or other trusted individual if this should be necessary? Your passphrase is your only access to your Burst assets. Depending on the value of your account, extraordinary measures should be employed to protect it. Your security plan might include multiple wallets, one or more for cold storage, one or more for convenience, and another for special activities such as mining or operating a full node.","title":"What other security measures can I take to keep my coins safe?"},{"location":"en/faq/#community-and-organization-questions","text":"","title":"Community and Organization Questions"},{"location":"en/faq/#why-does-the-development-team-choose-to-remain-anonymous","text":"Each member of the development team operates with varying and self-selected degrees of anonymity while remaining accessible and approachable through public forums and other methods of communication. The development team is comprised of highly skilled individuals that have demonstrated leadership for the Burst community and have produced results that are readily observable from the advanced state and success of Burst today. The development team is not immutable in its constituency as its membership changes from time to time as development needs are identified and met. Some members will move on to other projects and interests. Each is invested in the success of Burst and works for the community without remuneration or other advantage, each seeking to maximize the value of burst, and as a direct result, the value of their individual portfolios acquired through market based arm\u2019s length transactions. The degree to which an individual member of the development team chooses to remain anonymous is a personal choice considering their individual desire for privacy, limits to their engagement, and security concerns. The best way to reach the development team is to post a comment in one of the public forums.","title":"Why does the development team choose to remain anonymous?"},{"location":"en/faq/#does-burst-partner-with-3rd-parties-and-businesses-who-should-i-contact","text":"Burst is a currency with a robust platform that is attractive to many businesses for a variety of use cases. In the sense that Burst is a currency, it cannot have partners. In the sense that Burst is a platform with a public blockchain, the Burst community, through its current leadership team, seeks to maximize Burst\u2019s value to businesses and 3rd parties in the same way that it does for individual community members. From time to time, there will be joint development processes in place assisting businesses who join the burst community. In this context, the word \u201cpartnership\u201d is useful and does not imply that burst will constrain itself to the interest of any third party. The development team will engage in mutually beneficial cooperation with 3rd parties when doing so is understood to maximize the value and utility of burst. The burst development team greatly values those who contribute to Burst by adopting its public platform to address their internal public blockchain needs.","title":"Does Burst partner with 3rd parties and businesses? Who should I contact?"},{"location":"en/faq/#how-can-i-contribute-to-the-success-of-burst-and-the-burst-community","text":"Run a local wallet as a public node to assist with network growth and synchronization. If you are a programmer, contact the development team on discord to offer project assistance in the area of your expertise. Raise awareness whenever you can without engaging in the practice known as \u2018shilling\u2019. Help translate burst materials into your local or 2nd language (Esperanto?). Learn to assist others who will be getting started and will have the same type of questions related to Burst that you do.","title":"How can I contribute to the success of Burst and the Burst community?"},{"location":"en/faq/#how-can-i-follow-development-progress-and-general-news-about-the-community","text":"Subcribe to The Burstcoinist, a weekly summary newsletter related to these topics. For an informative history of Burst development, take the time to read the first issue and each subsequent issue in chronological order. As they say, \u201cit\u2019s a good read\u201d. The Burstcoinist newsletter is located here: https://www.burstcoin.ist/","title":"How can I follow development progress and general news about the community?"},{"location":"en/faq/#what-are-the-official-websites-forums-and-other-official-burst-resources","text":"Main website: https://www.burst-coin.org/ Discord: https://discordapp.com/invite/RPhpjVv Reddit: https://www.reddit.com/r/burst Burstforum forum: https://www.burstforum.net/ Getburst forum: https://forums.getburst.net/ Facebook channel: https://m.facebook.com/groups/398967360565392 Other ways to talk to the community: Telegram (General): https://t.me/burstcoin Telegram (Mining): https://t.me/BurstCoinMining If you know of others, please direct message me on discord (decrescendo) for inclusion.","title":"What are the official websites, forums, and other official Burst resources?"},{"location":"en/faq/#are-there-resources-available-in-languages-other-than-english","text":"Yes, some resources have been developed and others are in progress. Translation assistance is always needed to make Burst more accessible to communities throughout the world. Telegram: Spanish: https://t.me/burstcoin_es German: https://t.me/Burstcoinde Italian: https://t.me/BurstCoinItalia Forum: Spanish: https://burst-coin.es/index.php/forum/index Discord: Spanish: https://discordapp.com/invite/RaaGna9 Bulgarian: https://discord.gg/r4uzTd If you know of others, please direct message me on discord (decrescendo) for inclusion. Translation assistance is always needed in providing Burst resources in other languages.","title":"Are there resources available in languages other than English?"},{"location":"en/faq/#roadmap-questions","text":"","title":"Roadmap Questions"},{"location":"en/faq/#does-burst-have-a-roadmap","text":"Yes, the roadmap is located here: https://www.burst-coin.org/roadmap","title":"Does Burst have a roadmap?"},{"location":"en/faq/#what-is-the-dymaxion","text":"The Dymaxion white paper is located here: https://dymaxion.burst.cryptoguru.org/ A less technical treatise on the subject is located here: https://www.burstcoin.ist/2017/12/27/the-dymaxion-explained-in-laymans-terms/","title":"What is the Dymaxion?"},{"location":"en/faq/#i-have-a-great-idea-for-burst-how-should-i-proceed","text":"Great ideas are always welcome! Please submit your idea to the development team on Burst\u2019s discord channel located here: https://discordapp.com/invite/RPhpjVv . Post in #technical-discussion, #marketing, #general or other section as applicable. Please understand that the Burst community extends across every time zone so not all community members are available at all times. If your idea has merit, you will likely be contacted by a more senior member of the community or the development team for more information. Many ideas that may be new to you will have already been discussed by the community in the past. Some have been thoroughly evaluated and Burst has moved permanently in a different direction. As an example, any variation on the theme of incorporating \u201cproof-of-stake\u201d has been determined to be opposed to Burst\u2019s commitment to the \"proof of capacity\" consensus algorithm.","title":"I have a great idea for Burst, how should I proceed?"},{"location":"en/faq/#will-the-development-team-burn-any-coins","text":"No. Burst was not introduced with an ICO (initial coin offering) so there are no remaining undistributed coins to be \u201cburned\u201d in that sense. Each coin in existence was mined individually starting with the genesis block reward. While it is possible to \u201cburn\u201d a coin by sending it to an account for which there is no access, there are no plans to reduce the number of coins in circulation by doing so. If any coins are \u201cburned\u201d by anyone, this could only be done by an individual \u201cburning\u201d personal coins that have been acquired for this purpose at market rate and in an arm\u2019s length transaction. The development team recently considered the number of coins in circulation and the lowest available denomination (referred to as a Planck) and determined that these amounts are ideal and will not constrain universal adoption if that is to be the future of Burst.","title":"Will the Development team burn any coins?"},{"location":"en/faq/#wallet-and-software-questions","text":"","title":"Wallet and Software Questions"},{"location":"en/faq/#when-will-there-be-an-ios-wallet","text":"An IOS wallet has been developed. However, Apple has not yet approved it for distribution through the Apple store.","title":"When will there be an IOS wallet?"},{"location":"en/faq/#which-local-online-or-mobile-wallet-should-i-use","text":"For Windows, Mac, Android, and Linux, the recommended wallets can be downloaded here: https://www.burst-coin.org/download-wallet . Windows users can download Qbundle , a package that installs the BRS wallet and related software with just a few clicks)","title":"Which local, online, or mobile wallet should I use?"},{"location":"en/faq/#what-should-i-do-if-qbundle-will-not-start","text":"Click on settings, Java, verify that \u201cportable java\u201d has been selected. Did this solve the problem? If you have just upgraded your wallet to a new version, close the wallet completely, reopen, and restart. Did this solve the problem? If your wallet is using the H2 database, you can likely resolve this issue by changing the database type to portable MariaDB. Select \u2018Database\u2019, \u2018change database\u2019, 'portable MariaDB', and click 'Next'. This will require a re-synchronization of the blockchain from the genesis block and may take a significant amount of time. (See FAQ 10)","title":"What should I do if QBundle will not start?"},{"location":"en/faq/#what-should-i-do-if-qbundle-starts-but-will-not-completely-synchronize","text":"This is a new answer and is not fully vetted. If you are syncing the wallet for the first time, there may have been a drop in your connection. Restart the wallet. If the wallet appears to be syncing from and earlier time, wait for a few minutes and restart the wallet again. If wallet does not appear to be back on track, click on \"wallet\", click on \"Rolback chain (Popoff), select a number of blocks (use the recommended amount), and click \"rollback\". Did this resolve the issue?","title":"What should I do if Qbundle starts but will not completely synchronize?"},{"location":"en/faq/#why-does-my-balance-appear-to-be-incorrect-when-i-log-into-my-account","text":"Synchronization with the blockchain occurs each time a wallet is opened. Until synchronization is complete, older balances will be displayed. If, after synchronization has completed, the balance still appears to be incorrect, verify that you have entered the correct passphrase into the correct account. If you have copied and pasted your passphrase, verify that you have not inadvertently copied an extra space before or after the passphrase. At this point any difference between the displayed balance and the perceived correct balance should be reconcilable by reviewing recent transactions.","title":"Why does my balance appear to be incorrect when I log into my account?"},{"location":"en/faq/#is-there-a-faster-way-to-synchronize-the-blockchain","text":"It is recommended that you use portable MariaDB rather than H2. If you have not done so already, you can make the change at any time, but it can time consuming. Regarding a faster download method, in the Qbundle wallet, select \u2018Database\u2019, \u2018Import database\u2019. Verify that the \u2018CryptoGuru repository\u2019 is selected, and then \u2018start import\u2019. This will download a relatively fast and up-to-date copy of the blockchain in a process referred to as \u2018boot strapping\u2019. When complete, the most recent blocks will be updated automatically using regular peer to peer synchronization.","title":"Is there a faster way to synchronize the blockchain?"},{"location":"en/faq/#how-can-i-set-up-a-node","text":"All wallets operate as public nodes by default while open. It may be necessary to open port 8123 on your internet router in order for your wallet to function as such. Running a public node continuously (24/7) is one of the most important and easiest ways you can contribute to the burst community. You can verify that your public node is operating as follows: Copy the following link: https://explore.burst.cryptoguru.org/peer/XXX:8123 In your browser, replace the \u201cX\u201ds with your external IP address and then refresh the link. (If you do not know your ip address, type \"what is my ip address\" into google). The results will inform you of your public node status. If your public node is not recognized after a period of time, it may be that your 8123 is closed. An easy way to check this is to visit http:ismyportopen.com . Opening port 8123 may require access to your internet router's settings. As each router may be different, you can check for advice on one of the forums or contact your ISP (internet service provider) for assistance. A common username for many routers is \u201cadmin\u201d with a password of \u201cadmin\u201d.","title":"How can I set up a node?"},{"location":"en/faq/#exchange-information-and-exchange-rate-questions","text":"","title":"Exchange Information and Exchange Rate Questions"},{"location":"en/faq/#when-will-burst-be-listed-on-a-particular-exchange","text":"Exchanges will occasionally list a coin upon client request. Some exchanges require a listing fee. These fees are often exorbitant. You can request that Burst be listed on your favorite exchange by contacting them and providing details such as the information found here: https://www.burst-coin.org/information-for-exchanges The fee currently being requested by Binance is too large. At some time in the future, the fee may be reduced, the perceived benefit may be increased, or Binance may decide to list Burst in order to remain competitive with the growing cadre of exchanges continually entering the market. Binance is a favorite exchange for many, and we look forward to an eventual listing when the conditions are more favorable.","title":"When will Burst be listed on a particular exchange?"},{"location":"en/faq/#when-will-the-value-of-burst-increase","text":"Burst development is focused on refining Burst\u2019s fundamentally sound and unique technology rather than short term gains or the day to day exchange rate. It is anticipated that exchange rates will increase when the value of its underlying technology is more fully recognized. With this recognition will come greater adoption, and with greater adoption will come increasing exchange rates. Much attention is given to the environmental disaster that accompanies the PoW (proof of work) consensus algorithm that is the darling of Bitcoin and so many altcoins. Because Burst was the first (and currently only) cryptocurrency in existence that has adopted the environmentally friendly PoC (proof of capacity) consensus algorithm, greater awareness and appreciation of this distinction will almost certainly lead to increasing exchange rates over time.","title":"When will the value of Burst increase?"},{"location":"en/faq/#mining-general-questions","text":"","title":"Mining General Questions"},{"location":"en/faq/#how-profitable-is-mining-burst","text":"Many people mine Burst as a service to the community without regard to profitability, just as they might run a 24/7 public node. All of these activities contribute to the stability and continued decentralization of Burst. Burst mining is incredibly inexpensive however, and can also be profitable, especially considering the potential for upward price movement in the future. It is actually quite fun and provides a sense accomplishment when you get your mining operation working just so. The following calculator gives you an average expected earnings over time: (assumes 100% up time, average luck, no overlapping plot files, a good scan time, etc.) https://explore.burst.cryptoguru.org/tool/calculate","title":"How profitable is mining Burst?"},{"location":"en/faq/#what-is-difference-between-solo-and-pool-mining","text":"With \u201csolo\u201d mining your software submits mining results (deadlines) in direct competition for the lowest deadline value against all other \u201csolo\u201d and \u201cpool\u201d miners. With this setup you receive the entire block reward. However, the rewards can be infrequent depending on the cumulative size of your plot files. With \u201cpool\u201d mining, you join forces with other miners and share block rewards earned by the pool. With \u201cpool\u201d mining you can expect smaller payouts per block but will receive these payouts more frequently. Each pool divides rewards differently so you will want to evaluate each pool's reward distribution method to find one that is right for your mining setup. A pool generally has 2 basic numbers that denote pay-out method in the format \u2018XX-XX\u2019. The first number is the percent of the block reward that is paid to the miner submitting the winning deadline on behalf of the pool. The second is the percentage that is shared with other members of the pool. It is a common misconception that 0 - 100 pools are only intended for miners with up to 100 terabyte capacity. This is not the case, 0 - 100 signifies that all block rewards are shared by all of the miners.","title":"What is difference between \u2018solo\u2019 and \u2018pool\u2019 mining?"},{"location":"en/faq/#do-i-have-to-leave-my-wallet-open-to-continue-mining","text":"No, if you are using Blago's miner, included with QBundle, once you have started mining, the miner is independent of your wallet. You can exit your wallet, or leave it running as desired. Other mining software should operate in this same way. If you are running a node however, the related wallet must remain open.","title":"Do I have to leave my wallet open to continue mining"},{"location":"en/faq/#why-is-my-wallet-not-reflecting-any-earning-from-mining","text":"If you are mining solo, you may not have successfully forged a block. If your plot size is relatively small, you will have better luck mining with a pool. If you are already mining with a pool, check the pools distribution requirements. Because mining payments are subject to transaction fees, most pools require you to accumulate a certain amount of Burst before they will make a payout. Some pools make their payouts on a set schedule as well so your reward may simply not be payable yet. If you have only been mining for a short time, but long enough to have received a payment, it may be that you have entered an incorrect value in your reward recipient setting.","title":"Why is my wallet not reflecting any earning from mining."},{"location":"en/faq/#how-do-i-see-what-i-have-pending","text":"For CryptoGuru based pools, there is a \u2018Pending (burst)\u2019 column. For other pools you will have to become familiar with their user interfaces. For most, you can look for you burst ID and locate the information that you need presented in a grid format. Review your pool's documentation or contact their support if necessary.","title":"How do I see what I have pending?"},{"location":"en/faq/#when-will-block-rewards-end-and-the-last-coin-be-mined","text":"Block rewards (although diminishing over time) will continue into 2026 when it is anticipated that the last coin will be mined. Transaction fees will continually increase during this time due to the expanding number of transactions that will be processed on the burst network. Mining profitability will slowly transition from being primarily based on block rewards to primarily based on transaction fees over this same period.","title":"When will block rewards end and the last coin be mined?"},{"location":"en/faq/#can-i-game-while-mining-burst","text":"Some people have done so, but depending on the number of drives that you have in operation and how resource intensive your gaming is, you may experience degradation of performance at some point. With this level of resources at your disposal, you will likely have to experiment to see what works.","title":"Can I game while mining Burst?"},{"location":"en/faq/#can-i-cpu-mine-burst-while-gpu-mining-other-coins","text":"Yes.","title":"Can I CPU mine Burst while GPU mining other coins?"},{"location":"en/faq/#what-is-a-plot","text":"A plot is a file that contains the pre-computed hashes that are used to mine Burst. A plot is tied to an account, but they can be created (with the same account ID) on other machines and transferred back to your mining computer. It is a common strategy to plot hard drives using computers with faster CPUs or GPUs and then mine the disks using computers with slower CPUs.","title":"What is a \u2018plot\u2019?"},{"location":"en/faq/#why-do-overlapping-plots-matter","text":"Having overlapping plots means that a portion of your drive has duplicate plot files. Plot your drives carefully to avoid this overlap. If you find that you have overlapping plot files and can identify them, it is best to re-plot these sections to assure best possible utilization of your available hard drive space. Overlap in your plot files will not cause a malfunction, but it will waste space that would otherwise be productive.","title":"Why do overlapping plots matter?"},{"location":"en/faq/#why-is-my-effective-capacity-reported-differently-than-my-actual-plot-size","text":"Effective capacity is calculated from the frequency and quality of your submitted deadlines. If you have only been mining for a few hours, it will take some additional time for your true capacity to be realized. Your effective capacity on pool will fluctuate (normally plus or minus 5% but sometimes up to 10%) Setting a maximum reported deadline on some pools will lead to a better calculation of your effective capacity. Revisit this setting periodically for best results. If you have overlapping plots, your effective capacity will be lower than expected.","title":"Why is my effective capacity reported differently than my actual plot size?"},{"location":"en/faq/#why-are-my-plots-being-corrupted-when-gpu-mining-burst-and-other-coins","text":"It is recommended that you dedicate your GPU to either the task of plotting or to the task of mining rather than trying to do both at the same time. Plotting is by design a temporary activity. You should probably suspend mining until the task of plotting is complete.","title":"Why are my plots being corrupted when GPU mining Burst and other coins?"},{"location":"en/faq/#why-are-my-read-times-so-slow","text":"There are many reasons for this, if your computer is relatively modern, it may have both USB2 and USB3 hubs. The USB3 hub will provide better performance. For more advance mining information, such as building mining rigs, visit the mining subreddit. You will likely find more detailed information than can be provided in a simple FAQ. The mining subreddit is located here: https://www.reddit.com/r/burstcoinmining/","title":"Why are my read times so slow?"},{"location":"en/faq/#where-can-i-find-additional-mining-information","text":"Besides this FAQ, additional resources can be found at the following locations: Introduction to Burst Mining https://www.reddit.com/r/burstcoinmining/ https://t.me/BurstCoinMining","title":"Where can I find additional mining information?"},{"location":"en/faq/#mining-hardware-questions","text":"","title":"Mining Hardware Questions"},{"location":"en/faq/#what-hardware-is-recommended","text":"It depends on so many variables. Burst can be mined on consumer grade computers, even those that are several years old. It is likely than any mining configuration undertaken today will eventually be profitable as the value of Burst rises with further development, marketing, and wide scale adoption. If you want to build a Burst mining rig with capabilities beyond a basic system supporting the network and earning a few coins, you can get the latest recommendations from one of the community forums such as the Burst mining subreddit located here: https://www.reddit.com/r/burstcoinmining/","title":"What hardware is recommended?"},{"location":"en/faq/#if-i-use-ssds-solid-state-drives-would-i-earn-more","text":"No. Because mining success is based approximately on 95% plot file capacity and only 5% related to the time it takes to read the plot files, and because SSDs are currently so much more expensive than regular drives, it is far more profitable to invest in regular drives with a lower cost per terabyte. A popular starting point is an external 8 Terabyte drive from Western Digital or Seagate. The difference in price between these drives and a more expensive SSD would be better invested in buying Burst directly from one of the exchanges.","title":"If I use SSDs (solid state drives) would I earn more?"},{"location":"en/faq/#is-any-particular-model-of-hard-drive-better-for-mining","text":"When given a choice between hard drives of the same capacity, the cheapest is usually best. Divide the cost by the number of terabytes to establish the cost per terabyte and go with the lower cost per terabyte option, assuming they are both covered by comparable warranties. 8 terabyte drives are currently the best value among the readily available consumer hard drives, but price differences do exist between different manufactures. Remember, you can start by using a portion of your existing computer\u2019s hard drive and add an additional external drive later.","title":"Is any particular model of hard drive better for mining?"},{"location":"en/faq/#why-do-some-drives-take-longer-to-plot","text":"SMR drives take a particularly long time to plot. If using an SMR drive, start by plotting onto an SSD and then move the plots to the SMR. This will make the process much faster. Plotting software with the capability to do this automatically has been developed and can be found in our list of plotting software .","title":"Why do some drives take longer to plot?"},{"location":"en/faq/#what-is-a-good-source-for-hard-drives","text":"Ebay is good source for previously owned drives, drives in job lots, and refurbished drives with short or no warranties. Amazon, Best Buy, Frys Electronics, and Micro Center are popular options for new drives depending on your geographic location. Any retail establishment that stocks hard drives is a good option if the price in competitive.","title":"What is a good source for hard drives?"},{"location":"en/faq/#can-i-mine-on-nas-network-attached-storage","text":"Technically yes, however, mileage may vary. Mining with NAS is generally slower as it is dependent on network speed between the NAS and the scanning computer. With a plot size over 8 \u2013 16 terabytes, the network speed might become an issue.","title":"Can I mine on NAS (network attached storage)?"},{"location":"en/faq/#can-i-mine-on-google-drive-or-other-cloud-based-storage","text":"Maybe yes, but probably no. It may depends on your service level agreement. You may find yourself blocked for various reasons. This space changes from time to time so do research and report back if you find success. Some cloud based services have terms and conditions that specifically disallow cryptocurrency mining.","title":"Can I mine on Google drive or other cloud based storage?"},{"location":"en/faq/#can-i-mine-on-multiple-machines-with-the-same-account","text":"Yes, but be prepared for small issues such as your effective plot size being reported incorrectly. Be sure that you do not have overlapping plot files.","title":"Can I mine on multiple machines with the same account?"},{"location":"en/faq/#mining-software-questions","text":"","title":"Mining Software Questions"},{"location":"en/faq/#what-mining-software-should-i-use","text":"The Qbundle wallet includes Blago\u2019s miner which is commonly used for CPU mining. Other mining software has been developed, such as Creepsky and Scavenger, and is being used successfully. Check out the full list of mining software . Try them all out, and see which one gives you the best scan rate as they are all different, and perform differently on different hardware configurations.","title":"What mining software should I use?"},{"location":"en/getting-started/","text":"Some things to know before you get started Your account will be secured by a passphrase. It is important to understand the security implications of Burst being a blockchain based currency. With blockchain based currencies, there are no centralized organizations that exercise custodial control over accounts. There is no one to contact if you forget, loose, or otherwise fail to protect your passphrase. It is vitally important that you only use computer equipment that you are absolutely sure is secure from intrusion. The only access you will have to your burst account holdings will be your passphrase. If you cannot produce your passphrase, you cannot access your Burst wallet and the coins will be effectively lost. Learn the Security Features of Burst New Burst accounts are secure, but full security requires activation on the block chain with a public key. Some business and exchanges will not transact business with an account until it is activated. Activation happens automatically with a wallets first outgoing transaction. How can you make an outgoing transaction if there are no funds in you account? This is easily accomplished with the help from the friendly Burst community. After you have downloaded and installed your selected wallet software, you will need to secure a small amount of Burst from the community in order to activate your wallet. For information on how to obtain the amount of burst needed, see FAQ 1. While you are there, scan through the other questions in the FAQ section. FAQ 1 - How can I obtain burst to cover my initial transaction fee? Ready to Get Started? To Run a Node or Just a Wallet? Node Burst Reference software (BRS) is supported for all major operating systems. However, some programs developed for Windows require a 64bit installed version. You will also need to have a correct installed version of Java (usually the latest version). Some installation packages will check your version of Java automatically and prompt you to download any missing components. In most cases it is not necessary to check your version of Java in advance. If you want to run a node and are just starting out, have average computer skills, and prefer ease of installation, the Windows based version of Qbundle is recommended. Qbundle is an easily installed package that sets up BRS, and also allows you to install Windows based related software to, among other things, mine burst. If you have more advanced computer skills and prefer software that is not Windows based, packages for other popular operating systems have been developed. The Burst Reference Software and guides to run it for Windows, Linux, and MacOS are below: Burst Reference Software How to run a full node Wallet The Phoenix and BurstHotWallet wallets are excellent for users who would just like to send and receive Burst. They do not require you to have a node running on your PC, and they also do not require you to sync the block chain for hours before they become useable.","title":"Getting Started"},{"location":"en/getting-started/#some-things-to-know-before-you-get-started","text":"Your account will be secured by a passphrase. It is important to understand the security implications of Burst being a blockchain based currency. With blockchain based currencies, there are no centralized organizations that exercise custodial control over accounts. There is no one to contact if you forget, loose, or otherwise fail to protect your passphrase. It is vitally important that you only use computer equipment that you are absolutely sure is secure from intrusion. The only access you will have to your burst account holdings will be your passphrase. If you cannot produce your passphrase, you cannot access your Burst wallet and the coins will be effectively lost. Learn the Security Features of Burst New Burst accounts are secure, but full security requires activation on the block chain with a public key. Some business and exchanges will not transact business with an account until it is activated. Activation happens automatically with a wallets first outgoing transaction. How can you make an outgoing transaction if there are no funds in you account? This is easily accomplished with the help from the friendly Burst community. After you have downloaded and installed your selected wallet software, you will need to secure a small amount of Burst from the community in order to activate your wallet. For information on how to obtain the amount of burst needed, see FAQ 1. While you are there, scan through the other questions in the FAQ section. FAQ 1 - How can I obtain burst to cover my initial transaction fee?","title":"Some things to know before you get started"},{"location":"en/getting-started/#ready-to-get-started","text":"","title":"Ready to Get Started?"},{"location":"en/getting-started/#to-run-a-node-or-just-a-wallet","text":"","title":"To Run a Node or Just a Wallet?"},{"location":"en/getting-started/#node","text":"Burst Reference software (BRS) is supported for all major operating systems. However, some programs developed for Windows require a 64bit installed version. You will also need to have a correct installed version of Java (usually the latest version). Some installation packages will check your version of Java automatically and prompt you to download any missing components. In most cases it is not necessary to check your version of Java in advance. If you want to run a node and are just starting out, have average computer skills, and prefer ease of installation, the Windows based version of Qbundle is recommended. Qbundle is an easily installed package that sets up BRS, and also allows you to install Windows based related software to, among other things, mine burst. If you have more advanced computer skills and prefer software that is not Windows based, packages for other popular operating systems have been developed. The Burst Reference Software and guides to run it for Windows, Linux, and MacOS are below: Burst Reference Software How to run a full node","title":"Node"},{"location":"en/getting-started/#wallet","text":"The Phoenix and BurstHotWallet wallets are excellent for users who would just like to send and receive Burst. They do not require you to have a node running on your PC, and they also do not require you to sync the block chain for hours before they become useable.","title":"Wallet"},{"location":"en/history-of-burst/","text":"Beginning There are several important events in the short history of Burst. 2014-08-10: Official announcement on Bitcointalk.org [1] 2014-08-11: Generation of the Genesis block [2] 2014-08-20: First pool available [3] 2014-08-22: Burst/BTC market added to the C-CEX exchange [4] 2014-09-06: Burst/BTC market added to the Poloniex exchange [5] 2014-09-16: Burst added to the Bittrex exchange [6][7] August 2015: Original developer Burstcoin disappears [8]. The community takes over the development of Burst Hard Forks Several changes in the blockchain protocol introduced a hard fork, meaning non-updated clients would not accept new blocks. 2014-08-17: Version 1.0.2 changes difficulty adjustments [9] 2014-08-27: Version 1.0.3 protocoll changes for V2 pools [10] 2014-09-17: Version 1.1.0 backend updated to NXt 1.2.8 to enable new NXT features (encrypted messaging, DGS) [11] 2014-09-27: Version 1.1.3 added escrow transactions [12] 2014-11-04: Version 1.1.5 update to Nxt 1.3 (added subscriptions, updated escrow) [13] 2014-12-22: Version 1.2.0 added Automated Transactions (AT) [14] 2015-02-06: Version 1.2.2 bugfixes for ATs [15] 2015-04-20: Version 1.2.3 bugfixes for ATs and the asset exchange [16] Burst Team After the original developer of Burst disappeared a community quickly formed under the name Burst Team in August of 2015. Development of the wallet software continued in a fork at Github [17]. A website and a forum were created at burst-team.us . Burstnation Because of differences within Burst Team, several members founded Burstnation [18] by the end of 2016 . The differences among both fractions of the community continued for a long time until leading Burstnation members announced their retirement from the Burst community in the aftermath of the Dymaxion release (see below). Spam Attack and Network Forks On July 22nd of 2017 an attacker spammed the Burst network with messages, causing wallets to crash and splitting the network into multiple forks [19]. The network remained unstable for several days. As a result the Poloniex exchange froze the coin and disabled deposits and withdrawls . By August 10th the network was stable again and Poloniex reactived Burst deposits and withdrawls . Formation of the PoC Consortium In the aftermath of the spam attack a group of Burst enthusiasts formed the Proof-of-Capacity Consortium (PoCC). The original announcement of the group was posted on the third anniversary of the Burst blockchain on August 11th of 2017[20]. Initial activities of the group included improving the wallet software and providing a reliable block explorer. Release of the Dymaxion White Paper On December, 27th 2017 the PoC Consortium released a white paper titled \u201cThe Burst Dymaxion\". This white paper describes a proposed layer to the Burst blockchain capable of sustaining the total global load of non-cash transactions. The implementation of The Dymaxion by the PoC Consortium is ongoing. PoCC Leaves, BAT Enters In early 2019, PoCC stepped down and a new group of community members emerged to carry the torch. The Burst Alliance, comprised of experienced software engineers and marketing experts, have committed to performing ongoing Burst development and marketing into the future. References [1] https://bitcointalk.org/index.php?topic=731923.0 [2] https://explore.burst.cryptoguru.org/block/3444294670862540038 [3] https://bitcointalk.org/index.php?topic=731923.msg8448276#msg8448276 [4] https://twitter.com/CryptoCurrEncyX/status/502787927647076352 [5] https://twitter.com/Poloniex/status/508398805793140736 [6] https://support.bittrex.com/hc/en-us/articles/202991514-All-things-NXT-related [7] https://twitter.com/search?l =&q=%24burst%20bittrex%20until%3A2014-12-31&src=typd [8] https://bitcointalk.org/index.php?action=profile;u=364787 [9] https://bitcointalk.org/index.php?topic=731923.msg8404060#msg8404060 [10] https://bitcointalk.org/index.php?topic=731923.msg8550499#msg8550499 [11] https://bitcointalk.org/index.php?topic=731923.msg8741673#msg8741673 [12] https://bitcointalk.org/index.php?topic=731923.msg8988688#msg8988688 [13] https://bitcointalk.org/index.php?topic=731923.msg9430317#msg9430317 [14] https://bitcointalk.org/index.php?topic=731923.msg9910950#msg9910950 [15] https://bitcointalk.org/index.php?topic=731923.msg10370645#msg10370645 [16] https://bitcointalk.org/index.php?topic=731923.msg11142412#msg11142412 [17] https://github.com/burst-team/burstcoin [18] https://forums.burst-team.us/post/90277 [19] https://bitcointalk.org/index.php?topic=731923.msg20296387#msg20296387 [20] https://bitcointalk.org/index.php?topic=2080040.0","title":"History of Burst"},{"location":"en/history-of-burst/#beginning","text":"There are several important events in the short history of Burst. 2014-08-10: Official announcement on Bitcointalk.org [1] 2014-08-11: Generation of the Genesis block [2] 2014-08-20: First pool available [3] 2014-08-22: Burst/BTC market added to the C-CEX exchange [4] 2014-09-06: Burst/BTC market added to the Poloniex exchange [5] 2014-09-16: Burst added to the Bittrex exchange [6][7] August 2015: Original developer Burstcoin disappears [8]. The community takes over the development of Burst","title":"Beginning"},{"location":"en/history-of-burst/#hard-forks","text":"Several changes in the blockchain protocol introduced a hard fork, meaning non-updated clients would not accept new blocks. 2014-08-17: Version 1.0.2 changes difficulty adjustments [9] 2014-08-27: Version 1.0.3 protocoll changes for V2 pools [10] 2014-09-17: Version 1.1.0 backend updated to NXt 1.2.8 to enable new NXT features (encrypted messaging, DGS) [11] 2014-09-27: Version 1.1.3 added escrow transactions [12] 2014-11-04: Version 1.1.5 update to Nxt 1.3 (added subscriptions, updated escrow) [13] 2014-12-22: Version 1.2.0 added Automated Transactions (AT) [14] 2015-02-06: Version 1.2.2 bugfixes for ATs [15] 2015-04-20: Version 1.2.3 bugfixes for ATs and the asset exchange [16]","title":"Hard Forks"},{"location":"en/history-of-burst/#burst-team","text":"After the original developer of Burst disappeared a community quickly formed under the name Burst Team in August of 2015. Development of the wallet software continued in a fork at Github [17]. A website and a forum were created at burst-team.us .","title":"Burst Team"},{"location":"en/history-of-burst/#burstnation","text":"Because of differences within Burst Team, several members founded Burstnation [18] by the end of 2016 . The differences among both fractions of the community continued for a long time until leading Burstnation members announced their retirement from the Burst community in the aftermath of the Dymaxion release (see below).","title":"Burstnation"},{"location":"en/history-of-burst/#spam-attack-and-network-forks","text":"On July 22nd of 2017 an attacker spammed the Burst network with messages, causing wallets to crash and splitting the network into multiple forks [19]. The network remained unstable for several days. As a result the Poloniex exchange froze the coin and disabled deposits and withdrawls . By August 10th the network was stable again and Poloniex reactived Burst deposits and withdrawls .","title":"Spam Attack and Network Forks"},{"location":"en/history-of-burst/#formation-of-the-poc-consortium","text":"In the aftermath of the spam attack a group of Burst enthusiasts formed the Proof-of-Capacity Consortium (PoCC). The original announcement of the group was posted on the third anniversary of the Burst blockchain on August 11th of 2017[20]. Initial activities of the group included improving the wallet software and providing a reliable block explorer.","title":"Formation of the PoC Consortium"},{"location":"en/history-of-burst/#release-of-the-dymaxion-white-paper","text":"On December, 27th 2017 the PoC Consortium released a white paper titled \u201cThe Burst Dymaxion\". This white paper describes a proposed layer to the Burst blockchain capable of sustaining the total global load of non-cash transactions. The implementation of The Dymaxion by the PoC Consortium is ongoing.","title":"Release of the Dymaxion White Paper"},{"location":"en/history-of-burst/#pocc-leaves-bat-enters","text":"In early 2019, PoCC stepped down and a new group of community members emerged to carry the torch. The Burst Alliance, comprised of experienced software engineers and marketing experts, have committed to performing ongoing Burst development and marketing into the future.","title":"PoCC Leaves, BAT Enters"},{"location":"en/history-of-burst/#references","text":"[1] https://bitcointalk.org/index.php?topic=731923.0 [2] https://explore.burst.cryptoguru.org/block/3444294670862540038 [3] https://bitcointalk.org/index.php?topic=731923.msg8448276#msg8448276 [4] https://twitter.com/CryptoCurrEncyX/status/502787927647076352 [5] https://twitter.com/Poloniex/status/508398805793140736 [6] https://support.bittrex.com/hc/en-us/articles/202991514-All-things-NXT-related [7] https://twitter.com/search?l =&q=%24burst%20bittrex%20until%3A2014-12-31&src=typd [8] https://bitcointalk.org/index.php?action=profile;u=364787 [9] https://bitcointalk.org/index.php?topic=731923.msg8404060#msg8404060 [10] https://bitcointalk.org/index.php?topic=731923.msg8550499#msg8550499 [11] https://bitcointalk.org/index.php?topic=731923.msg8741673#msg8741673 [12] https://bitcointalk.org/index.php?topic=731923.msg8988688#msg8988688 [13] https://bitcointalk.org/index.php?topic=731923.msg9430317#msg9430317 [14] https://bitcointalk.org/index.php?topic=731923.msg9910950#msg9910950 [15] https://bitcointalk.org/index.php?topic=731923.msg10370645#msg10370645 [16] https://bitcointalk.org/index.php?topic=731923.msg11142412#msg11142412 [17] https://github.com/burst-team/burstcoin [18] https://forums.burst-team.us/post/90277 [19] https://bitcointalk.org/index.php?topic=731923.msg20296387#msg20296387 [20] https://bitcointalk.org/index.php?topic=2080040.0","title":"References"},{"location":"en/internal-at-and-escrow-account/","text":"The internal AT (automated transaction) and escrow account is used for execution of automated transactions and escrow payments, as an internal intermediary party i.e. it cannot be the sender or recipient of a transaction. The account information is visible when it is accessed through the Block Explorer, using the following link: https://explorer.burstcoin.network/?action=account&account=0 . The account has the numeric ID 0 and a Burst address BURST-2222-2222-TMT9-J2222. The account information shows a number of historic transactions, ordinary and multi-outs, which are indicative of the transactions executed using this account. However, the balance of the account shown in Block Explorer is a result of the Block Explorer's interpretation of the intermediary states of the account, and therefore doesn't affect the total supply of Burst.","title":"Internal AT and Escrow Account"},{"location":"en/join-us/","text":"Contributing Burst is a community project. Everyone's welcome to contribute to this wiki. We are always in the process of keeping this wiki as up to date as possible. Most of the content was transferred to this site from an older wiki version, but formatting was incorrectly displayed in some areas and a lot of things were missing, such as a couple months worth of updated pages, translations and images. We would greatly appreciate any contributions, whether it be fixing existing content or writing new content. Feel free to fork the repo, make your changes and then open a pull request on GitHub . Many of us hang out and collaborate over at Discord . Come join us!","title":"Join Us"},{"location":"en/list-of-burst-related-websites/","text":"List of Burst related websites The Burst community is very heterogeneous. Thus, there is a whole ecosystem of websites around the cryptocurrency, usually more than one for a particular topic. General Information https://www.burst-coin.org https://www.burstcoin.ist https://burstwiki.org https://burst-coin.es/ https://burstwallet.io http://burstfaq.com https://burstcoin.community Faucets https://faucet.burst-alliance.org/ https://burst-coin.es/faucet http://burstfaucets.com https://faucet.burstpay.net/ https://burstneon.com/faucet Forums http://burstforum.net https://forums.getburst.net Bitcointalk https://bitcointalk.org/index.php?topic=1564860.0 - german thread https://bitcointalk.org/index.php?topic=1541310 - Main Announcement https://www.reddit.com/r/burstcoin/ Gambling Sites http://lotto.burstxd.com/ - This may be using the pre-hardfork1 Burstcoin blockchain so beware. Github Repositories https://github.com/burst-apps-team https://github.com/JohnnyFFM?tab=repositories https://github.com/PoC-Consortium https://github.com/andzno1?tab=repositories Pools A good percentage of all pools can be found here : https://burstcoin.cc/pool Social Media https://twitter.com/GetBURST https://twitter.com/BURSTFLASH https://twitter.com/BurstAppsTeam Tools https://starburst.pink/poolspy/ https://blackpawn.com/tp/ http://burstcoin.zone http://www.burstcoin.cc/network http://burstcoincalculator.com https://explore.burst.cryptoguru.org","title":"List of Burst Related Websites"},{"location":"en/list-of-burst-related-websites/#list-of-burst-related-websites","text":"The Burst community is very heterogeneous. Thus, there is a whole ecosystem of websites around the cryptocurrency, usually more than one for a particular topic.","title":"List of Burst related websites"},{"location":"en/list-of-burst-related-websites/#general-information","text":"https://www.burst-coin.org https://www.burstcoin.ist https://burstwiki.org https://burst-coin.es/ https://burstwallet.io http://burstfaq.com https://burstcoin.community","title":"General Information"},{"location":"en/list-of-burst-related-websites/#faucets","text":"https://faucet.burst-alliance.org/ https://burst-coin.es/faucet http://burstfaucets.com https://faucet.burstpay.net/ https://burstneon.com/faucet","title":"Faucets"},{"location":"en/list-of-burst-related-websites/#forums","text":"http://burstforum.net https://forums.getburst.net Bitcointalk https://bitcointalk.org/index.php?topic=1564860.0 - german thread https://bitcointalk.org/index.php?topic=1541310 - Main Announcement https://www.reddit.com/r/burstcoin/","title":"Forums"},{"location":"en/list-of-burst-related-websites/#gambling-sites","text":"http://lotto.burstxd.com/ - This may be using the pre-hardfork1 Burstcoin blockchain so beware.","title":"Gambling Sites"},{"location":"en/list-of-burst-related-websites/#github-repositories","text":"https://github.com/burst-apps-team https://github.com/JohnnyFFM?tab=repositories https://github.com/PoC-Consortium https://github.com/andzno1?tab=repositories","title":"Github Repositories"},{"location":"en/list-of-burst-related-websites/#pools","text":"A good percentage of all pools can be found here : https://burstcoin.cc/pool","title":"Pools"},{"location":"en/list-of-burst-related-websites/#social-media","text":"https://twitter.com/GetBURST https://twitter.com/BURSTFLASH https://twitter.com/BurstAppsTeam","title":"Social Media"},{"location":"en/list-of-burst-related-websites/#tools","text":"https://starburst.pink/poolspy/ https://blackpawn.com/tp/ http://burstcoin.zone http://www.burstcoin.cc/network http://burstcoincalculator.com https://explore.burst.cryptoguru.org","title":"Tools"},{"location":"en/list-of-international-burst-websites/","text":"Burst being decentralized, community members and contributors are participating from anywhere in the world. Some users have taken the initiative of creating websites targeting a local audience. Bulgarian http://burstcoin.website/ Chinese http://forum.burstcoin.cn/ Danish http://burstcoin.dk/ English List of Burst related websites French https://burstfrance.com/ German http://burstcoin.zone/ Spanish https://burst-coin.es/","title":"List of International Burst Websites"},{"location":"en/list-of-international-burst-websites/#bulgarian","text":"http://burstcoin.website/","title":"Bulgarian"},{"location":"en/list-of-international-burst-websites/#chinese","text":"http://forum.burstcoin.cn/","title":"Chinese"},{"location":"en/list-of-international-burst-websites/#danish","text":"http://burstcoin.dk/","title":"Danish"},{"location":"en/list-of-international-burst-websites/#english","text":"List of Burst related websites","title":"English"},{"location":"en/list-of-international-burst-websites/#french","text":"https://burstfrance.com/","title":"French"},{"location":"en/list-of-international-burst-websites/#german","text":"http://burstcoin.zone/","title":"German"},{"location":"en/list-of-international-burst-websites/#spanish","text":"https://burst-coin.es/","title":"Spanish"},{"location":"en/marketplace/","text":"Introduction The Burst Marketplace provides a protocol for decentralized, peer-to-peer stores for any kind of digital goods like software, music or video. You browse the sellers products, place an order and the seller will send you information of how to download the good. Wallet Interface With the server running, access the local Burst wallet by visiting http://localhost:8125/ . On the sidebar, you find the menus \u2018Marketplace\u2019 and \u2018My Store\u2019: Search Marketplace : Enter the sellers address to see his products. Purchased Products : This page will list all your previously purchased products. My Products For Sale : Lists the items you are selling in the marketplace, and gives you the ability to update your offerns. My Pending Orders : Here you will see pending orders from users who wants to buy a product. My Completed Orders : Shows all finished orders feedbacks from your customer. List Product For Sale : Here you add a new digital good in the marketplace. How To Open your Burst client and select \u2018Marketplace\u2019 to buy or \u2018My Store\u2019 to sell. Buying products Here is a short description with the most essential info on how to buy on Burst marketplace: Click the menu \u2018Marketplace\u2019 and then \u2018Search Marketplace\u2019. Enter the sellers Burst address to see the list of his goods. Click the name of a product to open the purchase dialog. Enter \u2018Quantity\u2019 and \u2018Delivery Deadline\u2019 in hours. This defines how long you are willing to wait for seller to deliver until the transaction is cancelled. Double check the data, enter your \u2018Passphrase\u2019 and hit the button \u2018Purchase\u2019. The order has now been placed in your \u2018Purchased Products\u2019 menu. Here you can see the order status: After network confirmation (block generating) it will change from \u2018Tentative\u2019 to \u2018Pending\u2019. When the seller has delivered the product, the status will change to \u2018Complete\u2019. Click the name to open the dialog \u2018Marketplace Delivery\u2019. Enter your passphrase to \u2018Decypt\u2019 the sellers message. Here you will find the information on where you can fetch your digital good. You now have the option of leaving feedback to the seller. Selling products You can list your digital goods on marketplace: Open your Burst client and select \u2018My Store\u2019. Click the button \u2018List Product For Sale\u2019 on the top right-hand corner. Decripe your product. Name : The name of the product. Description : More details about the product, maybe add a link to a website where you present the product in full detail. Tags (optional): Enter up to three comma separated tags. Price : The product price in Burst per unit. Quantity : The number of goods you have in stock. This will decrease every time a buyer buys from you. Passphrase : Your wallet passphrase is needed to list the product. Confirm the offer by clicking on \u2018Put For Sale\u2019. It is listed in italics on the \u2018My Products For Sale\u2019 page. After the Burst network has included your product in a block (usually after a few minutes), it will be listet in normal font as a link. When someone has placed an order to buy a good from you, it will show up in the \u2018My Pending Orders\u2019 menu. Go here and press the \u2018Deliver Goods\u2019 button. In the pop up window, enter your passphrase to decrypt the message from the buyer. You can check the option \u2018Remember passphrase for decryption\u2019 for future sales. Enter details on how the buyer can download your digital good in the \u2018Data\u2019 field. Optional you can give a \u2018Discount\u2019 to the buyer. Enter your \u2018Passphrase\u2019 and hit the \u2018Deliver Purchase\u2019 button to finalize the purchase. You can find the completed order in the \u2018My Completed Orders\u2019 menu. For details click on the product name. Here you can see if the buyer has sent you feedback and you may also refund purchase.","title":"Marketplace"},{"location":"en/marketplace/#introduction","text":"The Burst Marketplace provides a protocol for decentralized, peer-to-peer stores for any kind of digital goods like software, music or video. You browse the sellers products, place an order and the seller will send you information of how to download the good.","title":"Introduction"},{"location":"en/marketplace/#wallet-interface","text":"With the server running, access the local Burst wallet by visiting http://localhost:8125/ . On the sidebar, you find the menus \u2018Marketplace\u2019 and \u2018My Store\u2019: Search Marketplace : Enter the sellers address to see his products. Purchased Products : This page will list all your previously purchased products. My Products For Sale : Lists the items you are selling in the marketplace, and gives you the ability to update your offerns. My Pending Orders : Here you will see pending orders from users who wants to buy a product. My Completed Orders : Shows all finished orders feedbacks from your customer. List Product For Sale : Here you add a new digital good in the marketplace.","title":"Wallet Interface"},{"location":"en/marketplace/#how-to","text":"Open your Burst client and select \u2018Marketplace\u2019 to buy or \u2018My Store\u2019 to sell.","title":"How To"},{"location":"en/marketplace/#buying-products","text":"Here is a short description with the most essential info on how to buy on Burst marketplace: Click the menu \u2018Marketplace\u2019 and then \u2018Search Marketplace\u2019. Enter the sellers Burst address to see the list of his goods. Click the name of a product to open the purchase dialog. Enter \u2018Quantity\u2019 and \u2018Delivery Deadline\u2019 in hours. This defines how long you are willing to wait for seller to deliver until the transaction is cancelled. Double check the data, enter your \u2018Passphrase\u2019 and hit the button \u2018Purchase\u2019. The order has now been placed in your \u2018Purchased Products\u2019 menu. Here you can see the order status: After network confirmation (block generating) it will change from \u2018Tentative\u2019 to \u2018Pending\u2019. When the seller has delivered the product, the status will change to \u2018Complete\u2019. Click the name to open the dialog \u2018Marketplace Delivery\u2019. Enter your passphrase to \u2018Decypt\u2019 the sellers message. Here you will find the information on where you can fetch your digital good. You now have the option of leaving feedback to the seller.","title":"Buying products"},{"location":"en/marketplace/#selling-products","text":"You can list your digital goods on marketplace: Open your Burst client and select \u2018My Store\u2019. Click the button \u2018List Product For Sale\u2019 on the top right-hand corner. Decripe your product. Name : The name of the product. Description : More details about the product, maybe add a link to a website where you present the product in full detail. Tags (optional): Enter up to three comma separated tags. Price : The product price in Burst per unit. Quantity : The number of goods you have in stock. This will decrease every time a buyer buys from you. Passphrase : Your wallet passphrase is needed to list the product. Confirm the offer by clicking on \u2018Put For Sale\u2019. It is listed in italics on the \u2018My Products For Sale\u2019 page. After the Burst network has included your product in a block (usually after a few minutes), it will be listet in normal font as a link. When someone has placed an order to buy a good from you, it will show up in the \u2018My Pending Orders\u2019 menu. Go here and press the \u2018Deliver Goods\u2019 button. In the pop up window, enter your passphrase to decrypt the message from the buyer. You can check the option \u2018Remember passphrase for decryption\u2019 for future sales. Enter details on how the buyer can download your digital good in the \u2018Data\u2019 field. Optional you can give a \u2018Discount\u2019 to the buyer. Enter your \u2018Passphrase\u2019 and hit the \u2018Deliver Purchase\u2019 button to finalize the purchase. You can find the completed order in the \u2018My Completed Orders\u2019 menu. For details click on the product name. Here you can see if the buyer has sent you feedback and you may also refund purchase.","title":"Selling products"},{"location":"en/mining/","text":"Introduction to Burst Mining The process of mining Burst is the foundation for adding blocks to the Burst blockchain and securing transactions within the Burst network. In preparation for Mining, plotting software is used to precompute hashes and store them in plot files. During the mining process, mining software is used to read quickly through the plot files in order to locate data to be submitted to the network. This is a competitive process whereby each miner provides their best cryptographic solution in an attempt to win the right to forge the related block of transactions. Burst uses the Shabal256 cryptographic hash function as its main function. Shabal256 is slow and heavy in comparison to other cryptographic hash functions such as the SHA256. This feature makes it ideal for precomputing hashes, yet it is still fast enough for small live verifications. Lexicon Plot files In order to mine Burst, users have to open a Burst account and activate it by creating an outgoing transaction, as described in this article. The next step is creating plot files needed for Burst mining. As plot files are bound to the Burst account ID, it is impossible for users with different account IDs to have identical plot files. Plot files are made up of hashes. A hash is a result of of computing data using a cryptographic hash function. The length of a hash is 32 Bytes (256 bit). A nonce is a group of 8192 hashes, making its size 256 KiB. Each nonce is referenced by a number. The number of the nonce can take values between 0 and 264-1 (18446744073709551615). Nonces are sorted into 4096 scoops, therefore each scoop contains two hashes. Reward recipient assignment Before they start mining, users have to decide whether they'll join a mining pool or mine alone (\u201csolo mine\u201d). This is done through a transaction called \u201cReward recipient assignment\u201d which has to be executed for both types of mining. The reward recipient assignment transaction, when used in context of pool mining, enables the pool to use the deadlines submitted by the miner and sign newly forged blocks with miner's account. This transaction also assigns the block rewards from blocks forged by a specific miner to the pool for distribution, in accordance with pool reward distribution policies. Note that forged blocks are always signed by an account belonging to the miner who submitted the deadline used to forge the block. Reward recipient assignment form After the reward recipient assignment transaction has been issued by the user, it will take 4 blocks before the pool or account for solo miners set as the reward recipient will start to accept and confirm deadlines submitted by the miner. Pool vs. solo mining The decision whether to join a Burst mining pool or mine as a solo miner should be based upon the total size of one's plot files, which ultimately determine the probability of forging a block and the potential revenue. There is no strict rule when it comes to making this decision, but one should have in mind that with solo mining, the block reward and the fees are earned only when a block is forged, while with pool mining the earnings are distributed among pool miners, who \u201cpool\u201d their mining resources with the intent to increase the chance of forging blocks. There are different types of pool, depending on the payout distribution: 0-100 mining revenue distribution implies that all block rewards and fees from mined blocks are distributed among pool miners (0% for the block forger, 100% for the pool). This type of pool is best suited for plots smaller than 40TB, 20-80 pools distribute 20% of the revenue to the block forger and the remaining 80% to the pool. These pools are best suited for plot size from 30 to 80TB, 50-50 mining revenue distribution is suitable for plots of 60 to 200TB in size. In 50-50 pools, block forgers receive half of the block reward and fees for forged blocks, while the other half is passed on to the pool and distributed among pool miners, 80-20 pools are suited for plots sizes between 150 and 250TB, as they assign 80% of the block reward and fees to the block forger, and the remaining 20% to the pool, 100-0 pools, which are basically solo mining pools are suited for plot sizes of 150TB or above, and all mining revenue is kept for the block forger. The part of the mining revenue assigned to the pool for distribution to all pool miners is often referred to as \u201chistorical share\u201d. Note that the plot sizes indicated above are merely an informative guide, as there's no technical obstacle that would prevent anyone from e.g. solo mining with a 6TB plot, or joining a 0-100 pool with a plot of 200TB. Mining pools may or may not charge fees from miners. It is up to pool administrators to set fees, if any, as well as to determine the minimum payout and payout delay. Miners should get familiar with pool policies before they decide which pool to join. Effective plot size In pools that use the PoCC pool mining software, the effective plot size is the parameter used to determine the share of each miner in the pool mining revenue. The effective plot size is calculated based on the best deadlines confirmed by the pool for the last 360 blocks that were submitted by the miner, and it usually oscillates around the actual, physical size of the plot. The effective plot size can be optimized by adjusting the target deadlines sent to the pool. More information on the method of calculation the historical shares for pool miners is available at pool websites. Miners are advised to read and understand the method in order to optimize their mining performance and revenue. Mining revenue The mining revenue consists of the block reward and of transaction fees from the forged block. The block reward decreases each 10400 blocks. Depending on the plot size, the mining calculator provided in the Burst explorer can give an estimate regarding the expected mining revenue. The mining calculator is available at this link: https://explore.burst.cryptoguru.org/tool/calculate and will give an estimation using the current block reward and base target. Technical information about mining Mining and forging a block The entities involved in the process of mining and forging a block are the Burst wallet (locally installed, a web wallet, pool wallet) and the mining software (miner i.e. the software able to compute deadlines from plot files). The mining process starts with the miner requesting mining information from the wallet. Prior to sending the mining information, the wallet will create the new generation signature by running the previous generation signature and the previous block generator through the Shabal256 hash function (1). The new generation signature is passed on to the miner, together with the base target value and the next block height (2). In the next step, the miner will produce the generation hash for the next block by running the Shabal256 function on the generation signature and block height received from the wallet (3). The generation hash is used as the argument of the modulo 4096 function in order to get the scoop number which will be used to process the plot files (4). Process of mining and forging a block After the scoop number has been calculated, it is used to read all scoops from all nonces in all plot files. The processing is done individually for all nonces, by running them with the new generation signature through the Shabal256 hash function. The result of this is a hash referred to as target. The target is divided by the base target obtained from the wallet in step (2). The first 8 bytes of the result of the division is the deadline (5). To prevent the so-called \u201cnonce spamming\u201d the miner will check if the latest found deadline is lower than the lowest one found so far and proceed with it until a lower deadline has been found. Pools often set a maximum deadline limit (i.e. the highest deadline value that is accepted by the pool) and deadlines that exceed this limit will be discarded by the pool for historic share calculation. The miner will submit the deadline to the wallet, together with the numeric account ID bound to the plot file, and the nonce number that contains the scoop data used to generate the deadline. In case of mining solo, the information passed from the miner to the wallet will also include the secret passphrase of the account bound to the plot file (with pool mining, the passphrase of the pool account is used)(6). After the wallet has received the information from the miner, it will create the nonce to be able to find and verify the deadline submitted by the miner. If the deadline is verified, the wallet will wait for the deadline to expire (7) and check if the new valid block has already been announced on the network (8). If the miner submits new information (a new deadline), the wallet will create the nonce to check the validity of the deadline and if the newly submitted deadline is lower than the previous one. If this is the case, the wallet will use the lower deadline value (i.e. wait for it to expire). In case the new block hasn't been announced, and the deadline has expired, the wallet will forge a new block (9), otherwise it will discard the information received from the miner, since it is no longer valid. The the wallet starts to forge a block, it will collect unconfirmed transactions received by users or the network. After checking the validity of transactions (e.g. signatures, timestamps etc), it will try to fit as many as possible into a block or until all transactions have been processed. The constraints for forging a block are the maximum block payload, which cannot exceed 179,520 bytes (176 kB) and the maximum number of transactions in a block (the theoretical maximal number of transactions in a single block is 19.200, for more information on the slot-based transaction structure, please read this Burstcoin.ist article: https://www.burstcoin.ist/2018/05/04/1st-hard-fork-explained-changes-in-transaction-dynamics/ ). Note that transaction are not stored within the block, but separately. Contents of a block The Burst block explorer, as well as the wallet can be used to view block contents and information. Block information available in the Burst block explorer Block version number refers to the block format, which determines what a block can contain and in which manner, List of transaction Ids included in the block, Payload hash is the Sha256 hash of all the data in the block payload, Timestamp of the block forging derived from the birth of the blockchain (11th of August 2014, at 02:00:00), Total amount i.e. the sum of all transactions contained in the block, Total amount of transaction fees, which will be given to the block forger on tp of the block reward, Payload length, Public key of the account which forged the block, Generation signature that was used to forge the block, Previous block hash, the Sha256 hash of the contents of the previous block, Previous block ID, which is the first 8 bytes of the previous block hash converted to a number, Cumulative difficulty used to prevent \u201cNothing at Stake\u201d problems during potential forks, calculated as: previous cumulative difficulty + 18446744073709551616/base target, Base target used when the block was forged, Block height, Nonce number used to forge the block, AT \u2013 payload bytes of the AT, in case AT was added to the block, Block signature is a 64 byte hash generated with the forger's private key and block contents. Block details available in the Burst wallet Once a wallet forges a block, it will be announced to the network. The wallet connects to peers and send the block for verification and validation.","title":"Mining"},{"location":"en/mining/#introduction-to-burst-mining","text":"The process of mining Burst is the foundation for adding blocks to the Burst blockchain and securing transactions within the Burst network. In preparation for Mining, plotting software is used to precompute hashes and store them in plot files. During the mining process, mining software is used to read quickly through the plot files in order to locate data to be submitted to the network. This is a competitive process whereby each miner provides their best cryptographic solution in an attempt to win the right to forge the related block of transactions. Burst uses the Shabal256 cryptographic hash function as its main function. Shabal256 is slow and heavy in comparison to other cryptographic hash functions such as the SHA256. This feature makes it ideal for precomputing hashes, yet it is still fast enough for small live verifications.","title":"Introduction to Burst Mining"},{"location":"en/mining/#lexicon","text":"Plot files In order to mine Burst, users have to open a Burst account and activate it by creating an outgoing transaction, as described in this article. The next step is creating plot files needed for Burst mining. As plot files are bound to the Burst account ID, it is impossible for users with different account IDs to have identical plot files. Plot files are made up of hashes. A hash is a result of of computing data using a cryptographic hash function. The length of a hash is 32 Bytes (256 bit). A nonce is a group of 8192 hashes, making its size 256 KiB. Each nonce is referenced by a number. The number of the nonce can take values between 0 and 264-1 (18446744073709551615). Nonces are sorted into 4096 scoops, therefore each scoop contains two hashes. Reward recipient assignment Before they start mining, users have to decide whether they'll join a mining pool or mine alone (\u201csolo mine\u201d). This is done through a transaction called \u201cReward recipient assignment\u201d which has to be executed for both types of mining. The reward recipient assignment transaction, when used in context of pool mining, enables the pool to use the deadlines submitted by the miner and sign newly forged blocks with miner's account. This transaction also assigns the block rewards from blocks forged by a specific miner to the pool for distribution, in accordance with pool reward distribution policies. Note that forged blocks are always signed by an account belonging to the miner who submitted the deadline used to forge the block. Reward recipient assignment form After the reward recipient assignment transaction has been issued by the user, it will take 4 blocks before the pool or account for solo miners set as the reward recipient will start to accept and confirm deadlines submitted by the miner. Pool vs. solo mining The decision whether to join a Burst mining pool or mine as a solo miner should be based upon the total size of one's plot files, which ultimately determine the probability of forging a block and the potential revenue. There is no strict rule when it comes to making this decision, but one should have in mind that with solo mining, the block reward and the fees are earned only when a block is forged, while with pool mining the earnings are distributed among pool miners, who \u201cpool\u201d their mining resources with the intent to increase the chance of forging blocks. There are different types of pool, depending on the payout distribution: 0-100 mining revenue distribution implies that all block rewards and fees from mined blocks are distributed among pool miners (0% for the block forger, 100% for the pool). This type of pool is best suited for plots smaller than 40TB, 20-80 pools distribute 20% of the revenue to the block forger and the remaining 80% to the pool. These pools are best suited for plot size from 30 to 80TB, 50-50 mining revenue distribution is suitable for plots of 60 to 200TB in size. In 50-50 pools, block forgers receive half of the block reward and fees for forged blocks, while the other half is passed on to the pool and distributed among pool miners, 80-20 pools are suited for plots sizes between 150 and 250TB, as they assign 80% of the block reward and fees to the block forger, and the remaining 20% to the pool, 100-0 pools, which are basically solo mining pools are suited for plot sizes of 150TB or above, and all mining revenue is kept for the block forger. The part of the mining revenue assigned to the pool for distribution to all pool miners is often referred to as \u201chistorical share\u201d. Note that the plot sizes indicated above are merely an informative guide, as there's no technical obstacle that would prevent anyone from e.g. solo mining with a 6TB plot, or joining a 0-100 pool with a plot of 200TB. Mining pools may or may not charge fees from miners. It is up to pool administrators to set fees, if any, as well as to determine the minimum payout and payout delay. Miners should get familiar with pool policies before they decide which pool to join. Effective plot size In pools that use the PoCC pool mining software, the effective plot size is the parameter used to determine the share of each miner in the pool mining revenue. The effective plot size is calculated based on the best deadlines confirmed by the pool for the last 360 blocks that were submitted by the miner, and it usually oscillates around the actual, physical size of the plot. The effective plot size can be optimized by adjusting the target deadlines sent to the pool. More information on the method of calculation the historical shares for pool miners is available at pool websites. Miners are advised to read and understand the method in order to optimize their mining performance and revenue. Mining revenue The mining revenue consists of the block reward and of transaction fees from the forged block. The block reward decreases each 10400 blocks. Depending on the plot size, the mining calculator provided in the Burst explorer can give an estimate regarding the expected mining revenue. The mining calculator is available at this link: https://explore.burst.cryptoguru.org/tool/calculate and will give an estimation using the current block reward and base target.","title":"Lexicon"},{"location":"en/mining/#technical-information-about-mining","text":"Mining and forging a block The entities involved in the process of mining and forging a block are the Burst wallet (locally installed, a web wallet, pool wallet) and the mining software (miner i.e. the software able to compute deadlines from plot files). The mining process starts with the miner requesting mining information from the wallet. Prior to sending the mining information, the wallet will create the new generation signature by running the previous generation signature and the previous block generator through the Shabal256 hash function (1). The new generation signature is passed on to the miner, together with the base target value and the next block height (2). In the next step, the miner will produce the generation hash for the next block by running the Shabal256 function on the generation signature and block height received from the wallet (3). The generation hash is used as the argument of the modulo 4096 function in order to get the scoop number which will be used to process the plot files (4). Process of mining and forging a block After the scoop number has been calculated, it is used to read all scoops from all nonces in all plot files. The processing is done individually for all nonces, by running them with the new generation signature through the Shabal256 hash function. The result of this is a hash referred to as target. The target is divided by the base target obtained from the wallet in step (2). The first 8 bytes of the result of the division is the deadline (5). To prevent the so-called \u201cnonce spamming\u201d the miner will check if the latest found deadline is lower than the lowest one found so far and proceed with it until a lower deadline has been found. Pools often set a maximum deadline limit (i.e. the highest deadline value that is accepted by the pool) and deadlines that exceed this limit will be discarded by the pool for historic share calculation. The miner will submit the deadline to the wallet, together with the numeric account ID bound to the plot file, and the nonce number that contains the scoop data used to generate the deadline. In case of mining solo, the information passed from the miner to the wallet will also include the secret passphrase of the account bound to the plot file (with pool mining, the passphrase of the pool account is used)(6). After the wallet has received the information from the miner, it will create the nonce to be able to find and verify the deadline submitted by the miner. If the deadline is verified, the wallet will wait for the deadline to expire (7) and check if the new valid block has already been announced on the network (8). If the miner submits new information (a new deadline), the wallet will create the nonce to check the validity of the deadline and if the newly submitted deadline is lower than the previous one. If this is the case, the wallet will use the lower deadline value (i.e. wait for it to expire). In case the new block hasn't been announced, and the deadline has expired, the wallet will forge a new block (9), otherwise it will discard the information received from the miner, since it is no longer valid. The the wallet starts to forge a block, it will collect unconfirmed transactions received by users or the network. After checking the validity of transactions (e.g. signatures, timestamps etc), it will try to fit as many as possible into a block or until all transactions have been processed. The constraints for forging a block are the maximum block payload, which cannot exceed 179,520 bytes (176 kB) and the maximum number of transactions in a block (the theoretical maximal number of transactions in a single block is 19.200, for more information on the slot-based transaction structure, please read this Burstcoin.ist article: https://www.burstcoin.ist/2018/05/04/1st-hard-fork-explained-changes-in-transaction-dynamics/ ). Note that transaction are not stored within the block, but separately. Contents of a block The Burst block explorer, as well as the wallet can be used to view block contents and information. Block information available in the Burst block explorer Block version number refers to the block format, which determines what a block can contain and in which manner, List of transaction Ids included in the block, Payload hash is the Sha256 hash of all the data in the block payload, Timestamp of the block forging derived from the birth of the blockchain (11th of August 2014, at 02:00:00), Total amount i.e. the sum of all transactions contained in the block, Total amount of transaction fees, which will be given to the block forger on tp of the block reward, Payload length, Public key of the account which forged the block, Generation signature that was used to forge the block, Previous block hash, the Sha256 hash of the contents of the previous block, Previous block ID, which is the first 8 bytes of the previous block hash converted to a number, Cumulative difficulty used to prevent \u201cNothing at Stake\u201d problems during potential forks, calculated as: previous cumulative difficulty + 18446744073709551616/base target, Base target used when the block was forged, Block height, Nonce number used to forge the block, AT \u2013 payload bytes of the AT, in case AT was added to the block, Block signature is a 64 byte hash generated with the forger's private key and block contents. Block details available in the Burst wallet Once a wallet forges a block, it will be announced to the network. The wallet connects to peers and send the block for verification and validation.","title":"Technical information about mining"},{"location":"en/mobile-app/","text":"Introduction There are several mobile applications on Google Play and iOS App store for Burst. Here are the most current you should use: Mobile Applications Name Maintainer Platform Currently Maintained? Phoenix Burst Wallet BAT Android / iOS Yes BURSTPAY Wallet AndyLamGot Android / iOS Yes Burstcoin Explorer harry1453 Android Yes Burstcoin Wallet PoCC Android No","title":"Mobile App"},{"location":"en/mobile-app/#introduction","text":"There are several mobile applications on Google Play and iOS App store for Burst. Here are the most current you should use:","title":"Introduction"},{"location":"en/mobile-app/#mobile-applications","text":"Name Maintainer Platform Currently Maintained? Phoenix Burst Wallet BAT Android / iOS Yes BURSTPAY Wallet AndyLamGot Android / iOS Yes Burstcoin Explorer harry1453 Android Yes Burstcoin Wallet PoCC Android No","title":"Mobile Applications"},{"location":"en/mortimer/","text":"Mortimer the Burst Butler Introduction Originally started as the PoCC Bot for tips on Reddit, Mortimer is a multi-interface, multi-currency and multi-functionality service framework mainly for the Burstcoin cryptocurrency. Called \u201cbutler\u201d for short. Mortimer supports other cryptocurrencies than Burstcoin where it serves the purpose of added value to Burstcoin (such as exchange services). Tip Bot Mortimer can currently act as a tip bot on Reddit. In order to use it for tipping services, you have to associate your Reddit account with a Burst address and fund it with some Burst. In order to be able to receive tips, you need to register a Burst address with your reddit account. The command to register your Reddit account with a Burst address is: /u/PoCCBot setaddr <your BURST address> In order to be able to send some tips, you have to send some Burst amount to the PoCC Bot: https://explore.burst.cryptoguru.org/transaction/8144579246955142410 The funding has to happen by sending an Ordinary Payment (obviously Multi-Outs will not work as you cannot attach any message there) with a unencrypted Message in the format /u/PoCCBot fund <reddit_account> Once said transaction reaches the bot, it will add the Burst you sent to your \u201cReddit tips account\u201d Please be careful when sending commands to the bot. At the moment there are no mechanisms for refunds, so if you get the reddit account wrong, or mess up the message format - your funds may be lost. Making Mortimer more robust is on the TODO list though. As you can see the reddit account funded is defined in the message. It does not necessarily need to be \u201cyour\u201d account. You can also sponsor some other account. Which will probably be used in future to fund some \u201cagents\u201d who can (ab)use tips as faucet. The service is provided for free, i.e. the bot does not take any percentage of the funds. Mixing Service Mortimer includes an anonymization/mixing service. In order to use the mixing service, you send an ordinary payment to the PoCC Churner (mixer) address (https://explore.burst.cryptoguru.org/transaction/2946354633558760665), with the amount you would like to have mixed. Mortimer will take 10 Burst fixed fee (for tx fees) and 2% \u201cof the rest\u201d. If you send less than 10 Burst ... \u00af\\_(\u30c4)_/\u00af - obviously. You add an encrypted message to that transaction with the commands for that bot. If that message is not encrypted, or if there is no message, the mixing will not happen, your funds are forfeited for now. Work on making Mortimer more robust is underway, so it is considered to simply send the funds back to the originating address - sans some fee - on errors. So you sent a tx with an encrypted message. What needs to be in that encrypted message? For now, simply OUT: <adr1>, <adr2>, <adr3>, ... so basically \u201cOUT:\u201d followed by a comma/space separated list of target addresses where the remaining funds (sent funds - fees) will land. e.g. OUT: RTST-6QF7-XV5Y-H8DFW, RTST-UFV8-N6DD-794Y3 BURST-RTST-M4HW-82N6-945YG as you can see, the Mortimer parser is somewhat tolerant, you can use comma, or space, or comma and space and you can have addresses with or without the BURST- prefix. In order for the mixer to be effective, you obviously should take care of the following things: never tell anyone the addresses in that encrypted message make sure they are empty/new i.e. without any transaction history they have NO PUBKEY associated with them, because the mixing addresses have neither that you have time. Even after the funds have arrived on your target addresses, do not withdraw them immediately","title":"Mortimer"},{"location":"en/mortimer/#mortimer-the-burst-butler","text":"","title":"Mortimer the Burst Butler"},{"location":"en/mortimer/#introduction","text":"Originally started as the PoCC Bot for tips on Reddit, Mortimer is a multi-interface, multi-currency and multi-functionality service framework mainly for the Burstcoin cryptocurrency. Called \u201cbutler\u201d for short. Mortimer supports other cryptocurrencies than Burstcoin where it serves the purpose of added value to Burstcoin (such as exchange services).","title":"Introduction"},{"location":"en/mortimer/#tip-bot","text":"Mortimer can currently act as a tip bot on Reddit. In order to use it for tipping services, you have to associate your Reddit account with a Burst address and fund it with some Burst. In order to be able to receive tips, you need to register a Burst address with your reddit account. The command to register your Reddit account with a Burst address is: /u/PoCCBot setaddr <your BURST address> In order to be able to send some tips, you have to send some Burst amount to the PoCC Bot: https://explore.burst.cryptoguru.org/transaction/8144579246955142410 The funding has to happen by sending an Ordinary Payment (obviously Multi-Outs will not work as you cannot attach any message there) with a unencrypted Message in the format /u/PoCCBot fund <reddit_account> Once said transaction reaches the bot, it will add the Burst you sent to your \u201cReddit tips account\u201d Please be careful when sending commands to the bot. At the moment there are no mechanisms for refunds, so if you get the reddit account wrong, or mess up the message format - your funds may be lost. Making Mortimer more robust is on the TODO list though. As you can see the reddit account funded is defined in the message. It does not necessarily need to be \u201cyour\u201d account. You can also sponsor some other account. Which will probably be used in future to fund some \u201cagents\u201d who can (ab)use tips as faucet. The service is provided for free, i.e. the bot does not take any percentage of the funds.","title":"Tip Bot"},{"location":"en/mortimer/#mixing-service","text":"Mortimer includes an anonymization/mixing service. In order to use the mixing service, you send an ordinary payment to the PoCC Churner (mixer) address (https://explore.burst.cryptoguru.org/transaction/2946354633558760665), with the amount you would like to have mixed. Mortimer will take 10 Burst fixed fee (for tx fees) and 2% \u201cof the rest\u201d. If you send less than 10 Burst ... \u00af\\_(\u30c4)_/\u00af - obviously. You add an encrypted message to that transaction with the commands for that bot. If that message is not encrypted, or if there is no message, the mixing will not happen, your funds are forfeited for now. Work on making Mortimer more robust is underway, so it is considered to simply send the funds back to the originating address - sans some fee - on errors. So you sent a tx with an encrypted message. What needs to be in that encrypted message? For now, simply OUT: <adr1>, <adr2>, <adr3>, ... so basically \u201cOUT:\u201d followed by a comma/space separated list of target addresses where the remaining funds (sent funds - fees) will land. e.g. OUT: RTST-6QF7-XV5Y-H8DFW, RTST-UFV8-N6DD-794Y3 BURST-RTST-M4HW-82N6-945YG as you can see, the Mortimer parser is somewhat tolerant, you can use comma, or space, or comma and space and you can have addresses with or without the BURST- prefix. In order for the mixer to be effective, you obviously should take care of the following things: never tell anyone the addresses in that encrypted message make sure they are empty/new i.e. without any transaction history they have NO PUBKEY associated with them, because the mixing addresses have neither that you have time. Even after the funds have arrived on your target addresses, do not withdraw them immediately","title":"Mixing Service"},{"location":"en/offline-transaction-signing/","text":"Introduction Offline Transaction Signing [offline device] The term \u201coffline transaction\u201d refers to the practice of keeping the private keys on an offline device (not connected to the internet), and signing on individuals transactions. The signature is then copy-pasted from this device into a connected device, and broadcast into the network. Assuming the offline computer is malware-free, then this practice is virtually risk-free of theft. Online Transaction Signing [local device] In addition to signing your transactions from a offline device, the signing can also be done on an online device but still performed locally. Assuming the computer is malware-free, this is the most convenient option while still keeping your private keys secret. For example the BRS (Burst Reference Software) wallet uses this form of signing for its wallet interface through locally run javascript. Online Transaction Signing [server side] Just don't do it. Although its possible, it would only be considered \u201csafe\u201d to do this using a local host. Especially if you are developing/distributing software; don't present online signing as an option to your clients. You will make them a potential target for malicious actions. Implementing Transaction Signing Any transaction needs to be signed before it can be broadcast and accepted into the memory pool. You use one of the API functions to request transactionBytes from a node. This API call returns a JSON containing the transactionBytes . These bytes represent the transaction you want to make. Important is to use the publicKey argument and not the secretPhrase for the transactionBytes request. And set the broadcast argument to false to prevent broadcasting the transaction to the network. Now to sign the transactionBytes locally. Refer to these sources below to include the signing functions in your code. Code sources Javascript / Burst Reference Software Java / Burst Reference Software Swift/Obj-C / BurstKit C++ / CloudBurst Pseudo code: function signTX(unsignedTransactionBytes) { myBytes = unsignedTransactionBytes // keep a copy signature = crypto.sign(unsignedTransactionBytes, passPhrase) // make the signature myBytes.copy(96, signature); // copy the signature over the unsignedTransactionBytes with a offset of 96 bytes return myBytes } Note: add signature and TransactionBytes length Compare and verify your implementation with the requestType: Sign Transaction . The transaction is now signed and can now be broadcast (through POST only): Broadcast the transaction ---- BRS API Transaction Operations","title":"Offline Transaction Signing"},{"location":"en/offline-transaction-signing/#introduction","text":"","title":"Introduction"},{"location":"en/offline-transaction-signing/#offline-transaction-signing-91offline-device93","text":"The term \u201coffline transaction\u201d refers to the practice of keeping the private keys on an offline device (not connected to the internet), and signing on individuals transactions. The signature is then copy-pasted from this device into a connected device, and broadcast into the network. Assuming the offline computer is malware-free, then this practice is virtually risk-free of theft.","title":"Offline Transaction Signing [offline device]"},{"location":"en/offline-transaction-signing/#online-transaction-signing-91local-device93","text":"In addition to signing your transactions from a offline device, the signing can also be done on an online device but still performed locally. Assuming the computer is malware-free, this is the most convenient option while still keeping your private keys secret. For example the BRS (Burst Reference Software) wallet uses this form of signing for its wallet interface through locally run javascript.","title":"Online Transaction Signing [local device]"},{"location":"en/offline-transaction-signing/#online-transaction-signing-91server-side93","text":"Just don't do it. Although its possible, it would only be considered \u201csafe\u201d to do this using a local host. Especially if you are developing/distributing software; don't present online signing as an option to your clients. You will make them a potential target for malicious actions.","title":"Online Transaction Signing [server side]"},{"location":"en/offline-transaction-signing/#implementing-transaction-signing","text":"Any transaction needs to be signed before it can be broadcast and accepted into the memory pool. You use one of the API functions to request transactionBytes from a node. This API call returns a JSON containing the transactionBytes . These bytes represent the transaction you want to make. Important is to use the publicKey argument and not the secretPhrase for the transactionBytes request. And set the broadcast argument to false to prevent broadcasting the transaction to the network. Now to sign the transactionBytes locally. Refer to these sources below to include the signing functions in your code.","title":"Implementing Transaction Signing"},{"location":"en/offline-transaction-signing/#code-sources","text":"Javascript / Burst Reference Software Java / Burst Reference Software Swift/Obj-C / BurstKit C++ / CloudBurst Pseudo code: function signTX(unsignedTransactionBytes) { myBytes = unsignedTransactionBytes // keep a copy signature = crypto.sign(unsignedTransactionBytes, passPhrase) // make the signature myBytes.copy(96, signature); // copy the signature over the unsignedTransactionBytes with a offset of 96 bytes return myBytes } Note: add signature and TransactionBytes length Compare and verify your implementation with the requestType: Sign Transaction . The transaction is now signed and can now be broadcast (through POST only): Broadcast the transaction ---- BRS API Transaction Operations","title":"Code sources"},{"location":"en/pchains/","text":"Introduction Burst has a big advantage that many other blockchains do not have, Burst Messages. Burst messages can be sent private and encrypted but also open for everyone to see in the blockchain. Why not use that functionality for something more meaningful than private messages? Concept To build a concept with syntax and semantics that when agreed upon by other participants can represent a way to introduce tokens that can be sent from sender to receiver and confirmed by other participants over a framework. Pchains as it is now is working small scale in a way that you can register and initialize a new private chain and create tx to send to someone else. Repository http://burst-marketplace.binary-dev.com/pchains/documentations/doc.php http://burst-marketplace.binary-dev.com/pchains/wallet/ References https://www.reddit.com/r/burstcoin/comments/8utyab/private_chains/ https://www.reddit.com/r/burstcoin/comments/9nscxd/pchains_extended_usage/","title":"Pchains"},{"location":"en/pchains/#introduction","text":"Burst has a big advantage that many other blockchains do not have, Burst Messages. Burst messages can be sent private and encrypted but also open for everyone to see in the blockchain. Why not use that functionality for something more meaningful than private messages?","title":"Introduction"},{"location":"en/pchains/#concept","text":"To build a concept with syntax and semantics that when agreed upon by other participants can represent a way to introduce tokens that can be sent from sender to receiver and confirmed by other participants over a framework. Pchains as it is now is working small scale in a way that you can register and initialize a new private chain and create tx to send to someone else.","title":"Concept"},{"location":"en/pchains/#repository","text":"http://burst-marketplace.binary-dev.com/pchains/documentations/doc.php http://burst-marketplace.binary-dev.com/pchains/wallet/","title":"Repository"},{"location":"en/pchains/#references","text":"https://www.reddit.com/r/burstcoin/comments/8utyab/private_chains/ https://www.reddit.com/r/burstcoin/comments/9nscxd/pchains_extended_usage/","title":"References"},{"location":"en/plotting/","text":"Introduction to Burst Plotting The process that prepares your hard drive space for mining by generating and storing shabal256 hashes is called plotting. The software used for this is called a plotter. Plotter software computes hashes using the cryptographic hash function (Shabal-256) and stores them in plot files on hard disks. Mining software retrieves these hashes to find values that can be used to forge blocks. Plot files are bound to the Burst account ID so it is impossible for users with different account IDs to generate identical plot files. Plot files can be created (with the same account ID) on other machines and transferred back to your mining computer. It is a common strategy to plot hard drives using computers with faster CPUs or GPUs and then mine the disks using computers with slower CPUs. When creating plot files, it is important to avoid overlapping plots. Overlapping plots (duplicate plots) will not cause a malfunction, but will waste space that would otherwise be productive if containing unique plots. Duplicated plots contribute no added value. If you will be using plotting software that uses a GPU, it is recommended that the GPU be used exclusively for plotting. Plotting is by nature a temporary process, so the GPU can be placed back into service for gaming or mining other coins after the process is complete. Gaming can occur during the plotting process, however, performance may suffer. Mining other coins using the same GPU during the plotting process is likely to result in corrupted plots. This is a general rule as some plotting software may have innovations that prevent this. Plotting Software An easy to use plotter, XPlotter, is included in the windows based QBundle. QBundle also includes a dynamic plotter that will manage your computers disk space so that available space is dedicated to mining but a dynamic amount of free space is maintained for normal usage. Other plotters, such as Engraver, have been developed for various operating systems and use cases. Details for selecting plotting software can be found here . All documentation regarding the use of plotters is available on the software's website and/or on Github. Plotting Videos Engraver","title":"Plotting"},{"location":"en/plotting/#introduction-to-burst-plotting","text":"The process that prepares your hard drive space for mining by generating and storing shabal256 hashes is called plotting. The software used for this is called a plotter. Plotter software computes hashes using the cryptographic hash function (Shabal-256) and stores them in plot files on hard disks. Mining software retrieves these hashes to find values that can be used to forge blocks. Plot files are bound to the Burst account ID so it is impossible for users with different account IDs to generate identical plot files. Plot files can be created (with the same account ID) on other machines and transferred back to your mining computer. It is a common strategy to plot hard drives using computers with faster CPUs or GPUs and then mine the disks using computers with slower CPUs. When creating plot files, it is important to avoid overlapping plots. Overlapping plots (duplicate plots) will not cause a malfunction, but will waste space that would otherwise be productive if containing unique plots. Duplicated plots contribute no added value. If you will be using plotting software that uses a GPU, it is recommended that the GPU be used exclusively for plotting. Plotting is by nature a temporary process, so the GPU can be placed back into service for gaming or mining other coins after the process is complete. Gaming can occur during the plotting process, however, performance may suffer. Mining other coins using the same GPU during the plotting process is likely to result in corrupted plots. This is a general rule as some plotting software may have innovations that prevent this.","title":"Introduction to Burst Plotting"},{"location":"en/plotting/#plotting-software","text":"An easy to use plotter, XPlotter, is included in the windows based QBundle. QBundle also includes a dynamic plotter that will manage your computers disk space so that available space is dedicated to mining but a dynamic amount of free space is maintained for normal usage. Other plotters, such as Engraver, have been developed for various operating systems and use cases. Details for selecting plotting software can be found here . All documentation regarding the use of plotters is available on the software's website and/or on Github.","title":"Plotting Software"},{"location":"en/plotting/#plotting-videos","text":"","title":"Plotting Videos"},{"location":"en/plotting/#engraver","text":"","title":"Engraver"},{"location":"en/pocc-mobile-app/","text":"Introduction The development of the PoC Consortium (PoCC) mobile wallet for Burst has been announced August, 11th 2017 in the original PoCC announcement on bitcointalk[1]. One month later, a beta-test version has been published[2] and the official released followed by end of September[3] Features Watch only addresses Currency conversion Client-side encryption and decryption QR code support Secure and easy passphrase generation I18N - Internationalization The major part of the wallet localization is done via a .json file containing definitions for text strings used in the wallet. The naming is such, that a 2-letter code denotes the language. en.json is the source file (see below). If you want to translate this file into some language, you need to translate the \u201cCreate New Account\u201d, \u201cDone\u201d etc. not those in ALLCAPS. A major constraint is, that the translated text not only be correct and stylistic, but also of about the same length as the original content. It can be shorter, but not much longer. The 2-letter language code is ISO 639-1 Translation priorities done languages: Chinese, English, French, German, Greek, Hindi, Hungarian, Italian, Korean, Polish, Russian, Slovak, Spanish, Swedish, Tamil work-in-progress: -- wanted languages: Danish, Dutch, Japanese, Portuguese, Romanian and basically everything else en.json localization file { \"CREATE\": { \"ACTION_BAR_TITLE\": \"Create New Account\", \"DONE\": \"Done\", \"GENERATE_AGAIN\": \"Generate Again\", \"INFO_SEED\": \"Tap and swipe over this area.\", \"INFO_SEED_FINISHED\": \"Seed collected.\", \"INFO_STEP_ONE\": \"First, create a random seed for the generation of your passphrase.\", \"INFO_STEP_TWO\": \"Now you have to memorize all 12 words of your passphrase in the right order.\", \"INFO_STEP_TWO_ACTION\": \"Write down the following words separated by space and keep them secret.\", \"INFO_STEP_THREE\": \"Please enter the words of your passphrase again.\", \"INFO_STEP_THREE_ACTION\": \"Write down word #{{value}} and select it.\", \"INFO_STEP_FOUR\": \"Please set a six-digit pin code for your account. The pin code is used to approve outgoing transactions.\", \"PIN_INPUT_HINT\": \"PIN\", \"POSSIBILITY_INPUT_HINT\": \"Word #{{value}}\", \"NEXT\": \"Next\" }, \"IMPORT\" : { \"ACTION_BAR_TITLE\": \"Import Existing Account\", \"ACTIVE_ACCOUNT\": \"Active Account\", \"ACTIVE_ACCOUNT_DESCRIPTION\": \"An active account offers full functionality. You can send and receive Burstcoins. In addition, you can check your balance and see the history of your transactions.\", \"ACTIVE_ACCOUNT_INPUT_HINT\": \"Passphrase\", \"ACTIVE_ACCOUNT_PIN_INFO\": \"Please set a six-digit pin code for your account. The pin code is used to approve outgoing transactions.\", \"DONE\": \"Done\", \"IMPORT\": \"Import\", \"INFO\": \"Import an active account by entering its passphrase. Otherwise, import an offline account by entering its Burstcoin address.\", \"NEXT\": \"Next\", \"OFFLINE_ACCOUNT\": \"Offline Account\", \"OFFLINE_ACCOUNT_DESCRIPTION\": \"An offline account offers the same functionality than an active account, except you cannot send Burstcoins to another address.\", \"OFFLINE_ACCOUNT_INPUT_HINT\": \"BURST-XXXX-XXXX-XXXX-XXXXX\", \"PIN_INPUT_HINT\": \"PIN\", \"SHOW\" : { \"QUESTION\": \"Is this your Burst address ?\" } }, \"TABS\": { \"ACCOUNTS\": { \"ACTIVATE\": { \"ACTION_BAR_TITLE\": \"Activate Account\", \"DONE\": \"Done\", \"ENTER_PASSPHRASE\": \"Enter the passphrase of the account {{value}} here.\", \"ENTER_PIN\": \"Set a six-digit PIN code.\", \"PASSPHRASE_INPUT_HINT\": \"Passphrase\", \"PIN_INPUT_HINT\": \"Pin\", \"NEXT\": \"Next\" }, \"BALANCE\": \"Balance\", \"CREATE\": \"Create\", \"IMPORT\": \"Import\", \"REMOVE\": \"Do you really want to remove this account ?\", \"TITLE\": \"Accounts\" }, \"BALANCE\": { \"ACTIVATE\": \"Activate\", \"BALANCE\": \"Balance\", \"SEND\": \"Send\", \"TITLE\": \"Balance\" }, \"HISTORY\": { \"TITLE\": \"History\", \"DECRYPT\": \"Decrypt\", \"DECRYPT_IMPOSSIBLE\": \"Could not be decrypted!\", \"PIN_INPUT_HINT\": \"Pin\" }, \"SETTINGS\": { \"ABOUT\": { \"ABOUT\": \"About\", \"ASSOCIATION\": \"In association with\", \"DEVELOPED\": \"Developed by\", \"TWITTER\": \"Follow us on twitter to get updates on our projects!\", \"VERSION\": \"Version\" }, \"CURRENCY\": { \"CURRENCY\": \"Currency\" }, \"DOCUMENTATION\": { \"DOCUMENTATION\": \"Documentation\" }, \"LANGUAGE\": { \"LANGUAGE\": \"Language\" }, \"NODE\": { \"INFO\": \"The Burst node is used to communicate with the Burst network\", \"NODE\": \"Node\" }, \"SUPPORT\": { \"CONTRIBUTION\": \"We also appreciate non-monetary contributions\", \"DONATE\": \"You like our app ? Support us by donating BURST!\", \"SUPPORT\": \"Support\" }, \"TITLE\": \"Settings\" } }, \"SEND\": { \"ACCEPT\": \"Accept\", \"ACTION_BAR_TITLE\": \"Send BURST\", \"ADD_CONTACT\": \"Add new contact\", \"AMOUNT\": \"Amount\", \"BACK\": \"Back\", \"BALANCE\": \"Balance\", \"CONTACTS\": \"Contacts\", \"FEE\": \"Fee\", \"FIAT\": \"Fiat currency to BURST\", \"MESSAGE\": \"Message\", \"PIN_INPUT_HINT\": \"Pin\", \"RECIPIENT\": \"Recipient\", \"VERIFY\": \"Verify\" }, \"START\" : { \"CREATE\": \"Create\", \"IMPORT\": \"Import\", \"INFO\": \"No account created yet. Choose to import an existing account or create a new one!\" }, \"NOTIFICATIONS\" : { \"ADDRESS\": \"Please enter a valid Burstcoin address!\", \"COPIED\": \"Copied address {{value}} to clipboard!\", \"CONTACT_ADDED\": \"Contact added successfully!\", \"DECIMAL_AMOUNT\": \"Please enter a decimal number for the amount of BURST you want to send!\", \"DECIMAL_FEE\": \"Please enter a decimal number (atleast 1) as fee!\", \"ENTER_SOMETHING\": \"Please enter something!\", \"EXCEED\": \"Amount and Fee exceed your balance!\", \"PIN\": \"Please enter a six-digit number as Pin!\", \"REMOVE\": \"Successfully removed account!\", \"SELECTED\": \"Selected account: {{value}}\", \"TRANSACTION\": \"Transaction successful!\", \"UPDATE_CURRENCY\": \"Currency successfully updated!\", \"UDPDATE_LANGUAGE\": \"Language successfully updated!\", \"UPDATE_NODE\": \"Node successfully updated!\", \"WRONG_PASSPHRASE\": \"Wrong passphrase! The provided passphrase does not generate the public key assigned to your account!\", \"WRONG_PIN\": \"The provided pin does not match the account's pin!\", \"ERRORS\": { \"ACCOUNT_ID\": \"Cannot generate account id from public key!\", \"ADDRESS\": \"Cannot generate BURST address from account id!\", \"CONNECTION\": \"Failed fetching data. Check your internet connection!\", \"CONTACT\":\"Failed to add new contact!\", \"CURRENCY\": \"Currency update failed!\", \"KEYPAIR\": \"Failed to generate keypair for passphrase!\", \"LANGUAGE\": \"Language change failed!\", \"NODE\": \"Node update failed!\", \"NO_PUBLIC_KEY\": \"Recipient has no public key yet! Sending of encrypted message not possible!\", \"QR_CODE\": \"Could not scan QR code!\", \"REDIRECT\": \"Cannot open send BURST page! Current account is not active!\", \"REMOVE\": \"Could not remove account!\", \"UPDATE\": \"Update of account failed!\", \"UNKNOWN_ACCOUNT\": \"Account is still unknown. No transactions yet!\" } } } References https://bitcointalk.org/index.php?topic=2080040.0 https://forums.getburst.net/t/one-month-of-pocc/603 https://forums.getburst.net/t/burst-on-the-go-the-poc-consortium-releases-their-android-wallet/794","title":"PoCC Mobile App"},{"location":"en/pocc-mobile-app/#introduction","text":"The development of the PoC Consortium (PoCC) mobile wallet for Burst has been announced August, 11th 2017 in the original PoCC announcement on bitcointalk[1]. One month later, a beta-test version has been published[2] and the official released followed by end of September[3]","title":"Introduction"},{"location":"en/pocc-mobile-app/#features","text":"Watch only addresses Currency conversion Client-side encryption and decryption QR code support Secure and easy passphrase generation","title":"Features"},{"location":"en/pocc-mobile-app/#i18n-internationalization","text":"The major part of the wallet localization is done via a .json file containing definitions for text strings used in the wallet. The naming is such, that a 2-letter code denotes the language. en.json is the source file (see below). If you want to translate this file into some language, you need to translate the \u201cCreate New Account\u201d, \u201cDone\u201d etc. not those in ALLCAPS. A major constraint is, that the translated text not only be correct and stylistic, but also of about the same length as the original content. It can be shorter, but not much longer. The 2-letter language code is ISO 639-1","title":"I18N - Internationalization"},{"location":"en/pocc-mobile-app/#translation-priorities","text":"done languages: Chinese, English, French, German, Greek, Hindi, Hungarian, Italian, Korean, Polish, Russian, Slovak, Spanish, Swedish, Tamil work-in-progress: -- wanted languages: Danish, Dutch, Japanese, Portuguese, Romanian and basically everything else en.json localization file { \"CREATE\": { \"ACTION_BAR_TITLE\": \"Create New Account\", \"DONE\": \"Done\", \"GENERATE_AGAIN\": \"Generate Again\", \"INFO_SEED\": \"Tap and swipe over this area.\", \"INFO_SEED_FINISHED\": \"Seed collected.\", \"INFO_STEP_ONE\": \"First, create a random seed for the generation of your passphrase.\", \"INFO_STEP_TWO\": \"Now you have to memorize all 12 words of your passphrase in the right order.\", \"INFO_STEP_TWO_ACTION\": \"Write down the following words separated by space and keep them secret.\", \"INFO_STEP_THREE\": \"Please enter the words of your passphrase again.\", \"INFO_STEP_THREE_ACTION\": \"Write down word #{{value}} and select it.\", \"INFO_STEP_FOUR\": \"Please set a six-digit pin code for your account. The pin code is used to approve outgoing transactions.\", \"PIN_INPUT_HINT\": \"PIN\", \"POSSIBILITY_INPUT_HINT\": \"Word #{{value}}\", \"NEXT\": \"Next\" }, \"IMPORT\" : { \"ACTION_BAR_TITLE\": \"Import Existing Account\", \"ACTIVE_ACCOUNT\": \"Active Account\", \"ACTIVE_ACCOUNT_DESCRIPTION\": \"An active account offers full functionality. You can send and receive Burstcoins. In addition, you can check your balance and see the history of your transactions.\", \"ACTIVE_ACCOUNT_INPUT_HINT\": \"Passphrase\", \"ACTIVE_ACCOUNT_PIN_INFO\": \"Please set a six-digit pin code for your account. The pin code is used to approve outgoing transactions.\", \"DONE\": \"Done\", \"IMPORT\": \"Import\", \"INFO\": \"Import an active account by entering its passphrase. Otherwise, import an offline account by entering its Burstcoin address.\", \"NEXT\": \"Next\", \"OFFLINE_ACCOUNT\": \"Offline Account\", \"OFFLINE_ACCOUNT_DESCRIPTION\": \"An offline account offers the same functionality than an active account, except you cannot send Burstcoins to another address.\", \"OFFLINE_ACCOUNT_INPUT_HINT\": \"BURST-XXXX-XXXX-XXXX-XXXXX\", \"PIN_INPUT_HINT\": \"PIN\", \"SHOW\" : { \"QUESTION\": \"Is this your Burst address ?\" } }, \"TABS\": { \"ACCOUNTS\": { \"ACTIVATE\": { \"ACTION_BAR_TITLE\": \"Activate Account\", \"DONE\": \"Done\", \"ENTER_PASSPHRASE\": \"Enter the passphrase of the account {{value}} here.\", \"ENTER_PIN\": \"Set a six-digit PIN code.\", \"PASSPHRASE_INPUT_HINT\": \"Passphrase\", \"PIN_INPUT_HINT\": \"Pin\", \"NEXT\": \"Next\" }, \"BALANCE\": \"Balance\", \"CREATE\": \"Create\", \"IMPORT\": \"Import\", \"REMOVE\": \"Do you really want to remove this account ?\", \"TITLE\": \"Accounts\" }, \"BALANCE\": { \"ACTIVATE\": \"Activate\", \"BALANCE\": \"Balance\", \"SEND\": \"Send\", \"TITLE\": \"Balance\" }, \"HISTORY\": { \"TITLE\": \"History\", \"DECRYPT\": \"Decrypt\", \"DECRYPT_IMPOSSIBLE\": \"Could not be decrypted!\", \"PIN_INPUT_HINT\": \"Pin\" }, \"SETTINGS\": { \"ABOUT\": { \"ABOUT\": \"About\", \"ASSOCIATION\": \"In association with\", \"DEVELOPED\": \"Developed by\", \"TWITTER\": \"Follow us on twitter to get updates on our projects!\", \"VERSION\": \"Version\" }, \"CURRENCY\": { \"CURRENCY\": \"Currency\" }, \"DOCUMENTATION\": { \"DOCUMENTATION\": \"Documentation\" }, \"LANGUAGE\": { \"LANGUAGE\": \"Language\" }, \"NODE\": { \"INFO\": \"The Burst node is used to communicate with the Burst network\", \"NODE\": \"Node\" }, \"SUPPORT\": { \"CONTRIBUTION\": \"We also appreciate non-monetary contributions\", \"DONATE\": \"You like our app ? Support us by donating BURST!\", \"SUPPORT\": \"Support\" }, \"TITLE\": \"Settings\" } }, \"SEND\": { \"ACCEPT\": \"Accept\", \"ACTION_BAR_TITLE\": \"Send BURST\", \"ADD_CONTACT\": \"Add new contact\", \"AMOUNT\": \"Amount\", \"BACK\": \"Back\", \"BALANCE\": \"Balance\", \"CONTACTS\": \"Contacts\", \"FEE\": \"Fee\", \"FIAT\": \"Fiat currency to BURST\", \"MESSAGE\": \"Message\", \"PIN_INPUT_HINT\": \"Pin\", \"RECIPIENT\": \"Recipient\", \"VERIFY\": \"Verify\" }, \"START\" : { \"CREATE\": \"Create\", \"IMPORT\": \"Import\", \"INFO\": \"No account created yet. Choose to import an existing account or create a new one!\" }, \"NOTIFICATIONS\" : { \"ADDRESS\": \"Please enter a valid Burstcoin address!\", \"COPIED\": \"Copied address {{value}} to clipboard!\", \"CONTACT_ADDED\": \"Contact added successfully!\", \"DECIMAL_AMOUNT\": \"Please enter a decimal number for the amount of BURST you want to send!\", \"DECIMAL_FEE\": \"Please enter a decimal number (atleast 1) as fee!\", \"ENTER_SOMETHING\": \"Please enter something!\", \"EXCEED\": \"Amount and Fee exceed your balance!\", \"PIN\": \"Please enter a six-digit number as Pin!\", \"REMOVE\": \"Successfully removed account!\", \"SELECTED\": \"Selected account: {{value}}\", \"TRANSACTION\": \"Transaction successful!\", \"UPDATE_CURRENCY\": \"Currency successfully updated!\", \"UDPDATE_LANGUAGE\": \"Language successfully updated!\", \"UPDATE_NODE\": \"Node successfully updated!\", \"WRONG_PASSPHRASE\": \"Wrong passphrase! The provided passphrase does not generate the public key assigned to your account!\", \"WRONG_PIN\": \"The provided pin does not match the account's pin!\", \"ERRORS\": { \"ACCOUNT_ID\": \"Cannot generate account id from public key!\", \"ADDRESS\": \"Cannot generate BURST address from account id!\", \"CONNECTION\": \"Failed fetching data. Check your internet connection!\", \"CONTACT\":\"Failed to add new contact!\", \"CURRENCY\": \"Currency update failed!\", \"KEYPAIR\": \"Failed to generate keypair for passphrase!\", \"LANGUAGE\": \"Language change failed!\", \"NODE\": \"Node update failed!\", \"NO_PUBLIC_KEY\": \"Recipient has no public key yet! Sending of encrypted message not possible!\", \"QR_CODE\": \"Could not scan QR code!\", \"REDIRECT\": \"Cannot open send BURST page! Current account is not active!\", \"REMOVE\": \"Could not remove account!\", \"UPDATE\": \"Update of account failed!\", \"UNKNOWN_ACCOUNT\": \"Account is still unknown. No transactions yet!\" } } }","title":"Translation priorities"},{"location":"en/pocc-mobile-app/#references","text":"https://bitcointalk.org/index.php?topic=2080040.0 https://forums.getburst.net/t/one-month-of-pocc/603 https://forums.getburst.net/t/burst-on-the-go-the-poc-consortium-releases-their-android-wallet/794","title":"References"},{"location":"en/proof-of-capacity/","text":"Introduction Proof of Capacity PoC (also called Proof of Space) is, in general, a mechanism to ensure that a party has dedicated a particular (significant) amount of storage space towards a specific goal. Burst uses PoC in the process of transaction verification for the validation and generation of blocks. Here, miners use a given amount of disk space to fill with plots . The more disk space is plotted, the higher the chances to generate (win) a block. PoC is thus in direct contrast to other consensus algorithms like Proof of Work (PoW) and Proof of Stake (PoS) where block generators need to proof the performance of some difficult computations or the ownership of a significant amount of currency, respectively. Advantages of PoC In contrast to PoW, PoC is considered to be more eco-friendly [1]. While PoW requires expensive computations each time a block is generated, PoC puts most of the required computational costs up-front in the plotting process[2]. Reading the plots in order to proof the designated disk space investment is much cheaper. Additionaly, users can mine using their existing hardware, instead of having to to invest in special purpose hardware like e.g. ASICS for Bitcoin mining. In contrast to PoS, PoC allows a fairer distribution of coins as they are generated over time and assigned to active miners. In a PoS coin like NXT, the number of coins is fixed from the beginning and has to be distributed somehow initially. This leads to an unequal distribution of wealth to a few selected early adopters, e.g. via airdrops. Further Reading Proofs of Space paper by Dziembowski, Faust, Kolmogorov and Pietrzak SpaceMint paper by Sunoo Park, Kwon, Fuchsbauer, Pietrzak et al. References https://www.burstcoin.ist/how-burst-puts-bitcoin-to-shame/ https://www.burstcoin.ist/the-burst-mining-process-explained/","title":"Proof of Capacity"},{"location":"en/proof-of-capacity/#introduction","text":"Proof of Capacity PoC (also called Proof of Space) is, in general, a mechanism to ensure that a party has dedicated a particular (significant) amount of storage space towards a specific goal. Burst uses PoC in the process of transaction verification for the validation and generation of blocks. Here, miners use a given amount of disk space to fill with plots . The more disk space is plotted, the higher the chances to generate (win) a block. PoC is thus in direct contrast to other consensus algorithms like Proof of Work (PoW) and Proof of Stake (PoS) where block generators need to proof the performance of some difficult computations or the ownership of a significant amount of currency, respectively.","title":"Introduction"},{"location":"en/proof-of-capacity/#advantages-of-poc","text":"In contrast to PoW, PoC is considered to be more eco-friendly [1]. While PoW requires expensive computations each time a block is generated, PoC puts most of the required computational costs up-front in the plotting process[2]. Reading the plots in order to proof the designated disk space investment is much cheaper. Additionaly, users can mine using their existing hardware, instead of having to to invest in special purpose hardware like e.g. ASICS for Bitcoin mining. In contrast to PoS, PoC allows a fairer distribution of coins as they are generated over time and assigned to active miners. In a PoS coin like NXT, the number of coins is fixed from the beginning and has to be distributed somehow initially. This leads to an unequal distribution of wealth to a few selected early adopters, e.g. via airdrops.","title":"Advantages of PoC"},{"location":"en/proof-of-capacity/#further-reading","text":"Proofs of Space paper by Dziembowski, Faust, Kolmogorov and Pietrzak SpaceMint paper by Sunoo Park, Kwon, Fuchsbauer, Pietrzak et al.","title":"Further Reading"},{"location":"en/proof-of-capacity/#references","text":"https://www.burstcoin.ist/how-burst-puts-bitcoin-to-shame/ https://www.burstcoin.ist/the-burst-mining-process-explained/","title":"References"},{"location":"en/publications-burst/","text":"Introduction A collection of publications regarding Burst and related technologies. Research Publications BURST/PoC 2018-06-12 Cryptocurrency performance analysis of Burstcoin mining 2018-10-09 Survey of Consensus Protocols 2018-09-18 An Overview of Blockchain and Consensus Protocols for IoT Networks 2018-11-15 Proof of Space from Stacked Expanders.pdf 2018-11-28 Taxonomy Of Blockchain Technologies, Principles Of Identification And Classification SHABAL: 2008-10-28 Shabal, a Submission to NIST\u2019s Cryptographic Hash Algorithm Competition FPGA Implementations of SHA-3 Candidates: CubeHash, Gr\u00f8stl, LANE, Shabal and Spectral Hash On the pseudorandomness of Shabal\u2019s keyed permutation Uniform Evaluation of Hardware Implementations of the Round-Two SHA-3 Candidates 2009-05-07 Indifferentiability with Distinguishers: Why Shabal Does Not Require Ideal Ciphers Low-weight Pseudo Collision Attack on Shabal and Preimage Attack on Reduced Shabal-512 A Low-Area yet Performant FPGA Implementation of Shabal Unfolding Method for Shabal on Virtex-5 FPGAs: Concrete Results 2010-07-20 Distinguisher for Shabal\u2019s Permutation Function 2010-10-01 Comparison of seven SHA-3 candidates software implementations on smart cards Performance Analysis of the SHA-3 Candidates on Exotic Multi-Core Architectures 2010-11-12 Quantum attacks against Blue Midnight Wish, ECHO, Fugue, Gr\u00f8stl, Hamsi, JH, Keccak, Shabal, SHAvite-3, SIMD, and Skein 2011-08-22 Cryptanalysis of hash functions in particular the SHA-3 contenders Shabal and Blake 2011-10-03 Conception, preuves et analyse de fonctions de hachage cryptographiques (PhD Thesis Thomas Fuhr) Curve25519: Fast Implementation of Curve25519 Using AVX2 General Publications News 2017-12-05 Stromfresser Bitcoin, Immo.baz.ch 2017-11-21 So dreckig wie zwei Jahre Berlin, Boerse.ard.de 2017-10-22 Bitcoins zijn niets voor de verantwoorde belegger, Hpdetijd.nl Articles Proof of Capacity (Cryptocurrency) on Investopedia Burstcoin on CCN Cryptocurrency News Articles 2018-12-03 Burstcoin (BURST): A Dark Horse That Could Become A Major Cryptocurrency, The King of Proof of Capacity, Crypto.IQ 2018-11-27 Burstcoin: A Diamond In The Rough That Will Prosper Long Term, Genesisblocknews.com 2018-10-20 Exclusive Interview With Burst Developer Daniel Jones (podcast), Bitcoin News 2018-10-11 Burstcoin (BURST): Mining Made Easy and Accessible With Hard Disk Space, Today's Gazette 2018-10-03 BCB Interview - Daniel Jones, Blockchain Beach (video) 2017-12-23 Crypto Watch: Burstcoin (BURST) Price Goes 4x In 29 Hours. What Is BURST And Why Is It Surging?, Forbes 2017-03-04 A (Short) Guide to Blockchain Consensus Protocols, Coindesk 2016-12-15 Want to Get Into Cryptocurrency? BurstCoin is the Way Forward, Dailysquib.co.uk 2015-01-27 Cryptocurrency BURST Makes Smart Contracts a Reality, What Happened to Ethereum?, CCN 2014-10-30 HDD Proof of Capacity Mining, is it Viable?, CCN Proof Of Life 2018-10-09 Exclusive: Daniel Jones on Off-Grid Crypto Transactions with \u201cProof of Life\u201d, Bitcoin News (podcast) 2018-10-05 BCB Interviews - Proof of Life, Blockchain Beach (video) 2018-10-02 Burstcoin Developers Complete On-Chain Crypto Transaction without the Internet, BTC Manager 2018-09-25 Burst Coin Developers Broadcasted A Transaction Via Radio Waves And A Solar-Powered System, XBT 2018-09-24 Crypto Can Now Be Sent Through Radio Waves, Crypto Digest 2018-09-23 This Off-Grid, Solar-Powered System Sends Crypto Through Radio Waves, CCN 2018-09-18 Devs used solar-powered radios to complete first \u2018off-grid\u2019 cryptocurrency transaction, The Next Web 2018-09-18 Developer Completes \u201cProof-of-Life\u201d Off-Grid Crypto Transaction Primed for Post-Apocalypse, Cointelegraph Community contributions 2018-06-09 Burst\u200a\u2014\u200aPart 6: The Burst Dymaxion, Medium/HackerNoon 2018-02-04 Burst\u200a\u2014\u200aPart 5: How to Buy Burst?, Medium/HackerNoon 2018-01-25 Burst\u200a\u2014\u200aPart 4: Network Analysis, Medium/HackerNoon 2018-01-17 Burst\u200a\u2014\u200aPart 3: Proof-of-Capacity, The Green Alternative?, Medium/HackerNoon 2018-01-09 Burst\u200a\u2014\u200aPart 2: macOS Wallet Setup Tutorial, Medium/HackerNoon 2018-01-08 Burst\u200a\u2014\u200aPart 1: What is Burstcoin?, Medium/HackerNoon Commercial Publications Articles Contributions needed","title":"Publications - Burst"},{"location":"en/publications-burst/#introduction","text":"A collection of publications regarding Burst and related technologies.","title":"Introduction"},{"location":"en/publications-burst/#research-publications","text":"","title":"Research Publications"},{"location":"en/publications-burst/#burstpoc","text":"2018-06-12 Cryptocurrency performance analysis of Burstcoin mining 2018-10-09 Survey of Consensus Protocols 2018-09-18 An Overview of Blockchain and Consensus Protocols for IoT Networks 2018-11-15 Proof of Space from Stacked Expanders.pdf 2018-11-28 Taxonomy Of Blockchain Technologies, Principles Of Identification And Classification","title":"BURST/PoC"},{"location":"en/publications-burst/#shabal","text":"2008-10-28 Shabal, a Submission to NIST\u2019s Cryptographic Hash Algorithm Competition FPGA Implementations of SHA-3 Candidates: CubeHash, Gr\u00f8stl, LANE, Shabal and Spectral Hash On the pseudorandomness of Shabal\u2019s keyed permutation Uniform Evaluation of Hardware Implementations of the Round-Two SHA-3 Candidates 2009-05-07 Indifferentiability with Distinguishers: Why Shabal Does Not Require Ideal Ciphers Low-weight Pseudo Collision Attack on Shabal and Preimage Attack on Reduced Shabal-512 A Low-Area yet Performant FPGA Implementation of Shabal Unfolding Method for Shabal on Virtex-5 FPGAs: Concrete Results 2010-07-20 Distinguisher for Shabal\u2019s Permutation Function 2010-10-01 Comparison of seven SHA-3 candidates software implementations on smart cards Performance Analysis of the SHA-3 Candidates on Exotic Multi-Core Architectures 2010-11-12 Quantum attacks against Blue Midnight Wish, ECHO, Fugue, Gr\u00f8stl, Hamsi, JH, Keccak, Shabal, SHAvite-3, SIMD, and Skein 2011-08-22 Cryptanalysis of hash functions in particular the SHA-3 contenders Shabal and Blake 2011-10-03 Conception, preuves et analyse de fonctions de hachage cryptographiques (PhD Thesis Thomas Fuhr)","title":"SHABAL:"},{"location":"en/publications-burst/#curve25519","text":"Fast Implementation of Curve25519 Using AVX2","title":"Curve25519:"},{"location":"en/publications-burst/#general-publications","text":"","title":"General Publications"},{"location":"en/publications-burst/#news","text":"2017-12-05 Stromfresser Bitcoin, Immo.baz.ch 2017-11-21 So dreckig wie zwei Jahre Berlin, Boerse.ard.de 2017-10-22 Bitcoins zijn niets voor de verantwoorde belegger, Hpdetijd.nl","title":"News"},{"location":"en/publications-burst/#articles","text":"Proof of Capacity (Cryptocurrency) on Investopedia Burstcoin on CCN","title":"Articles"},{"location":"en/publications-burst/#cryptocurrency-news","text":"","title":"Cryptocurrency News"},{"location":"en/publications-burst/#articles_1","text":"2018-12-03 Burstcoin (BURST): A Dark Horse That Could Become A Major Cryptocurrency, The King of Proof of Capacity, Crypto.IQ 2018-11-27 Burstcoin: A Diamond In The Rough That Will Prosper Long Term, Genesisblocknews.com 2018-10-20 Exclusive Interview With Burst Developer Daniel Jones (podcast), Bitcoin News 2018-10-11 Burstcoin (BURST): Mining Made Easy and Accessible With Hard Disk Space, Today's Gazette 2018-10-03 BCB Interview - Daniel Jones, Blockchain Beach (video) 2017-12-23 Crypto Watch: Burstcoin (BURST) Price Goes 4x In 29 Hours. What Is BURST And Why Is It Surging?, Forbes 2017-03-04 A (Short) Guide to Blockchain Consensus Protocols, Coindesk 2016-12-15 Want to Get Into Cryptocurrency? BurstCoin is the Way Forward, Dailysquib.co.uk 2015-01-27 Cryptocurrency BURST Makes Smart Contracts a Reality, What Happened to Ethereum?, CCN 2014-10-30 HDD Proof of Capacity Mining, is it Viable?, CCN","title":"Articles"},{"location":"en/publications-burst/#proof-of-life","text":"2018-10-09 Exclusive: Daniel Jones on Off-Grid Crypto Transactions with \u201cProof of Life\u201d, Bitcoin News (podcast) 2018-10-05 BCB Interviews - Proof of Life, Blockchain Beach (video) 2018-10-02 Burstcoin Developers Complete On-Chain Crypto Transaction without the Internet, BTC Manager 2018-09-25 Burst Coin Developers Broadcasted A Transaction Via Radio Waves And A Solar-Powered System, XBT 2018-09-24 Crypto Can Now Be Sent Through Radio Waves, Crypto Digest 2018-09-23 This Off-Grid, Solar-Powered System Sends Crypto Through Radio Waves, CCN 2018-09-18 Devs used solar-powered radios to complete first \u2018off-grid\u2019 cryptocurrency transaction, The Next Web 2018-09-18 Developer Completes \u201cProof-of-Life\u201d Off-Grid Crypto Transaction Primed for Post-Apocalypse, Cointelegraph","title":"Proof Of Life"},{"location":"en/publications-burst/#community-contributions","text":"2018-06-09 Burst\u200a\u2014\u200aPart 6: The Burst Dymaxion, Medium/HackerNoon 2018-02-04 Burst\u200a\u2014\u200aPart 5: How to Buy Burst?, Medium/HackerNoon 2018-01-25 Burst\u200a\u2014\u200aPart 4: Network Analysis, Medium/HackerNoon 2018-01-17 Burst\u200a\u2014\u200aPart 3: Proof-of-Capacity, The Green Alternative?, Medium/HackerNoon 2018-01-09 Burst\u200a\u2014\u200aPart 2: macOS Wallet Setup Tutorial, Medium/HackerNoon 2018-01-08 Burst\u200a\u2014\u200aPart 1: What is Burstcoin?, Medium/HackerNoon","title":"Community contributions"},{"location":"en/publications-burst/#commercial-publications","text":"","title":"Commercial Publications"},{"location":"en/publications-burst/#articles_2","text":"Contributions needed","title":"Articles"},{"location":"en/qbundle/","text":"Introduction The easiest choice for beginners using Windows is to download Qbundle. QBundle is a convenient launcher which installs the BRS local wallet, plotting software, and mining software with a few clicks. Installation guide Download the QBundle installation files and return here to complete the installation. Sets of instructions are grouped logically, with reference images of installation screens immediately following each section. Images may vary from the actual installation screens depending on your version of Windows and internet browser. Download the installation Files The installation files are located on BAT's github: https://www.burst-coin.org/download-wallet . Open this link in a new browser tab if possible. After following this link: Click on \"Download wallet\". Select your operating system: (Please note: If your operating system is not Windows, QBundle will not be available and you will need to choose an option specific to your operating system.) Select Qbundle to be redirected to the PoC Consortium GitHub site. GitHub is a software development platform and hosts the files needed for installation. Future releases will be located here as well. Download and save the latest release, identified by a green indicator. As of the writing of this guide, the latest release is Version 2.5.1. The installation file is QBundle2.5.1.zip. (Make a note of the saved location) Install the software Locate the saved file. A common location is C: Users/\"user name\"/Downloads. You may move this file to another location if you wish. Extract the included files using Windows \"Extract all\" button if available. If you do not have this functionality, you may need a utility to \"unzip\" the folder. Launch the setup of QBundle by clicking on the extracted version of the following file: Name: BurstWallet Type: Application. Proceed through the Windows warnings related to protecting your computer by clicking on \"More Info\" followed by \"Run Anyway\". The installation utility will check for portable Java and the BRS wallet. Click on \"Download missing components\" Verify that the check box for \"allow connection to remote resources for verifications and updates\" is checked. Several windows will appear as each component and is downloaded and extracted. When all of the components have downloaded. Click on \"continue\". Setup will complete and a new wallet will be displayed showing a status of \"stopped\". Click on \"Database\" on the wallet's top menu bar and select \"Change Database\". Select the radio button next to \"Portable MariaDB\" and Click \"Next\". Click \"Yes\" when asked if you want to download and install MariaDB. After installation is complete, click \"Database\" on the wallets to menu bar, verify that \"No Copy\" is selected. Click \"Save and close\". Change Java settings by clicking on \"edit\" in the top menu bar. Select \"settings\". The settings window will appear. Select \"Java\" in the left menu bar. Verify that the radio button for \"Use Portable java\" is selected. Save your change and exit. Bootstrap the blockchain (populate the database) New wallets immediately begin to synchronize with the Burst blockchain. This can be a time consuming process depending on your internet bandwidth and the processing speed of your computer. For a faster alternative, download a \"bootstrap\" copy of the blockchain which contains the genesis block and all confirmed blocks through the time that the bootstrap copy was created. Only the more recent blocks will then synchronize through the regular peer to peer synchronization process. To begin the bootstrap process, Select \"Database\" in the top menu bar. Select \"Bootstrap Chain\". In \"Settings\", verify that the Cryptoguru repository is selected. Click \"Start Import\". You will receive a notice that all existing data in your database will be erased. Click \"Yes\" to continue. Wait for synchronization to complete before proceeding. Block time will appear in orange while syncing, and green when fully synchronized. Create a new account and passphrase Please note: Before proceeding with the next step, it is important that you fully understand the security features of the Burst passphrase. If you have not done so already, please review \"Securing your Burst\". A link is located on the main page of the Burst Wiki. If you are a new user and do not already have an account, click on \"New? Create Your Account\". A 12 word passphrase will be generated automatically. You can extend the passphrase by adding a few extra words, numbers, or special characters (Unicode only). This is the only opportunity that you will have to modify the passphrase. Modifying the passphrase is unnecessary as it is considered to be secure. However, some feel that security is further enhanced by adding something additional. Never reduce security by shortening the passphrase. Record this passphrase on paper for now, including any modifications that you have made. You can store this passphrase more securely later. When you are satisfied with your passphrase, Click \"Next\". Type the passphrase, exactly as you have recorded it on paper, in the verification box. Click \"Next\" to open your new wallet. Locate and record your new Burst account number on paper. It is located in the top left corner of your wallet. Burst account numbers contain alphanumeric characters in five segments. The first segment is always \"BURST\". Click on \"Wallet\" and then click on \"Stop Wallet\". Restart the wallet by clicking on \"Wallet\" again and then clicking on \"Start Wallet\". Test your passphrase by clicking on \"Returning user?\" and typing it into the passphrase box. Click on the arrow located to the right of the box. When the wallet is opened, if the Burst account number displayed in the wallet matches the record that you made of your Burst account number, then you have successfully completed the setup process. Please note: If you enter your passphrase incorrectly, you will generate a new account. If this occurs, simply close the wallet and try again. Install additional QBundle applications Blago's miner (modified by Quibus and JohnnyFFM) is the default mining software packaged with QBundle. It can be used for pool mining or for solo mining. Please note: If solo mining, running a fully synchronized local wallet is required. The passphrase for the mining account associated with your plot files must be provided and will be stored in plain text in QBundle/BlagoMiner/miner.conf. If desired, you can create an account specifically for mining rather than using a single wallet for both mining and maintaining significant balances. To install, click on \"File\" and then \"Application Manager\". Place a check mark in the box next to \"Blago's Miner\". Click on \"Install/Update\" After the software downloads and extracts, verify that an extracted (unzipped) folder with the name \"BlagoMiner\" is located in the main QBundle folder. If the file does not appear, locate it a sub folder of the zipped version and copy it into the main folder (same level as zipped version) as the final installation step. Open the miner by clicking \"Tools\" and the \"Miner\". The following screen will appear. All settings provided in the interface shown above will be passed to the miner.conf file. This file is located in the Qbundle/BlagoMiner folder. Users can edit this file directly. If you will be solo mining, click on the \"solo mining\" radio button. If you will be pool mining, click on \"Select predefined pool\". Required configuration data will be populated automatically. If your desired pool is not listed, obtain the configuration information directly from the pool operator and enter it manually (mining server, update server, info server, deadline limit, and port information). Set the deadline limit. Calculators for this purpose are provided by each pool. If your calculated deadline (based on your available plot size) exceeds your pool's maximum deadline, this limit should be reduced to the maximum accepted by the pool. Optional setup: \"Use HDD wakeup\" - a script will run which prevents your hard drives from entering sleep mode. \"Show winner information\" - the account which forges each block will be displayed in the miner console. The info server does not support HTTPS so the address of the local wallet (localhost or 127.0.0.1) and port number 8125 should be provided. \"Use multithreading\" - Multithreading may improve usage of CPU resources when calculating deadlines. Add your plotfile paths to \"My Plotfiles\" by clicking on \"Import Plotfiles\" and locating each plotfile or folder containing plotfiles. The miner will use all plot files that are found in configured folders. It is best if the folders used only contain individual plot files. Plotfiles that are removed using the \"Remove Plotfiles\" button are not deleted from storage, only their path in the list of plot files is removed. To start the miner, click on the \"Start mining\" button. When the miner is running, pool and plot file information is displayed in the mining console. The miner receives mining information (block height, base target, etc.) and reads through the configured plot files to locate deadlines. Deadlines found are sent to the pool if they are less than or equal to the configured deadline limit. The miner displays \"Confirmed DL\" if the deadline is accepted by the pool. After all plot files have been read, the miner displays the amount of time taken to read the plot files. The miner logs are stored in QBundle/BlagoMiner/Logs. These are useful for debugging purposes. The best deadline found for each block is stored in QBundle/BlagoMiner/stat.csv. When the miner is running, the console window will appears as follows: Xplotter Plotting is the process of pre-computing hash functions and saving them onto storage units (HDDs). XPlotter is included with QBundle and no additional installation is required. There are however options that need to be configured. Click on Tools: Plotting: Plotter Add any plotfiles that you already have. Use the \"Import Plotfile\" button. Provide the following information in \"Basic settings\" before starting the plotter: Location for saving plot files Numeric account ID to be associated with the generated plots. Click the selector to the right of the form field to select from a list of accounts. If you enter the ID number manually, be absolutely sure that it is entered correctly. If not, your plot files will be unusable. Be sure that no trailing spaces are included, particularly if you use a copy and paste function to enter the ID. Set plot file size using the slider. For easier maintenance, limit plot size to 1 or 2 Terra bytes. Adding files to \"My Plotfiles\" and clicking on \"Start plotting\" will allow the miner to begin using the plots as soon as a scoop has been plotted, it is not necessary to wait until the entire plot file is complete. Advanced settings for Xplotter allow the user to: Set the start nonce of the new plot file. If all existing plots have been imported (recommended) the plotter will continue plotting using the number after the highest existing nonce. Leaving gaps between nonces does not improve mining. If no plot file has been created, the plotter will start with a nonce number of 0. Set the number of CPU threads to be used. Set the amount of memory to be used. For Plot type, use PoC2 (mandatory). Do not use POC1 as it is no longer supported. After all settings have been submitted, click \"Start Plotting\". The plotter shows information about the current nonce being generated: (From - to), % completed ([%]), rate per minute (nonces/min), and writing speed. The \"My plotfiles\" section allows users to import and remove plot files. Removing a plot file in this section will not delete the plot file. Removed plot files can be added back at a later time. Vanity Address Generator The vanity address generator is a tool for creating vanity or branded Burst account addresses. All address must have \"BURST\" for the first five leading characters. The capital letter \"i\" (I), the capital letter \"o\" (O), zero (0), and the number one (1) are not permitted. To generate a vanity address, enter characters into the form provided. Set the resources that should be used (number of CPU threads) and desired length of the passphrase as shown in the image below: The algorithm which seeks for the account with the desired string is a brute force algorithm, which checks every Burst account and passphrase combination sequentially. The time it takes to find a particular string increases significantly with every additional character. A string of 5 characters at the end takes approximately 4 minutes (more or less depending on computer resources). Each additional character increases the time required exponentially. A string of 8 would take approximately one hour. Longer strings could take weeks. Paperburst The Paperburst tool can be used to generate a new wallet or to use an existing wallet. In order to use the tool, provide information as shown below: After all required fields of the form have been populated, clicking the desired button. The paper wallet is output as an easily printable .pdf file. Paper wallets can be used to transfer funds using public keys, to store funds (the funds are still on the blockchain rather than on the paper). Paperburst can be used as a reference document for cold storage. Dynamic Plotting Dynamic plotting creates and deletes plot files automatically while allowing for normal usage of a hard drive. It will check every minute for space pressure. A limited but dynamic amount of space on the hard drive is reserved for normal usage. A user can set specify the amount to be reserved. If users often move or create files that are large, they should set a greater amount of space to be reserved. Plot Converter Johnny's POC1 -> POC2 converter is a tool for converting POC1 plot files into POC2 plot files. New users will not need to use this tool. The POC1 to POC2 conversion completed at block height 502000. POC1 plot are no longer supported for mining. Users who have existing POC1 plots can use them for mining if they use a POC2 compliant miner which can perform on-the-fly conversion. Read speeds will be 50% slower using POC1. Plots that are being converted must be temporarily excluded from mining. Usage of the plot converter is straightforward: First, select plot files for conversion and then click on \"Start conversion\". Note: The application will not allow plot files of other types to be added to the conversion queue. Users can perform inline conversion, which does not require additional free space, or can save the converted plot file to a new location. To save to a new location, use the \"Output Folder\" setting. Once the \"Start conversion\" has been activated, stopping the conversion process may lead to damaged plots which cannot be repaired. Many miners have chosen to re plot their drives for POC2 rather than use the conversion process. Help The \"Help\" tab contains links to official Burst resources. If you are unable to open your wallet, these same resources can be found by navigating from the main page of the Burst Wiki. Frequently Asked Questions (FAQs) relating to QBundle How do I set my reward recipient Setting the reward recipient is a mandatory action for all miners. For pool mining, provide the pool's Burst numerical account ID. For solo mining, use your own account's numerical ID. In the pool you wish to join is not listed within QBundle, insert the pool's Burst numerical account ID manually. The reward recipient transaction requires 4 blocks (confirmations) before it will be effective. What is Wallet Mode? Wallet Mode loads the complete interface and allows users to issue transactions and see blocks as they are forged on the network. Launcher mode opens a minimal interface and can only be accessed through an internet browser. How is QBundle updated? The application manager compares all of the QBundle applications that are available for installation, as well as all of those that are installed on the system. Users are notified through the application manager when updates for these applications are available. Not all of the applications available through QBundle are installed by default. To add an application, checking the box next to the application and click on \"Install/Update\". Please Note: Restarting the wallet may be required for some applications to install or to reflect a status of installed. For important updates, a \"New update available\" message will appear at the top of the wallet. When this message is clicked, the application manager will be displayed and the update can be installed by clinking on \"Update/Install\". The wallet will be stopped during all software updates. The following figures show an application manager before and after and update has taken place. How can I view logs for Burst Reference Software (BRS)? Click on \"Edit\" and then click on \"View Console\". A pop up window with the Wallet log and the MariaDB log (if applicable) will appear. This is useful for troubleshooting and the output is often needed when requesting technical support from the community. How do I change QBundle settings? Users are generally advised not to change any of the default settings. If synchronization is causing your computer to operate more slowly, changes might be appropriate. In this case decreasing the number of cores may help. Otherwise most setting are used only for troubleshooting. If OpenCL is correctly installed, using GPU Acceleration will greatly improve performance. To allow external access to the wallet, add 0.0.0.0 to the \u2018Allow API traffic from\u2019 list. For troubleshooting, the \"Debug mode\" option can be useful. How can I resolve connection problems? If the \"Configure Windows firewall\" is clicked, user will be asked to confirm that they wish to change Windows firewall to allow program access locally and over WAN. Where is the information about my account stored? The account manager can be used to manage multiple accounts. A short PIN number can be used for each. The account Manager is accessible here: Users can easily manage all their BURST accounts with this software. It provides the Reed-Solomon address and the numeric account number of their Burst Wallet. The Public Key for each of those accounts is also shown. Passphrases and private keys are also available (it is enough to set up one PIN to control multiple accounts)","title":"Qbundle"},{"location":"en/qbundle/#introduction","text":"The easiest choice for beginners using Windows is to download Qbundle. QBundle is a convenient launcher which installs the BRS local wallet, plotting software, and mining software with a few clicks.","title":"Introduction"},{"location":"en/qbundle/#installation-guide","text":"Download the QBundle installation files and return here to complete the installation. Sets of instructions are grouped logically, with reference images of installation screens immediately following each section. Images may vary from the actual installation screens depending on your version of Windows and internet browser.","title":"Installation guide"},{"location":"en/qbundle/#download-the-installation-files","text":"The installation files are located on BAT's github: https://www.burst-coin.org/download-wallet . Open this link in a new browser tab if possible. After following this link: Click on \"Download wallet\". Select your operating system: (Please note: If your operating system is not Windows, QBundle will not be available and you will need to choose an option specific to your operating system.) Select Qbundle to be redirected to the PoC Consortium GitHub site. GitHub is a software development platform and hosts the files needed for installation. Future releases will be located here as well. Download and save the latest release, identified by a green indicator. As of the writing of this guide, the latest release is Version 2.5.1. The installation file is QBundle2.5.1.zip. (Make a note of the saved location)","title":"Download the installation Files"},{"location":"en/qbundle/#install-the-software","text":"Locate the saved file. A common location is C: Users/\"user name\"/Downloads. You may move this file to another location if you wish. Extract the included files using Windows \"Extract all\" button if available. If you do not have this functionality, you may need a utility to \"unzip\" the folder. Launch the setup of QBundle by clicking on the extracted version of the following file: Name: BurstWallet Type: Application. Proceed through the Windows warnings related to protecting your computer by clicking on \"More Info\" followed by \"Run Anyway\". The installation utility will check for portable Java and the BRS wallet. Click on \"Download missing components\" Verify that the check box for \"allow connection to remote resources for verifications and updates\" is checked. Several windows will appear as each component and is downloaded and extracted. When all of the components have downloaded. Click on \"continue\". Setup will complete and a new wallet will be displayed showing a status of \"stopped\". Click on \"Database\" on the wallet's top menu bar and select \"Change Database\". Select the radio button next to \"Portable MariaDB\" and Click \"Next\". Click \"Yes\" when asked if you want to download and install MariaDB. After installation is complete, click \"Database\" on the wallets to menu bar, verify that \"No Copy\" is selected. Click \"Save and close\". Change Java settings by clicking on \"edit\" in the top menu bar. Select \"settings\". The settings window will appear. Select \"Java\" in the left menu bar. Verify that the radio button for \"Use Portable java\" is selected. Save your change and exit.","title":"Install the software"},{"location":"en/qbundle/#bootstrap-the-blockchain-populate-the-database","text":"New wallets immediately begin to synchronize with the Burst blockchain. This can be a time consuming process depending on your internet bandwidth and the processing speed of your computer. For a faster alternative, download a \"bootstrap\" copy of the blockchain which contains the genesis block and all confirmed blocks through the time that the bootstrap copy was created. Only the more recent blocks will then synchronize through the regular peer to peer synchronization process. To begin the bootstrap process, Select \"Database\" in the top menu bar. Select \"Bootstrap Chain\". In \"Settings\", verify that the Cryptoguru repository is selected. Click \"Start Import\". You will receive a notice that all existing data in your database will be erased. Click \"Yes\" to continue. Wait for synchronization to complete before proceeding. Block time will appear in orange while syncing, and green when fully synchronized.","title":"Bootstrap the blockchain (populate the database)"},{"location":"en/qbundle/#create-a-new-account-and-passphrase","text":"Please note: Before proceeding with the next step, it is important that you fully understand the security features of the Burst passphrase. If you have not done so already, please review \"Securing your Burst\". A link is located on the main page of the Burst Wiki. If you are a new user and do not already have an account, click on \"New? Create Your Account\". A 12 word passphrase will be generated automatically. You can extend the passphrase by adding a few extra words, numbers, or special characters (Unicode only). This is the only opportunity that you will have to modify the passphrase. Modifying the passphrase is unnecessary as it is considered to be secure. However, some feel that security is further enhanced by adding something additional. Never reduce security by shortening the passphrase. Record this passphrase on paper for now, including any modifications that you have made. You can store this passphrase more securely later. When you are satisfied with your passphrase, Click \"Next\". Type the passphrase, exactly as you have recorded it on paper, in the verification box. Click \"Next\" to open your new wallet. Locate and record your new Burst account number on paper. It is located in the top left corner of your wallet. Burst account numbers contain alphanumeric characters in five segments. The first segment is always \"BURST\". Click on \"Wallet\" and then click on \"Stop Wallet\". Restart the wallet by clicking on \"Wallet\" again and then clicking on \"Start Wallet\". Test your passphrase by clicking on \"Returning user?\" and typing it into the passphrase box. Click on the arrow located to the right of the box. When the wallet is opened, if the Burst account number displayed in the wallet matches the record that you made of your Burst account number, then you have successfully completed the setup process. Please note: If you enter your passphrase incorrectly, you will generate a new account. If this occurs, simply close the wallet and try again.","title":"Create a new account and passphrase"},{"location":"en/qbundle/#install-additional-qbundle-applications","text":"Blago's miner (modified by Quibus and JohnnyFFM) is the default mining software packaged with QBundle. It can be used for pool mining or for solo mining. Please note: If solo mining, running a fully synchronized local wallet is required. The passphrase for the mining account associated with your plot files must be provided and will be stored in plain text in QBundle/BlagoMiner/miner.conf. If desired, you can create an account specifically for mining rather than using a single wallet for both mining and maintaining significant balances. To install, click on \"File\" and then \"Application Manager\". Place a check mark in the box next to \"Blago's Miner\". Click on \"Install/Update\" After the software downloads and extracts, verify that an extracted (unzipped) folder with the name \"BlagoMiner\" is located in the main QBundle folder. If the file does not appear, locate it a sub folder of the zipped version and copy it into the main folder (same level as zipped version) as the final installation step. Open the miner by clicking \"Tools\" and the \"Miner\". The following screen will appear. All settings provided in the interface shown above will be passed to the miner.conf file. This file is located in the Qbundle/BlagoMiner folder. Users can edit this file directly. If you will be solo mining, click on the \"solo mining\" radio button. If you will be pool mining, click on \"Select predefined pool\". Required configuration data will be populated automatically. If your desired pool is not listed, obtain the configuration information directly from the pool operator and enter it manually (mining server, update server, info server, deadline limit, and port information). Set the deadline limit. Calculators for this purpose are provided by each pool. If your calculated deadline (based on your available plot size) exceeds your pool's maximum deadline, this limit should be reduced to the maximum accepted by the pool. Optional setup: \"Use HDD wakeup\" - a script will run which prevents your hard drives from entering sleep mode. \"Show winner information\" - the account which forges each block will be displayed in the miner console. The info server does not support HTTPS so the address of the local wallet (localhost or 127.0.0.1) and port number 8125 should be provided. \"Use multithreading\" - Multithreading may improve usage of CPU resources when calculating deadlines. Add your plotfile paths to \"My Plotfiles\" by clicking on \"Import Plotfiles\" and locating each plotfile or folder containing plotfiles. The miner will use all plot files that are found in configured folders. It is best if the folders used only contain individual plot files. Plotfiles that are removed using the \"Remove Plotfiles\" button are not deleted from storage, only their path in the list of plot files is removed. To start the miner, click on the \"Start mining\" button. When the miner is running, pool and plot file information is displayed in the mining console. The miner receives mining information (block height, base target, etc.) and reads through the configured plot files to locate deadlines. Deadlines found are sent to the pool if they are less than or equal to the configured deadline limit. The miner displays \"Confirmed DL\" if the deadline is accepted by the pool. After all plot files have been read, the miner displays the amount of time taken to read the plot files. The miner logs are stored in QBundle/BlagoMiner/Logs. These are useful for debugging purposes. The best deadline found for each block is stored in QBundle/BlagoMiner/stat.csv. When the miner is running, the console window will appears as follows:","title":"Install additional QBundle applications"},{"location":"en/qbundle/#xplotter","text":"Plotting is the process of pre-computing hash functions and saving them onto storage units (HDDs). XPlotter is included with QBundle and no additional installation is required. There are however options that need to be configured. Click on Tools: Plotting: Plotter Add any plotfiles that you already have. Use the \"Import Plotfile\" button. Provide the following information in \"Basic settings\" before starting the plotter: Location for saving plot files Numeric account ID to be associated with the generated plots. Click the selector to the right of the form field to select from a list of accounts. If you enter the ID number manually, be absolutely sure that it is entered correctly. If not, your plot files will be unusable. Be sure that no trailing spaces are included, particularly if you use a copy and paste function to enter the ID. Set plot file size using the slider. For easier maintenance, limit plot size to 1 or 2 Terra bytes. Adding files to \"My Plotfiles\" and clicking on \"Start plotting\" will allow the miner to begin using the plots as soon as a scoop has been plotted, it is not necessary to wait until the entire plot file is complete. Advanced settings for Xplotter allow the user to: Set the start nonce of the new plot file. If all existing plots have been imported (recommended) the plotter will continue plotting using the number after the highest existing nonce. Leaving gaps between nonces does not improve mining. If no plot file has been created, the plotter will start with a nonce number of 0. Set the number of CPU threads to be used. Set the amount of memory to be used. For Plot type, use PoC2 (mandatory). Do not use POC1 as it is no longer supported. After all settings have been submitted, click \"Start Plotting\". The plotter shows information about the current nonce being generated: (From - to), % completed ([%]), rate per minute (nonces/min), and writing speed. The \"My plotfiles\" section allows users to import and remove plot files. Removing a plot file in this section will not delete the plot file. Removed plot files can be added back at a later time.","title":"Xplotter"},{"location":"en/qbundle/#vanity-address-generator","text":"The vanity address generator is a tool for creating vanity or branded Burst account addresses. All address must have \"BURST\" for the first five leading characters. The capital letter \"i\" (I), the capital letter \"o\" (O), zero (0), and the number one (1) are not permitted. To generate a vanity address, enter characters into the form provided. Set the resources that should be used (number of CPU threads) and desired length of the passphrase as shown in the image below: The algorithm which seeks for the account with the desired string is a brute force algorithm, which checks every Burst account and passphrase combination sequentially. The time it takes to find a particular string increases significantly with every additional character. A string of 5 characters at the end takes approximately 4 minutes (more or less depending on computer resources). Each additional character increases the time required exponentially. A string of 8 would take approximately one hour. Longer strings could take weeks.","title":"Vanity Address Generator"},{"location":"en/qbundle/#paperburst","text":"The Paperburst tool can be used to generate a new wallet or to use an existing wallet. In order to use the tool, provide information as shown below: After all required fields of the form have been populated, clicking the desired button. The paper wallet is output as an easily printable .pdf file. Paper wallets can be used to transfer funds using public keys, to store funds (the funds are still on the blockchain rather than on the paper). Paperburst can be used as a reference document for cold storage.","title":"Paperburst"},{"location":"en/qbundle/#dynamic-plotting","text":"Dynamic plotting creates and deletes plot files automatically while allowing for normal usage of a hard drive. It will check every minute for space pressure. A limited but dynamic amount of space on the hard drive is reserved for normal usage. A user can set specify the amount to be reserved. If users often move or create files that are large, they should set a greater amount of space to be reserved.","title":"Dynamic Plotting"},{"location":"en/qbundle/#plot-converter","text":"Johnny's POC1 -> POC2 converter is a tool for converting POC1 plot files into POC2 plot files. New users will not need to use this tool. The POC1 to POC2 conversion completed at block height 502000. POC1 plot are no longer supported for mining. Users who have existing POC1 plots can use them for mining if they use a POC2 compliant miner which can perform on-the-fly conversion. Read speeds will be 50% slower using POC1. Plots that are being converted must be temporarily excluded from mining. Usage of the plot converter is straightforward: First, select plot files for conversion and then click on \"Start conversion\". Note: The application will not allow plot files of other types to be added to the conversion queue. Users can perform inline conversion, which does not require additional free space, or can save the converted plot file to a new location. To save to a new location, use the \"Output Folder\" setting. Once the \"Start conversion\" has been activated, stopping the conversion process may lead to damaged plots which cannot be repaired. Many miners have chosen to re plot their drives for POC2 rather than use the conversion process.","title":"Plot Converter"},{"location":"en/qbundle/#help","text":"The \"Help\" tab contains links to official Burst resources. If you are unable to open your wallet, these same resources can be found by navigating from the main page of the Burst Wiki.","title":"Help"},{"location":"en/qbundle/#frequently-asked-questions-faqs-relating-to-qbundle","text":"","title":"Frequently Asked Questions (FAQs) relating to QBundle"},{"location":"en/qbundle/#how-do-i-set-my-reward-recipient","text":"Setting the reward recipient is a mandatory action for all miners. For pool mining, provide the pool's Burst numerical account ID. For solo mining, use your own account's numerical ID. In the pool you wish to join is not listed within QBundle, insert the pool's Burst numerical account ID manually. The reward recipient transaction requires 4 blocks (confirmations) before it will be effective.","title":"How do I set my reward recipient"},{"location":"en/qbundle/#what-is-wallet-mode","text":"Wallet Mode loads the complete interface and allows users to issue transactions and see blocks as they are forged on the network. Launcher mode opens a minimal interface and can only be accessed through an internet browser.","title":"What is Wallet Mode?"},{"location":"en/qbundle/#how-is-qbundle-updated","text":"The application manager compares all of the QBundle applications that are available for installation, as well as all of those that are installed on the system. Users are notified through the application manager when updates for these applications are available. Not all of the applications available through QBundle are installed by default. To add an application, checking the box next to the application and click on \"Install/Update\". Please Note: Restarting the wallet may be required for some applications to install or to reflect a status of installed. For important updates, a \"New update available\" message will appear at the top of the wallet. When this message is clicked, the application manager will be displayed and the update can be installed by clinking on \"Update/Install\". The wallet will be stopped during all software updates. The following figures show an application manager before and after and update has taken place.","title":"How is QBundle updated?"},{"location":"en/qbundle/#how-can-i-view-logs-for-burst-reference-software-brs","text":"Click on \"Edit\" and then click on \"View Console\". A pop up window with the Wallet log and the MariaDB log (if applicable) will appear. This is useful for troubleshooting and the output is often needed when requesting technical support from the community.","title":"How can I view logs for Burst Reference Software (BRS)?"},{"location":"en/qbundle/#how-do-i-change-qbundle-settings","text":"Users are generally advised not to change any of the default settings. If synchronization is causing your computer to operate more slowly, changes might be appropriate. In this case decreasing the number of cores may help. Otherwise most setting are used only for troubleshooting. If OpenCL is correctly installed, using GPU Acceleration will greatly improve performance. To allow external access to the wallet, add 0.0.0.0 to the \u2018Allow API traffic from\u2019 list. For troubleshooting, the \"Debug mode\" option can be useful.","title":"How do I change QBundle settings?"},{"location":"en/qbundle/#how-can-i-resolve-connection-problems","text":"If the \"Configure Windows firewall\" is clicked, user will be asked to confirm that they wish to change Windows firewall to allow program access locally and over WAN.","title":"How can I resolve connection problems?"},{"location":"en/qbundle/#where-is-the-information-about-my-account-stored","text":"The account manager can be used to manage multiple accounts. A short PIN number can be used for each. The account Manager is accessible here: Users can easily manage all their BURST accounts with this software. It provides the Reed-Solomon address and the numeric account number of their Burst Wallet. The Public Key for each of those accounts is also shown. Passphrases and private keys are also available (it is enough to set up one PIN to control multiple accounts)","title":"Where is the information about my account stored?"},{"location":"en/reward-assignment/","text":"Introduction Reward assignment is used to facilitate pool mining. A reward assignment notifies the network that all block rewards attributed to your plot files while mining are to be given to another account (the pool account) which is acting in your place. It grants permission for blocks that are forged using the deadlines that you submit to a pool to be signed with the account belonging to that pool. Reward Assignment on QBundle Under \u201cTools/Reward Assignment\u201d, you will find the reward recipient form. Complete the missing fields and press \u201cSet Reward Recipient\u201d button. This form also allows you to check you current reward recipient. Reward Assignment on Burst wallet On the wallet, click on \u201cReward Assignment\u201d. Enter the RS Address of the recipient and click on \u201cSet Reward Recipient\u201d. Reward Assignment on Burst wallet using reward assignment page In http://127.0.0.1:8125/rewardassignment.html , follow the instructions and click on \u201cSubmit\u201d. Reward Assignment using Burst API You also have the possibility to set the reward recipient directly using the API . Bug Fix of BRS In previous versions of BRS (2.27 and earlier), the reward recipient assignments would not go into unconfirmed transactions. This has been fixed as of BRS version 2.3.0[1], so if you are trying to join a pool, or change to solo mining (for example)... make sure to be logged into a wallet that is running latest. Otherwise you will face issues changing it. References https://github.com/burst-apps-team/burstcoin/releases/tag/v2.3.0","title":"Reward Assignment"},{"location":"en/reward-assignment/#introduction","text":"Reward assignment is used to facilitate pool mining. A reward assignment notifies the network that all block rewards attributed to your plot files while mining are to be given to another account (the pool account) which is acting in your place. It grants permission for blocks that are forged using the deadlines that you submit to a pool to be signed with the account belonging to that pool.","title":"Introduction"},{"location":"en/reward-assignment/#reward-assignment-on-qbundle","text":"Under \u201cTools/Reward Assignment\u201d, you will find the reward recipient form. Complete the missing fields and press \u201cSet Reward Recipient\u201d button. This form also allows you to check you current reward recipient.","title":"Reward Assignment on QBundle"},{"location":"en/reward-assignment/#reward-assignment-on-burst-wallet","text":"On the wallet, click on \u201cReward Assignment\u201d. Enter the RS Address of the recipient and click on \u201cSet Reward Recipient\u201d.","title":"Reward Assignment on Burst wallet"},{"location":"en/reward-assignment/#reward-assignment-on-burst-wallet-using-reward-assignment-page","text":"In http://127.0.0.1:8125/rewardassignment.html , follow the instructions and click on \u201cSubmit\u201d.","title":"Reward Assignment on Burst wallet using reward assignment page"},{"location":"en/reward-assignment/#reward-assignment-using-burst-api","text":"You also have the possibility to set the reward recipient directly using the API .","title":"Reward Assignment using Burst API"},{"location":"en/reward-assignment/#bug-fix-of-brs","text":"In previous versions of BRS (2.27 and earlier), the reward recipient assignments would not go into unconfirmed transactions. This has been fixed as of BRS version 2.3.0[1], so if you are trying to join a pool, or change to solo mining (for example)... make sure to be logged into a wallet that is running latest. Otherwise you will face issues changing it.","title":"Bug Fix of BRS"},{"location":"en/reward-assignment/#references","text":"https://github.com/burst-apps-team/burstcoin/releases/tag/v2.3.0","title":"References"},{"location":"en/rs-address-format/","text":"The well known BURST addresses of the form: BURST-XXXX-XXXX-XXXX-XXXXX are called Reed-Solomon addresses. This is the default format in the official client. where X is a non-ambiguous number or alphabetic character (the letters O and I are not used; nor are the numbers 1 and 0). Addresses are always prefixed with \u201cBURST-\u201d, and hyphens are used to separate the address into groups of 4, 4, 4, and then 5 characters. The addresses are NOT case-sensitive. This form of address improves reliability by introducing redundancy that can detect and correct errors when entering and using Burst account numbers. Background The internal format for Burst account numbers is a completely numeric 64-bit identifier that is derived from the account's private key. This format is error-prone, since a single mistyped character can result in transactions being unintentionally sent to the wrong account. Reed-Solomon error-correction codes addresses this issue by adding redundancy to addresses. Reed-Solomon format was chosen because: the account collision rate is the same as the default address format; the system's basic error correction can be used to assist users in typing addresses; some programming languages do not have a native MD5 hashing function, and the Reed-Solomon implementation is simpler than MD5. Benefits of Reed-Solomon addresses The chance of a random address collision, using Burst's implementation of 4 \u201ccheck-bits\u201d, is 1 in a million (20-bit redundancy). It allows up to 2 typos in an address to be corrected . It guarantees that up to 4 typos can be detected . The address length is always 17 characters, and is always prefixed with \u201cBURST\u201d. This makes the addresses easily recognizable as belonging to Burst Encoding of Burst Reed-Solomon addresses Case is not enforced in this format, but for unification all addresses are displayed using upper case. Addresses are split by dashes into groups of 4 characters and a final group of 5 characters, but this is not enforced during address input. The old numeric addresses are also recognized and supported for backwards compatibility. Example RS Addresses: BURST-3DH5-DSAE-4WQ7-3LPSE BURST-K4G2-FF32-WLL3-QBGEL Technical Details The first and most important rule is that no error-correction scheme is infallible: You cannot rely on error correction, period. The problem is somewhat counter-intuitive: either you can do a simple yes/no check of address validity, which will give you one in a million collision, or you can try and correct errors. You cannot do both. The problem here is that the Reed-Solomon algorithm is only guaranteed to correct up to 2 errors. If there are more than 2 errors present in an address entry, it will produce false positives with a probability of around 10% and transactions will still be sent to incorrect addresses. Think of the algorithm as error-guessing , instead, to assist users with spotting errors. Reed-Solomon (RS) addresses for Burst are encoded as follows: Take the original 64-bit account ID, add 1 zero bit to get 65 and then split it into thirteen 5-bit \u201csymbols\u201d (65 / 5 = 13). Order the symbols from lowest bit to highest bits, in little-endian order, i.e. bits 0-4, 5-9, 10-14, etc. up to 60-64. Append 4 symbols of parity (20 bits), produced by the Reed-Solomon encoding of our 13 symbols from step one (which are left untouched). This produces a 13 + 4 = 17 symbol codeword. Scramble the codeword symbols in a predefined order and encode them 1-to-1 with an alphabet of 32 characters, splitting them into groups by dashes.","title":"RS Address Format"},{"location":"en/rs-address-format/#background","text":"The internal format for Burst account numbers is a completely numeric 64-bit identifier that is derived from the account's private key. This format is error-prone, since a single mistyped character can result in transactions being unintentionally sent to the wrong account. Reed-Solomon error-correction codes addresses this issue by adding redundancy to addresses. Reed-Solomon format was chosen because: the account collision rate is the same as the default address format; the system's basic error correction can be used to assist users in typing addresses; some programming languages do not have a native MD5 hashing function, and the Reed-Solomon implementation is simpler than MD5.","title":"Background"},{"location":"en/rs-address-format/#benefits-of-reed-solomon-addresses","text":"The chance of a random address collision, using Burst's implementation of 4 \u201ccheck-bits\u201d, is 1 in a million (20-bit redundancy). It allows up to 2 typos in an address to be corrected . It guarantees that up to 4 typos can be detected . The address length is always 17 characters, and is always prefixed with \u201cBURST\u201d. This makes the addresses easily recognizable as belonging to Burst","title":"Benefits of Reed-Solomon addresses"},{"location":"en/rs-address-format/#encoding-of-burst-reed-solomon-addresses","text":"Case is not enforced in this format, but for unification all addresses are displayed using upper case. Addresses are split by dashes into groups of 4 characters and a final group of 5 characters, but this is not enforced during address input. The old numeric addresses are also recognized and supported for backwards compatibility. Example RS Addresses: BURST-3DH5-DSAE-4WQ7-3LPSE BURST-K4G2-FF32-WLL3-QBGEL","title":"Encoding of Burst Reed-Solomon addresses"},{"location":"en/rs-address-format/#technical-details","text":"The first and most important rule is that no error-correction scheme is infallible: You cannot rely on error correction, period. The problem is somewhat counter-intuitive: either you can do a simple yes/no check of address validity, which will give you one in a million collision, or you can try and correct errors. You cannot do both. The problem here is that the Reed-Solomon algorithm is only guaranteed to correct up to 2 errors. If there are more than 2 errors present in an address entry, it will produce false positives with a probability of around 10% and transactions will still be sent to incorrect addresses. Think of the algorithm as error-guessing , instead, to assist users with spotting errors. Reed-Solomon (RS) addresses for Burst are encoded as follows: Take the original 64-bit account ID, add 1 zero bit to get 65 and then split it into thirteen 5-bit \u201csymbols\u201d (65 / 5 = 13). Order the symbols from lowest bit to highest bits, in little-endian order, i.e. bits 0-4, 5-9, 10-14, etc. up to 60-64. Append 4 symbols of parity (20 bits), produced by the Reed-Solomon encoding of our 13 symbols from step one (which are left untouched). This produces a 13 + 4 = 17 symbol codeword. Scramble the codeword symbols in a predefined order and encode them 1-to-1 with an alphabet of 32 characters, splitting them into groups by dashes.","title":"Technical Details"},{"location":"en/scavenger-how-to-compile-from-source/","text":"Introduction Scavenger is a burst miner developped by the PoC Consortiun and written in Rust. If features direct io, avx 512f, avx2, avx, sse and opencl support. At the time of writing this is the preferred miner of choice for both CPU and GPU mining. The following steps are to install Scavenger 1.6.4 by compiling from source on a fresh installation of Debian Linux version 9 \u201cStretch\u201d . Please be sure to check Git Repository for the latest release before proceeding. Note: Commands to be entered into the shell will be formatted in bold text, e.g.: date example command outputs will not be bold, e.g.: Wed 28 Nov 12:02:18 GMT 2018 Prerequisites Before you begin the installation, the following packages need to be installed: curl git build-essential Change to root user: su Enter root password Install curl, git and build essential packages: apt install curl git build-essential -y Once the above packages have completed installation, its time to install Rust. Note: The features used when compiling Scavenger are not available on the stable release channel of rust, therefore the nightly channel needs to be installed. Installing Rust (nightly) To install Rust, run the following command: curl https://sh.rustup.rs -sSf | sh You will be presented with three options (see below): Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: stable modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation > To install the nightly channel chose option 2 , this will ask you additional questions, answer as per below: Q: Default host triple? A: Press `enter` to leave unchanged Q: Default toolchain? (stable/beta/nightly/none) A: `nightly` Q: Modify PATH variable? (y/n) A: `y` You will be presented with a summary of the current installation options as per your answers provided above: Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: nightly modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation Chose option 1 to install Once installation is complete, follow the instructions to configure your current terminal sessions' environment variable so that you can run Rust related commands: source $HOME/.cargo/env Switching from Rust (stable) to Rust (nightly) If you chose to or already have the stable channel of rust installed you can switch channels by using the following command: rustup default nightly To confirm the instalation of the correct channel of Rust, type the following: rustc --version This should give you the output below, note the \u201c nightly \u201d present (version correct at time of writing): rustc 1.32.0-nightly (6bfb46e4a 2018-11-26) Obtaining the Source Files To download the source files from the Git repository, run the following command, (please make sure to check the exact path to the latest version as this will change as later versions are released) : wget https://github.com/PoC-Consortium/scavenger/archive/1.6.4.zip This will download the file 1.6.4.zip to your current directory. Extract the contents of the zip file: unzip 1.6.4.zip This will create a new directory named scavenger-1.6.4. Compiling the Source Files Navigate to the scavenger-1.6.4 directory cd scavenger-1.6.4 At this point it is worth deciding what you are going to use to do the mining, CPU/GPU and also what instruction sets are available on your device. See the README.md file located in the scavenger-1.6.4 directory for an overview of features to use. In this example, a CPU with the SSE2 instruction set will be used therefore the simd feature option is required (the same would work for AVX, AVX2 etc). Run the following command to compile the code: cargo build --release --features=simd Post Compiling Steps Copy the scavenger executable to the scavenger-1.6.4 directory (two levels up in this case). This placed it in the same directory as the config.yaml file which is required for it to run. cp scavenger ../../scavenger Navigate back to your scavenger-1.6.4 directory from the release directory cd ../.. At this point you can run scavenger and it will make use of the test_data file to simulate mining on the dev.burst-test.net Once you know it will run you will need to configure the config.yaml file to your setup. The config file itself is well commented and the GitHub Wiki has further information if required. Additional Notes If the above steps were followed verbatim, all the scavenger files will be owned by root. It is not recommended to run as root so we will change the owner to a normal user, \u201cburst\u201d in this case. From the directory a level up from your scavenger-1.6.4 directory run: chown -R burst:burst scavenger-1.6.4 This will recursively change ownership to the user \u201cburst\u201d for all files and subdirectories within the scavenger-1.6.4 directory. to logout of root type: exit You are now back at the shell as your normal user (burst). You can now run scavenger by issuing the following command from the scavenger-1.6.4 directory: ./scavenger Example output from running scavenger Video Instruction References Software : https://github.com/PoC-Consortium/scavenger/releases/latest GitHub Documentation : https://github.com/PoC-Consortium/scavenger/wiki","title":"Scavenger - How to compile from source"},{"location":"en/scavenger-how-to-compile-from-source/#introduction","text":"Scavenger is a burst miner developped by the PoC Consortiun and written in Rust. If features direct io, avx 512f, avx2, avx, sse and opencl support. At the time of writing this is the preferred miner of choice for both CPU and GPU mining. The following steps are to install Scavenger 1.6.4 by compiling from source on a fresh installation of Debian Linux version 9 \u201cStretch\u201d . Please be sure to check Git Repository for the latest release before proceeding. Note: Commands to be entered into the shell will be formatted in bold text, e.g.: date example command outputs will not be bold, e.g.: Wed 28 Nov 12:02:18 GMT 2018","title":"Introduction"},{"location":"en/scavenger-how-to-compile-from-source/#prerequisites","text":"Before you begin the installation, the following packages need to be installed: curl git build-essential Change to root user: su Enter root password Install curl, git and build essential packages: apt install curl git build-essential -y Once the above packages have completed installation, its time to install Rust. Note: The features used when compiling Scavenger are not available on the stable release channel of rust, therefore the nightly channel needs to be installed.","title":"Prerequisites"},{"location":"en/scavenger-how-to-compile-from-source/#installing-rust-nightly","text":"To install Rust, run the following command: curl https://sh.rustup.rs -sSf | sh You will be presented with three options (see below): Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: stable modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation > To install the nightly channel chose option 2 , this will ask you additional questions, answer as per below: Q: Default host triple? A: Press `enter` to leave unchanged Q: Default toolchain? (stable/beta/nightly/none) A: `nightly` Q: Modify PATH variable? (y/n) A: `y` You will be presented with a summary of the current installation options as per your answers provided above: Current installation options: default host triple: x86_64-unknown-linux-gnu default toolchain: nightly modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation Chose option 1 to install Once installation is complete, follow the instructions to configure your current terminal sessions' environment variable so that you can run Rust related commands: source $HOME/.cargo/env","title":"Installing Rust (nightly)"},{"location":"en/scavenger-how-to-compile-from-source/#switching-from-rust-stable-to-rust-nightly","text":"If you chose to or already have the stable channel of rust installed you can switch channels by using the following command: rustup default nightly To confirm the instalation of the correct channel of Rust, type the following: rustc --version This should give you the output below, note the \u201c nightly \u201d present (version correct at time of writing): rustc 1.32.0-nightly (6bfb46e4a 2018-11-26)","title":"Switching from Rust (stable) to Rust (nightly)"},{"location":"en/scavenger-how-to-compile-from-source/#obtaining-the-source-files","text":"To download the source files from the Git repository, run the following command, (please make sure to check the exact path to the latest version as this will change as later versions are released) : wget https://github.com/PoC-Consortium/scavenger/archive/1.6.4.zip This will download the file 1.6.4.zip to your current directory. Extract the contents of the zip file: unzip 1.6.4.zip This will create a new directory named scavenger-1.6.4.","title":"Obtaining the Source Files"},{"location":"en/scavenger-how-to-compile-from-source/#compiling-the-source-files","text":"Navigate to the scavenger-1.6.4 directory cd scavenger-1.6.4 At this point it is worth deciding what you are going to use to do the mining, CPU/GPU and also what instruction sets are available on your device. See the README.md file located in the scavenger-1.6.4 directory for an overview of features to use. In this example, a CPU with the SSE2 instruction set will be used therefore the simd feature option is required (the same would work for AVX, AVX2 etc). Run the following command to compile the code: cargo build --release --features=simd","title":"Compiling the Source Files"},{"location":"en/scavenger-how-to-compile-from-source/#post-compiling-steps","text":"Copy the scavenger executable to the scavenger-1.6.4 directory (two levels up in this case). This placed it in the same directory as the config.yaml file which is required for it to run. cp scavenger ../../scavenger Navigate back to your scavenger-1.6.4 directory from the release directory cd ../.. At this point you can run scavenger and it will make use of the test_data file to simulate mining on the dev.burst-test.net Once you know it will run you will need to configure the config.yaml file to your setup. The config file itself is well commented and the GitHub Wiki has further information if required.","title":"Post Compiling Steps"},{"location":"en/scavenger-how-to-compile-from-source/#additional-notes","text":"If the above steps were followed verbatim, all the scavenger files will be owned by root. It is not recommended to run as root so we will change the owner to a normal user, \u201cburst\u201d in this case. From the directory a level up from your scavenger-1.6.4 directory run: chown -R burst:burst scavenger-1.6.4 This will recursively change ownership to the user \u201cburst\u201d for all files and subdirectories within the scavenger-1.6.4 directory. to logout of root type: exit You are now back at the shell as your normal user (burst). You can now run scavenger by issuing the following command from the scavenger-1.6.4 directory: ./scavenger Example output from running scavenger","title":"Additional Notes"},{"location":"en/scavenger-how-to-compile-from-source/#video-instruction","text":"","title":"Video Instruction"},{"location":"en/scavenger-how-to-compile-from-source/#references","text":"Software : https://github.com/PoC-Consortium/scavenger/releases/latest GitHub Documentation : https://github.com/PoC-Consortium/scavenger/wiki","title":"References"},{"location":"en/secure-your-burst/","text":"The Importance of Passphrases Unlike most other crypto-currencies and traditional tokens of value, a BURST account is secured only by a single passphrase which can be thought of as a very secure password. Cryptocurrency accounts secured in this way are sometimes referred to as \u201cBrain Wallets\u201d. The passphrase is the only identifier needed in order to transact using BURST or to forge BURST blocks. There are no additional required wallet files of any sort. Unlike traditional web sites and accounts which limit the number of login attempts and do not disclose the authentication algorithm, the open source nature of the BURST client allows an unlimited number of login attempts which can be executed very quickly, at rates reaching billions of login attempts per second. Considering this, and unlike traditional passwords, your passphrase has to be very long and complex. The BURST client account registration process is known to generate very secure passphrases. We recommend that you use it. Alternatively, you can choose a passphrase with at least 35 truly random characters. If you are using special characters in your passphrase, rather than just numbers and letters, make sure to use the ASCII representation of these characters and not one of their Unicode representations. For example, the quote character \" can be represented not only as ASCII code 34 (0x22) but also as various Unicode characters as explained here: http://www.amp-what.com/unicode/search/quote . These are considered different characters when used in a passphrase. To avoid confusion, always using the ASCII version of these characters or do not use them at all. For example, MS Word uses the \u201c Unicode character by default which is different from the \" ASCII character. These are not interchangeable. Substituting one for the other when entering a passphrase will generate a new account rather than provide access to the intended account. Losing your passphrase means losing your funds, there is no way to recover your passphrase. Mitigating the Risk of Losing your BURST Let's analyze the various risks and how to mitigate them. The main risks are: Losing your passphrase. Letting someone steal your passphrase. Accidentally sending your BURST to an account with an unknown passphrase. If you are someone with a propensity to always mess up things online and always need customer support, you will have to exercise extra care to not to lose your BURST. Best Ways to Remember your Passphrase If you lose your passphrase there is no way to recover it. The chance of forgetting your passphrase is much higher than having your password stolen. The best way not to forget your passphrase is to store it somewhere that is safe, preferably in more than one secure location. If you will be storing your passphrase on a computer or other hardware, it is important to maintain a backup copy of your files in another location as protection against equipment failure. You have to accept that there are risks no matter where you store your passphrase. If you store it on your hard drive - the drive might crash. If you store it in a password manager - the passwords file might get corrupted or deleted. If you print it on paper - the paper might get burned or lost. If you store it in your brain - you might forget it. Therefore, by using more than one storage method, you lower the risk. Keeping Your Passphrase Safe Eventually you have to use your passphrase on your local computer in order to sign transactions. Before entering your passphrase on a local computer, you need to be certain that the computer is safe from intrusion. This means that you must be certain that your computer has not been compromised with any malicious software that could be logging your keystrokes. There is no 100% security, but there are best practices: Don't share your passphrase with anyone. Don't store your passphrase unencrypted on a remote node or your local workstation. Always use the official BURST wallet. Take special care when connecting to remote nodes. Do not leave your passphrase printed on paper next to your computer. Split your BURST into several accounts. Use the accounts with smaller balances for daily operations and only access the higher balance accounts when necessary. Using a password manager that allows you to store multiple passwords encrypted under a single database password can be secure and convenient. A free, open source option is Keepass. How Secure is your Passphrase? When creating a BURST wallet it is important to use a minimum of a 12 word passphrase to avoid Brute Force Attacks and Rainbow Table Attacks . Your passphrase is your Private Key and must be carefully secured. To a first time user, using a set of predefined publicly available words may seem counter intuitive. In fact, to put in perspective how many passwords can be generated by a list of 1626 words in a 12 word combination, the number would be 341,543,870,028,173,427,817,970,975,906,355,941,376 or 341 undecillion. That can be broken down into 341 billion billion billion billion. This is euphemistically called a \u201clarge number\u201d in mathematics. It is difficult to imagine because of how astronomically large it is. Attempting all of the possible combinations of a 12 word passphrase drawn from a known dictionary (a process known as brute forcing), would, on average, take longer than the universe has existed \u2013 billions of billions of years. Just 5 Words would take over 2,000 years. Each additional word increases the difficulty by 1,626 times. Number of Words Possible Passphrase Combinations Bits of Entropy 1 1,626 10.66 2 2,643,876 21.33 3 4,298,942,376 32 4 6,990,080,303,376 42.67 5 11,365,870,573,289,400 53.34 6 18,480,905,552,168,500,000 64 7 30,049,952,427,826,000,000,000 74.67 8 48,861,222,647,645,100,000,000,000 85.34 9 79,448,348,025,071,000,000,000,000,000 96 10 129,183,013,888,765,000,000,000,000,000,000 106.67 11 210,051,580,583,132,000,000,000,000,000,000,000 117.34 12 341,543,870,028,173,000,000,000,000,000,000,000,000 128 In conclusion, your wallet is safe with a 12 word auto generated passphrase. You should be much more worried about viruses and keyloggers. Adding capital letters, numbers, or symbols makes the passphrase exponentially harder to crack (virtually impossible). In its mobile wallet , the PoC Consortium even added new words to the list.[1] References https://www.burstcoin.ist/2017/10/07/is-the-automatically-generated-passphrase-secure/","title":"Secure your Burst"},{"location":"en/secure-your-burst/#the-importance-of-passphrases","text":"Unlike most other crypto-currencies and traditional tokens of value, a BURST account is secured only by a single passphrase which can be thought of as a very secure password. Cryptocurrency accounts secured in this way are sometimes referred to as \u201cBrain Wallets\u201d. The passphrase is the only identifier needed in order to transact using BURST or to forge BURST blocks. There are no additional required wallet files of any sort. Unlike traditional web sites and accounts which limit the number of login attempts and do not disclose the authentication algorithm, the open source nature of the BURST client allows an unlimited number of login attempts which can be executed very quickly, at rates reaching billions of login attempts per second. Considering this, and unlike traditional passwords, your passphrase has to be very long and complex. The BURST client account registration process is known to generate very secure passphrases. We recommend that you use it. Alternatively, you can choose a passphrase with at least 35 truly random characters. If you are using special characters in your passphrase, rather than just numbers and letters, make sure to use the ASCII representation of these characters and not one of their Unicode representations. For example, the quote character \" can be represented not only as ASCII code 34 (0x22) but also as various Unicode characters as explained here: http://www.amp-what.com/unicode/search/quote . These are considered different characters when used in a passphrase. To avoid confusion, always using the ASCII version of these characters or do not use them at all. For example, MS Word uses the \u201c Unicode character by default which is different from the \" ASCII character. These are not interchangeable. Substituting one for the other when entering a passphrase will generate a new account rather than provide access to the intended account. Losing your passphrase means losing your funds, there is no way to recover your passphrase.","title":"The Importance of Passphrases"},{"location":"en/secure-your-burst/#mitigating-the-risk-of-losing-your-burst","text":"Let's analyze the various risks and how to mitigate them. The main risks are: Losing your passphrase. Letting someone steal your passphrase. Accidentally sending your BURST to an account with an unknown passphrase. If you are someone with a propensity to always mess up things online and always need customer support, you will have to exercise extra care to not to lose your BURST.","title":"Mitigating the Risk of Losing your BURST"},{"location":"en/secure-your-burst/#best-ways-to-remember-your-passphrase","text":"If you lose your passphrase there is no way to recover it. The chance of forgetting your passphrase is much higher than having your password stolen. The best way not to forget your passphrase is to store it somewhere that is safe, preferably in more than one secure location. If you will be storing your passphrase on a computer or other hardware, it is important to maintain a backup copy of your files in another location as protection against equipment failure. You have to accept that there are risks no matter where you store your passphrase. If you store it on your hard drive - the drive might crash. If you store it in a password manager - the passwords file might get corrupted or deleted. If you print it on paper - the paper might get burned or lost. If you store it in your brain - you might forget it. Therefore, by using more than one storage method, you lower the risk.","title":"Best Ways to Remember your Passphrase"},{"location":"en/secure-your-burst/#keeping-your-passphrase-safe","text":"Eventually you have to use your passphrase on your local computer in order to sign transactions. Before entering your passphrase on a local computer, you need to be certain that the computer is safe from intrusion. This means that you must be certain that your computer has not been compromised with any malicious software that could be logging your keystrokes. There is no 100% security, but there are best practices: Don't share your passphrase with anyone. Don't store your passphrase unencrypted on a remote node or your local workstation. Always use the official BURST wallet. Take special care when connecting to remote nodes. Do not leave your passphrase printed on paper next to your computer. Split your BURST into several accounts. Use the accounts with smaller balances for daily operations and only access the higher balance accounts when necessary. Using a password manager that allows you to store multiple passwords encrypted under a single database password can be secure and convenient. A free, open source option is Keepass.","title":"Keeping Your Passphrase Safe"},{"location":"en/secure-your-burst/#how-secure-is-your-passphrase","text":"When creating a BURST wallet it is important to use a minimum of a 12 word passphrase to avoid Brute Force Attacks and Rainbow Table Attacks . Your passphrase is your Private Key and must be carefully secured. To a first time user, using a set of predefined publicly available words may seem counter intuitive. In fact, to put in perspective how many passwords can be generated by a list of 1626 words in a 12 word combination, the number would be 341,543,870,028,173,427,817,970,975,906,355,941,376 or 341 undecillion. That can be broken down into 341 billion billion billion billion. This is euphemistically called a \u201clarge number\u201d in mathematics. It is difficult to imagine because of how astronomically large it is. Attempting all of the possible combinations of a 12 word passphrase drawn from a known dictionary (a process known as brute forcing), would, on average, take longer than the universe has existed \u2013 billions of billions of years. Just 5 Words would take over 2,000 years. Each additional word increases the difficulty by 1,626 times. Number of Words Possible Passphrase Combinations Bits of Entropy 1 1,626 10.66 2 2,643,876 21.33 3 4,298,942,376 32 4 6,990,080,303,376 42.67 5 11,365,870,573,289,400 53.34 6 18,480,905,552,168,500,000 64 7 30,049,952,427,826,000,000,000 74.67 8 48,861,222,647,645,100,000,000,000 85.34 9 79,448,348,025,071,000,000,000,000,000 96 10 129,183,013,888,765,000,000,000,000,000,000 106.67 11 210,051,580,583,132,000,000,000,000,000,000,000 117.34 12 341,543,870,028,173,000,000,000,000,000,000,000,000 128 In conclusion, your wallet is safe with a 12 word auto generated passphrase. You should be much more worried about viruses and keyloggers. Adding capital letters, numbers, or symbols makes the passphrase exponentially harder to crack (virtually impossible). In its mobile wallet , the PoC Consortium even added new words to the list.[1]","title":"How Secure is your Passphrase?"},{"location":"en/secure-your-burst/#references","text":"https://www.burstcoin.ist/2017/10/07/is-the-automatically-generated-passphrase-secure/","title":"References"},{"location":"en/slot-based-transaction-fees/","text":"Introduction With the Pre-Dymaxion Hard Fork, Burst changed to a progressive transaction fee system based on slots which is described in the Dymaxion paper. Motivation The slot-based transaction fee system allows for variable fees depending on the transaction load on the blockchain. As a secondary goal it prevents spamming blocks with lots of transactions with minimum fees. Such transactions that are only created because they require little to no investment are considered wasteful, because space on the blockchain is a scarce resource. We want to minimize the total blockchain space because it allows for lower cost of maintaining a node. Slots A block is divided into 1020 slots that can each hold a transaction. The fee for the slots increases progressively in a linear fashion by #slot * 0.00735 BURST. Here 0.00735 is the smallest fee and called fee quant as a unit. All regular payment and multi out transactions pay the same fee for the slots. The fee for the lowest slot is 0.00735 Burst, the highest fee is 7.497 BURST. The total fee for a block where all slots are filled with the minimal required fee is 3827.2185 BURST. Assignment of Transactions to Slots When a new block is generated, new (currently unconfirmed) transactions are assigned to the available slots. Here, each transaction is assigned to the most costly slot it fits in. If no slot is available, the transaction is not included into the block and remains unconfirmed in the mempool of the node. For included transactions, left-over funds for the slot are NOT refunded! This means if a transaction includes a fee of 0.01 BURST fee and is assigned to the first slot which costs 0.00735 BURST, it will still cost 0.01 BURST fee to process the transaction. It is up to the user to choose a reasonable fee that does not waste funds. Examples Example 1 A (legacy) fee of 1 Burst guarantees inclusion into a block with less than 136 transactions. Example 2 A fee of 0.1 Burst guarantees inclusion into a block with less than 13 transactions. Example 3 A more complex example of transaction assignment to slots is shown in the following: Fee Quantum: 0.00735 Block Capacity: 10 Fee slots: 10: 0.0735 9: 0.06615 8: 0.0588 7: 0.05145 6: 0.0441 5: 0.03675 4: 0.0294 3: 0.02205 2: 0.0147 1: 0.00735 Pending Tx fees (descending-sorted and filtered too low): $VAR1 = [ '0.3', '0.2', '0.1', '0.008' ]; Distributing as follows: 0.3 has slot @ 10 -> added 0.2 has slot @ 9 -> added 0.1 has slot @ 8 -> added skipped slot @ 7 (0.008 too low for 0.05145). skipped slot @ 6 (0.008 too low for 0.0441). skipped slot @ 5 (0.008 too low for 0.03675). skipped slot @ 4 (0.008 too low for 0.0294). skipped slot @ 3 (0.008 too low for 0.02205). skipped slot @ 2 (0.008 too low for 0.0147). 0.008 has slot @ 1 -> added","title":"Slot-Based Transaction Fees"},{"location":"en/slot-based-transaction-fees/#introduction","text":"With the Pre-Dymaxion Hard Fork, Burst changed to a progressive transaction fee system based on slots which is described in the Dymaxion paper.","title":"Introduction"},{"location":"en/slot-based-transaction-fees/#motivation","text":"The slot-based transaction fee system allows for variable fees depending on the transaction load on the blockchain. As a secondary goal it prevents spamming blocks with lots of transactions with minimum fees. Such transactions that are only created because they require little to no investment are considered wasteful, because space on the blockchain is a scarce resource. We want to minimize the total blockchain space because it allows for lower cost of maintaining a node.","title":"Motivation"},{"location":"en/slot-based-transaction-fees/#slots","text":"A block is divided into 1020 slots that can each hold a transaction. The fee for the slots increases progressively in a linear fashion by #slot * 0.00735 BURST. Here 0.00735 is the smallest fee and called fee quant as a unit. All regular payment and multi out transactions pay the same fee for the slots. The fee for the lowest slot is 0.00735 Burst, the highest fee is 7.497 BURST. The total fee for a block where all slots are filled with the minimal required fee is 3827.2185 BURST.","title":"Slots"},{"location":"en/slot-based-transaction-fees/#assignment-of-transactions-to-slots","text":"When a new block is generated, new (currently unconfirmed) transactions are assigned to the available slots. Here, each transaction is assigned to the most costly slot it fits in. If no slot is available, the transaction is not included into the block and remains unconfirmed in the mempool of the node. For included transactions, left-over funds for the slot are NOT refunded! This means if a transaction includes a fee of 0.01 BURST fee and is assigned to the first slot which costs 0.00735 BURST, it will still cost 0.01 BURST fee to process the transaction. It is up to the user to choose a reasonable fee that does not waste funds.","title":"Assignment of Transactions to Slots"},{"location":"en/slot-based-transaction-fees/#examples","text":"","title":"Examples"},{"location":"en/slot-based-transaction-fees/#example-1","text":"A (legacy) fee of 1 Burst guarantees inclusion into a block with less than 136 transactions.","title":"Example 1"},{"location":"en/slot-based-transaction-fees/#example-2","text":"A fee of 0.1 Burst guarantees inclusion into a block with less than 13 transactions.","title":"Example 2"},{"location":"en/slot-based-transaction-fees/#example-3","text":"A more complex example of transaction assignment to slots is shown in the following: Fee Quantum: 0.00735 Block Capacity: 10 Fee slots: 10: 0.0735 9: 0.06615 8: 0.0588 7: 0.05145 6: 0.0441 5: 0.03675 4: 0.0294 3: 0.02205 2: 0.0147 1: 0.00735 Pending Tx fees (descending-sorted and filtered too low): $VAR1 = [ '0.3', '0.2', '0.1', '0.008' ]; Distributing as follows: 0.3 has slot @ 10 -> added 0.2 has slot @ 9 -> added 0.1 has slot @ 8 -> added skipped slot @ 7 (0.008 too low for 0.05145). skipped slot @ 6 (0.008 too low for 0.0441). skipped slot @ 5 (0.008 too low for 0.03675). skipped slot @ 4 (0.008 too low for 0.0294). skipped slot @ 3 (0.008 too low for 0.02205). skipped slot @ 2 (0.008 too low for 0.0147). 0.008 has slot @ 1 -> added","title":"Example 3"},{"location":"en/smart-contract/","text":"A smart contract is a computer protocol intended to facilitate, verify, or enforce the negotiation or performance of a contract. Smart contracts were first proposed by Nick Szabo in 1996. In Burst, smart contracts are implemented as so called Automated Transactions , or short ATs.","title":"Smart Contract"},{"location":"en/softfork-wishlist/","text":"Introduction The Softfork Wishlist is to record changes to Burstcoin that might be desirable, but that will require a \u201csoft\u201d block-chain split\" (consensus of the miners). These changes are implemented by convincing a majority of the miners to reject or discourage blocks that were previously considered valid. Cryptographic Changes Support for more than one public-key cryptosystem Support for a post-quantum signature scheme. Lamport signatures have nice intuitive security properties, but it has extreme space requirements that would require structural changes to the blockchain to accommodate, namely pruning. However other post-quantum schemes like IEEE1363.1 (patent expired in 2016) do not. See the introductory chapter of DJB's book and the PQCrypto conference webpage for full details.","title":"Softfork Wishlist"},{"location":"en/softfork-wishlist/#introduction","text":"The Softfork Wishlist is to record changes to Burstcoin that might be desirable, but that will require a \u201csoft\u201d block-chain split\" (consensus of the miners). These changes are implemented by convincing a majority of the miners to reject or discourage blocks that were previously considered valid.","title":"Introduction"},{"location":"en/softfork-wishlist/#cryptographic-changes","text":"Support for more than one public-key cryptosystem Support for a post-quantum signature scheme. Lamport signatures have nice intuitive security properties, but it has extreme space requirements that would require structural changes to the blockchain to accommodate, namely pruning. However other post-quantum schemes like IEEE1363.1 (patent expired in 2016) do not. See the introductory chapter of DJB's book and the PQCrypto conference webpage for full details.","title":"Cryptographic Changes"},{"location":"en/technical-information-about-mining-and-block-forging/","text":"Introduction With most cryptocurrencies that are not based on Proof-of-Stake, there is a process called mining. This process is the foundation for a blockchain to grow and secure transactions within the network. Burstcoin is no different, except that you use precomputed hashes to find values that can be used to forge a block. To fully understand this document, you should read the document named technical information to create plot files . This document is intended to be an overview of the processes. It is technical information, but not deep enough to be used as a reference for a programmer since information regarding subjects like AT, subscriptions, and assets is missing. Algorithms and acronyms Shabal / Sha256 / Curve25519 Shabal, Sha256 and Curve25519 are cryptographic hash functions used in this text. Shabal is the main one used by Burstcoin. Shabal is a rather heavy and slow cryptographic hash function in relation to many others like SHA256. Because of this, it makes it a good crypto for Proof-of-Capacity coins like Burstcoin. This is because we store the precomputed hashes, and it is still fast enough to do smaller live verifications. Burst uses the 256bit version of Shabal also known as Shabal256. Hash / Digest A hash, or digest in this context, is a result when computing data through a cryptographic hash function. If not said otherwise, the length of a hash is 32Bytes (256bit). Plot files When mining, you read precomputed hashes from files stored on a storage device. These files are called plot files. Nonce Within a plot file, there are one or more groups of data called nonces. One nonce contains 8192 hashes, and because of that, the nonces are 256KiB large. Each nonce has its own individual number. This 64bit number can range between 0-18446744073709551615 (2 64 ). Scoop Each nonce is sorted into 4096 different places of data. These places are called scoop numbers. Each scoop contains 2 hashes. Each of these hashes are xored with a final hash. Account ID When you create your plot file it will be bound to a specific Burst account. Because of this, all miners have different plot files. Deadline When you mine and process your plot files, you will end up with resulting values called deadlines. The values represent the number of seconds that must elapse since last block was forged before you are allowed to forge a block. If no one else has forged a block within this time, you can forge a block and claim a block reward. Block reward If you are lucky enough to forge a block, you will get Burstcoin as a reward. This is called a block reward. The block reward decreases 5% every 10800 blocks. This is roughly every 30 days since each block is supposed to be forged every 4 minutes (360 blocks a day). Base target Base target is calculated from the last 24 blocks. This value adjusts the difficulty for the miners. The lower the base target, the harder it is for a miner to find a low deadline. It gets adjusted in a way that Burstcoin can have an average of 4 minutes for each block. Network Difficulty Network Difficulty, or NetDiff in short, is a value that can be read as an estimate on the total amount of space in terabytes dedicated to mine Burstcoin. Since this is a value that changes with every block in relation to base target, it should be taken into an average of at least 360 values before considered to be somewhat accurate. Block Height Every block forged gets an individual number. Every new block forged gets the previous block\u2019s number + 1. This number is called block height, and can be used to identify a specific block. Block Generator When a block is forged, an account has found a nonce and a deadline. Block generator is the account used when forging a block. This is the account from which a deadline has been found when forging a block. This is always the real account even if a reward assignment has been set. Generation Signature Generation signature is a based from the previous block generation signature and block generator. This value is then used by miners to forge a new block. Generation signature is 32bytes long. Block signature Every block is signed by the generator who forges a block. This is done by taking most parts of the block and signing it with the block generator\u2019s private key using both Sha256 and Curve25519. The result is a 64byte long hash. Reward Assignment Reward assignment is frequently used when pool mining. When changing your reward assignment, you tell the network that another account (the pool account) is acting in your place for 2 specific features. The first feature is that all block rewards that should be given to your account will now be given to the pool account instead. Secondly, for the pool to be able to utilize the deadlines found from your plot files, it is also granted the action to sign the newly forged blocks with the account belonging to the pool. Mining Process All references to wallet in this text can also be a pool depending on scenario. All references to miner in this text is a software able to do a mining operation for Burstcoin. The first thing that happens when you start mining, is that the miner talks to the wallet and asks for mining information. This information contains a new generation signature, base target, and the next block height. Before the wallet sends over this info, it creates the generation signature by taking the previous generation signature together with previous block generator and runs this though shabal256 to get the new hash. The miner will now take the new 32byte generation signature, and the 8byte block height, and put them together as a seed for Shabal256. The result will be a hash value called Generation hash. Now, the miner will do a small mathematical operation on this hash to find out which scoop number to use when processing the plot files. This is done by taking the generation hash modulo 4096, as there are only that many scoops. Next step for the miner is to read all the 64-byte long scoops from all nonces in all plot files. It will process them individually through shabal256 together with the new generation signature to get a new hash called target. This target is now divided with base target and the first 8bytes of the result is the value deadline. To prevent so-called \u201cnonce spamming\u201d to the wallet, the miner usually checks if the current deadline found is lower than the lowest one it has found so far. Usually there is also a max value that can be set, as ridiculously large deadlines are of no use to anyone. After these checks, the miner submits information to the wallet. This information contains the numeric account ID bound to the plot file, and the nonce number that contains the scoop data used to generate the deadline. If you are solo mining the miner also sends over the passphrase for the account id used in plot files. If the password is not sent when solo mining, the wallet would be unable to forge blocks for that account. When pool mining, the passphrase for the pool account id is used. Block forging process Handling deadlines The wallet has now received the information submitted by the miner, and will now create the nonce to be able to find and verify the deadline for itself. After this is done, the wallet will now check and see if an equal amount or more seconds has passed as defined by the deadline. If not, the wallet will wait until it has. If a valid forged block from another wallet is announced on the network before the deadline has passed, the wallet will discard the mining info submitted since it is no longer valid. If the miner submits new information, the wallet will create that nonce and check if the deadline value is lower than the previous value. If the new deadline is lower, the wallet will use that value instead. When the deadline is valid, the wallet will now start to forge a block. Forging There are two limits for a block. First, a block can contain max. 255 transactions. The second is that a block payload can have max. 44880bytes (43KiB). The wallet will start by getting all of the unconfirmed transactions it has received from users or from the network. It will try to fit as many of these transactions possible until it hits one of the limits, or until all transactions are processed. For each transaction the wallet reads, it will do checks. For example, if the transaction has a valid signature, if it has a correct timestamp, etc. The wallet will also sum up all of the added transactions amounts and fees. The block itself will only contain the Transaction ID of each transaction and one Sha256 hash of all the transactions included. Complete transactions are stored separately. Beside this, a block contains many different sets of values. Block contents Block version number The version number is basically telling the wallet what a block can contain and how it is contained. This number changes each time a block gets a new format. List of Transaction ID A List of all transaction IDs that are included in this block Payload Hash This is the Sha256 hash of all the data in the payload of the block Timestamp A timestamp that will describe when the block was forged; derived from the birth of the blockchain. Birth date: 11 August 2014, Time: 02:00:00 Total amount of coins This is the sum of all transactions in the block Total amount of fees This is the amount of fees that will be given to the block forger for generating this block. The length of the payload This is a number in bytes representing the length of the payload. Public Key This is a public key for the account that forges the block. Generation Signature The 32byte generation signature that was used to forge the block. Previous block hash A Sha256 hash of the contents from the previous block. Previous block ID This is the first 8 bytes in the previous block hash converted to a number. Cumulative Difficulty Used to prevent Nothing at Stake problems during potential forks. Calculated: Previous Cumulative Difficulty + (18446744073709551616 / base target) Base Target The base target used when forging this block Height This block\u2019s height value Block ID This is the first 8 bytes in block\u2019s hash converted to a number Nonce The nonce number used to forge this block. AT If an AT is added to this block, this is the payload bytes for that AT. Block Signature This is a 64byte hash generated with the forger\u2019s private key and block contents. When this is done, it will be announced to the network. The wallet will connect to all peers and send the block over to them. The peer will receive the block and verify that all information is not spoofed. References This information is written by community member @Quibus 2017-10-21","title":"Technical Information about Mining and Block Forging"},{"location":"en/technical-information-about-mining-and-block-forging/#introduction","text":"With most cryptocurrencies that are not based on Proof-of-Stake, there is a process called mining. This process is the foundation for a blockchain to grow and secure transactions within the network. Burstcoin is no different, except that you use precomputed hashes to find values that can be used to forge a block. To fully understand this document, you should read the document named technical information to create plot files . This document is intended to be an overview of the processes. It is technical information, but not deep enough to be used as a reference for a programmer since information regarding subjects like AT, subscriptions, and assets is missing.","title":"Introduction"},{"location":"en/technical-information-about-mining-and-block-forging/#algorithms-and-acronyms","text":"","title":"Algorithms and acronyms"},{"location":"en/technical-information-about-mining-and-block-forging/#shabal-sha256-curve25519","text":"Shabal, Sha256 and Curve25519 are cryptographic hash functions used in this text. Shabal is the main one used by Burstcoin. Shabal is a rather heavy and slow cryptographic hash function in relation to many others like SHA256. Because of this, it makes it a good crypto for Proof-of-Capacity coins like Burstcoin. This is because we store the precomputed hashes, and it is still fast enough to do smaller live verifications. Burst uses the 256bit version of Shabal also known as Shabal256.","title":"Shabal / Sha256 / Curve25519"},{"location":"en/technical-information-about-mining-and-block-forging/#hash-digest","text":"A hash, or digest in this context, is a result when computing data through a cryptographic hash function. If not said otherwise, the length of a hash is 32Bytes (256bit).","title":"Hash / Digest"},{"location":"en/technical-information-about-mining-and-block-forging/#plot-files","text":"When mining, you read precomputed hashes from files stored on a storage device. These files are called plot files.","title":"Plot files"},{"location":"en/technical-information-about-mining-and-block-forging/#nonce","text":"Within a plot file, there are one or more groups of data called nonces. One nonce contains 8192 hashes, and because of that, the nonces are 256KiB large. Each nonce has its own individual number. This 64bit number can range between 0-18446744073709551615 (2 64 ).","title":"Nonce"},{"location":"en/technical-information-about-mining-and-block-forging/#scoop","text":"Each nonce is sorted into 4096 different places of data. These places are called scoop numbers. Each scoop contains 2 hashes. Each of these hashes are xored with a final hash.","title":"Scoop"},{"location":"en/technical-information-about-mining-and-block-forging/#account-id","text":"When you create your plot file it will be bound to a specific Burst account. Because of this, all miners have different plot files.","title":"Account ID"},{"location":"en/technical-information-about-mining-and-block-forging/#deadline","text":"When you mine and process your plot files, you will end up with resulting values called deadlines. The values represent the number of seconds that must elapse since last block was forged before you are allowed to forge a block. If no one else has forged a block within this time, you can forge a block and claim a block reward.","title":"Deadline"},{"location":"en/technical-information-about-mining-and-block-forging/#block-reward","text":"If you are lucky enough to forge a block, you will get Burstcoin as a reward. This is called a block reward. The block reward decreases 5% every 10800 blocks. This is roughly every 30 days since each block is supposed to be forged every 4 minutes (360 blocks a day).","title":"Block reward"},{"location":"en/technical-information-about-mining-and-block-forging/#base-target","text":"Base target is calculated from the last 24 blocks. This value adjusts the difficulty for the miners. The lower the base target, the harder it is for a miner to find a low deadline. It gets adjusted in a way that Burstcoin can have an average of 4 minutes for each block.","title":"Base target"},{"location":"en/technical-information-about-mining-and-block-forging/#network-difficulty","text":"Network Difficulty, or NetDiff in short, is a value that can be read as an estimate on the total amount of space in terabytes dedicated to mine Burstcoin. Since this is a value that changes with every block in relation to base target, it should be taken into an average of at least 360 values before considered to be somewhat accurate.","title":"Network Difficulty"},{"location":"en/technical-information-about-mining-and-block-forging/#block-height","text":"Every block forged gets an individual number. Every new block forged gets the previous block\u2019s number + 1. This number is called block height, and can be used to identify a specific block.","title":"Block Height"},{"location":"en/technical-information-about-mining-and-block-forging/#block-generator","text":"When a block is forged, an account has found a nonce and a deadline. Block generator is the account used when forging a block. This is the account from which a deadline has been found when forging a block. This is always the real account even if a reward assignment has been set.","title":"Block Generator"},{"location":"en/technical-information-about-mining-and-block-forging/#generation-signature","text":"Generation signature is a based from the previous block generation signature and block generator. This value is then used by miners to forge a new block. Generation signature is 32bytes long.","title":"Generation Signature"},{"location":"en/technical-information-about-mining-and-block-forging/#block-signature","text":"Every block is signed by the generator who forges a block. This is done by taking most parts of the block and signing it with the block generator\u2019s private key using both Sha256 and Curve25519. The result is a 64byte long hash.","title":"Block signature"},{"location":"en/technical-information-about-mining-and-block-forging/#reward-assignment","text":"Reward assignment is frequently used when pool mining. When changing your reward assignment, you tell the network that another account (the pool account) is acting in your place for 2 specific features. The first feature is that all block rewards that should be given to your account will now be given to the pool account instead. Secondly, for the pool to be able to utilize the deadlines found from your plot files, it is also granted the action to sign the newly forged blocks with the account belonging to the pool.","title":"Reward Assignment"},{"location":"en/technical-information-about-mining-and-block-forging/#mining-process","text":"All references to wallet in this text can also be a pool depending on scenario. All references to miner in this text is a software able to do a mining operation for Burstcoin. The first thing that happens when you start mining, is that the miner talks to the wallet and asks for mining information. This information contains a new generation signature, base target, and the next block height. Before the wallet sends over this info, it creates the generation signature by taking the previous generation signature together with previous block generator and runs this though shabal256 to get the new hash. The miner will now take the new 32byte generation signature, and the 8byte block height, and put them together as a seed for Shabal256. The result will be a hash value called Generation hash. Now, the miner will do a small mathematical operation on this hash to find out which scoop number to use when processing the plot files. This is done by taking the generation hash modulo 4096, as there are only that many scoops. Next step for the miner is to read all the 64-byte long scoops from all nonces in all plot files. It will process them individually through shabal256 together with the new generation signature to get a new hash called target. This target is now divided with base target and the first 8bytes of the result is the value deadline. To prevent so-called \u201cnonce spamming\u201d to the wallet, the miner usually checks if the current deadline found is lower than the lowest one it has found so far. Usually there is also a max value that can be set, as ridiculously large deadlines are of no use to anyone. After these checks, the miner submits information to the wallet. This information contains the numeric account ID bound to the plot file, and the nonce number that contains the scoop data used to generate the deadline. If you are solo mining the miner also sends over the passphrase for the account id used in plot files. If the password is not sent when solo mining, the wallet would be unable to forge blocks for that account. When pool mining, the passphrase for the pool account id is used.","title":"Mining Process"},{"location":"en/technical-information-about-mining-and-block-forging/#block-forging-process","text":"","title":"Block forging process"},{"location":"en/technical-information-about-mining-and-block-forging/#handling-deadlines","text":"The wallet has now received the information submitted by the miner, and will now create the nonce to be able to find and verify the deadline for itself. After this is done, the wallet will now check and see if an equal amount or more seconds has passed as defined by the deadline. If not, the wallet will wait until it has. If a valid forged block from another wallet is announced on the network before the deadline has passed, the wallet will discard the mining info submitted since it is no longer valid. If the miner submits new information, the wallet will create that nonce and check if the deadline value is lower than the previous value. If the new deadline is lower, the wallet will use that value instead. When the deadline is valid, the wallet will now start to forge a block.","title":"Handling deadlines"},{"location":"en/technical-information-about-mining-and-block-forging/#forging","text":"There are two limits for a block. First, a block can contain max. 255 transactions. The second is that a block payload can have max. 44880bytes (43KiB). The wallet will start by getting all of the unconfirmed transactions it has received from users or from the network. It will try to fit as many of these transactions possible until it hits one of the limits, or until all transactions are processed. For each transaction the wallet reads, it will do checks. For example, if the transaction has a valid signature, if it has a correct timestamp, etc. The wallet will also sum up all of the added transactions amounts and fees. The block itself will only contain the Transaction ID of each transaction and one Sha256 hash of all the transactions included. Complete transactions are stored separately. Beside this, a block contains many different sets of values.","title":"Forging"},{"location":"en/technical-information-about-mining-and-block-forging/#block-contents","text":"","title":"Block contents"},{"location":"en/technical-information-about-mining-and-block-forging/#block-version-number","text":"The version number is basically telling the wallet what a block can contain and how it is contained. This number changes each time a block gets a new format.","title":"Block version number"},{"location":"en/technical-information-about-mining-and-block-forging/#list-of-transaction-id","text":"A List of all transaction IDs that are included in this block","title":"List of Transaction ID"},{"location":"en/technical-information-about-mining-and-block-forging/#payload-hash","text":"This is the Sha256 hash of all the data in the payload of the block","title":"Payload Hash"},{"location":"en/technical-information-about-mining-and-block-forging/#timestamp","text":"A timestamp that will describe when the block was forged; derived from the birth of the blockchain. Birth date: 11 August 2014, Time: 02:00:00","title":"Timestamp"},{"location":"en/technical-information-about-mining-and-block-forging/#total-amount-of-coins","text":"This is the sum of all transactions in the block","title":"Total amount of coins"},{"location":"en/technical-information-about-mining-and-block-forging/#total-amount-of-fees","text":"This is the amount of fees that will be given to the block forger for generating this block.","title":"Total amount of fees"},{"location":"en/technical-information-about-mining-and-block-forging/#the-length-of-the-payload","text":"This is a number in bytes representing the length of the payload.","title":"The length of the payload"},{"location":"en/technical-information-about-mining-and-block-forging/#public-key","text":"This is a public key for the account that forges the block.","title":"Public Key"},{"location":"en/technical-information-about-mining-and-block-forging/#generation-signature_1","text":"The 32byte generation signature that was used to forge the block.","title":"Generation Signature"},{"location":"en/technical-information-about-mining-and-block-forging/#previous-block-hash","text":"A Sha256 hash of the contents from the previous block.","title":"Previous block hash"},{"location":"en/technical-information-about-mining-and-block-forging/#previous-block-id","text":"This is the first 8 bytes in the previous block hash converted to a number.","title":"Previous block ID"},{"location":"en/technical-information-about-mining-and-block-forging/#cumulative-difficulty","text":"Used to prevent Nothing at Stake problems during potential forks. Calculated: Previous Cumulative Difficulty + (18446744073709551616 / base target)","title":"Cumulative Difficulty"},{"location":"en/technical-information-about-mining-and-block-forging/#base-target_1","text":"The base target used when forging this block","title":"Base Target"},{"location":"en/technical-information-about-mining-and-block-forging/#height","text":"This block\u2019s height value","title":"Height"},{"location":"en/technical-information-about-mining-and-block-forging/#block-id","text":"This is the first 8 bytes in block\u2019s hash converted to a number","title":"Block ID"},{"location":"en/technical-information-about-mining-and-block-forging/#nonce_1","text":"The nonce number used to forge this block.","title":"Nonce"},{"location":"en/technical-information-about-mining-and-block-forging/#at","text":"If an AT is added to this block, this is the payload bytes for that AT.","title":"AT"},{"location":"en/technical-information-about-mining-and-block-forging/#block-signature_1","text":"This is a 64byte hash generated with the forger\u2019s private key and block contents. When this is done, it will be announced to the network. The wallet will connect to all peers and send the block over to them. The peer will receive the block and verify that all information is not spoofed.","title":"Block Signature"},{"location":"en/technical-information-about-mining-and-block-forging/#references","text":"This information is written by community member @Quibus 2017-10-21","title":"References"},{"location":"en/technical-information-to-create-plot-files/","text":"Introduction The term plotting is a name for dedicating storage space to be used for calculations in the Burstcoin network. A Plot is a file containing pre-computed hashes that can be used to forge blocks for Burstcoin blockchain. The plots are later used by mining software and can be thought of as the miner\u2019s hash rate. Algorithms and Acronyms Before we dive deep into how plotting works we need to get familiar with all different terms used in the procedure. Shabal Shabal is the name of the crypto/hash function used in Burstcoin. Shabal is a rather heavy and slow crypto in relation to many other like i.e. SHA256. Because of this it makes it a good crypto for Proof of capacity coins like Burstcoin. This is because we store the precomputed hashes while it is still fast enough to do smaller live verifications. Burst uses the 256bit version of Shabal also known as Shabal256. Hash / Digest A hash or digest in this context is a 32Byte (256bit) long result of the Shabal256 Crypto. Nonce When generating a plot file, you generate something that is called nonces. Each nonce contains 256Kilobyte of data that can be used by miners to calculate Deadlines. Each nonce will have its own individual number. This number can range between 0-18446744073709551615. the number is also used as a seed when creating the nonce. Because of this each nonce has its own unique set of data. One plot file can contain many nonces. Scoop Each nonce is sorted into 4096 different places of data. These places are called scoop numbers. Each scoop contains 64byte of data which holds 2 hashes. Each of these hashes are xored with a final hash (we get to final hash in generating a nonce chapter). Account ID When you create your plot file it will be bound to a specific Burst account. The numeric account ID is used when you create your nonces. Because of this all miners have different plot files even if they use the same nonce numbers. Generating a Nonce The first step in creating a nonce is to make the first seed. The seed is a 16byte long value containing the account id that we will be generating a nonce for and the nonce number. When this is done we start to feed the Shabal256 function to get our first hash. We have produced the first hash. This is the last hash in the nonce. Hash #8191. Now we take this produced hash (#8191) and pre-append it to the starting seed. The result will now be our new seed for the next round of shabal256 computation. We now have produced two hashes. Hash #8191 and Hash #8190. This time we pre-append Hash 8190 to the last seed we used. The result will now be a new seed to feed Shabal256. Once again, we have created a new hash. This procedure of pre-appending resulting hashes to a new seed will continue for all 8192 hashes we create for a nonce. After iteration 128 we have reached more than 4096 bytes in the seed. For all remaining iterations we will only read the last 4096 generated bytes. Once we have created 8192 hashes we are now going to make a Final hash. This is done by using all 8192 hashes and the first 16bytes as seed. The final hash will now be used to xor all other hashes individually. We have now created our nonce and can store it in a plot file before we continue to the next nonce. POC2 Format The POC2 nonce format is created the same way as when we create POC1 with a slight addition to the end of the process. To create a POC2 formatted nonce we need to shuffle the data around. If we divide the nonce in 2 halves we get a range with scoops 0-2047 and 2048-4095. Let\u2019s call 0-2047 the low scoop range and 2048-4095 the high scoop range. To shuffle the data into correct place we take the second hash from a scoop in the low range and swap it with the second hash in its mirror scoop found in the high range. The mirror scoop is calculated like this: MirrorScoop = 4095 \u2013 CurrentScoop Plot Structure When we are mining we read from one or more plot files. The miner software will open a plot file and seek the scoop locations to read the scoops data. If the plot file is unoptimized the scoop locations will be on more than one place. In the following example the miner will be seeking and reading scoop #403. This is not the most effective way since the miner will spend a lot of time to seek new locations on the storage device to be able to read the scoops. To prevent this, we can optimize plots or use plotter software that creates optimized plots from the beginning. Optimization is done by reordering the data in the plot file and grouping all data from the same scoop number together. Basically, what we have done is to divide the plot file into 4096 portions where we split up all the nonces data based on scoop numbers. When the miner now wants to read Scoop 4096 it only seeks one time and read all data sequentially. This provides better performance. Stagger and Filenames Stagger A stagger is basically a group of nonces in a plot file. The groups in the plot file is written in an optimized way. A given stagger number tells you how many nonces there are in each group. To find out how many groups there are in a plot file you take the number of nonces and divide it with the stagger number. If the stagger number is equal to the number of nonces in the file, there is only one group and the plot file is completely optimized. If this is the case the miner will not care about the stagger. If for some reason your division ends up with decimals, your plot file can be assumed broken. Poc2 formatted plot files cannot have staggers. They are always written in an optimized way. Filenames Since a plot file only contains raw data there is no headers in the files. All information needed for a user and miner is set in the filenames. The formatting of the filename is as follows. POC1 format: AccountID_StartingNonce_NrOfNonces_Stagger POC2 format: AccountID_StartingNonce_NrOfNonces","title":"Technical Information to create plot files"},{"location":"en/technical-information-to-create-plot-files/#introduction","text":"The term plotting is a name for dedicating storage space to be used for calculations in the Burstcoin network. A Plot is a file containing pre-computed hashes that can be used to forge blocks for Burstcoin blockchain. The plots are later used by mining software and can be thought of as the miner\u2019s hash rate.","title":"Introduction"},{"location":"en/technical-information-to-create-plot-files/#algorithms-and-acronyms","text":"Before we dive deep into how plotting works we need to get familiar with all different terms used in the procedure.","title":"Algorithms and Acronyms"},{"location":"en/technical-information-to-create-plot-files/#shabal","text":"Shabal is the name of the crypto/hash function used in Burstcoin. Shabal is a rather heavy and slow crypto in relation to many other like i.e. SHA256. Because of this it makes it a good crypto for Proof of capacity coins like Burstcoin. This is because we store the precomputed hashes while it is still fast enough to do smaller live verifications. Burst uses the 256bit version of Shabal also known as Shabal256.","title":"Shabal"},{"location":"en/technical-information-to-create-plot-files/#hash-digest","text":"A hash or digest in this context is a 32Byte (256bit) long result of the Shabal256 Crypto.","title":"Hash / Digest"},{"location":"en/technical-information-to-create-plot-files/#nonce","text":"When generating a plot file, you generate something that is called nonces. Each nonce contains 256Kilobyte of data that can be used by miners to calculate Deadlines. Each nonce will have its own individual number. This number can range between 0-18446744073709551615. the number is also used as a seed when creating the nonce. Because of this each nonce has its own unique set of data. One plot file can contain many nonces.","title":"Nonce"},{"location":"en/technical-information-to-create-plot-files/#scoop","text":"Each nonce is sorted into 4096 different places of data. These places are called scoop numbers. Each scoop contains 64byte of data which holds 2 hashes. Each of these hashes are xored with a final hash (we get to final hash in generating a nonce chapter).","title":"Scoop"},{"location":"en/technical-information-to-create-plot-files/#account-id","text":"When you create your plot file it will be bound to a specific Burst account. The numeric account ID is used when you create your nonces. Because of this all miners have different plot files even if they use the same nonce numbers.","title":"Account ID"},{"location":"en/technical-information-to-create-plot-files/#generating-a-nonce","text":"The first step in creating a nonce is to make the first seed. The seed is a 16byte long value containing the account id that we will be generating a nonce for and the nonce number. When this is done we start to feed the Shabal256 function to get our first hash. We have produced the first hash. This is the last hash in the nonce. Hash #8191. Now we take this produced hash (#8191) and pre-append it to the starting seed. The result will now be our new seed for the next round of shabal256 computation. We now have produced two hashes. Hash #8191 and Hash #8190. This time we pre-append Hash 8190 to the last seed we used. The result will now be a new seed to feed Shabal256. Once again, we have created a new hash. This procedure of pre-appending resulting hashes to a new seed will continue for all 8192 hashes we create for a nonce. After iteration 128 we have reached more than 4096 bytes in the seed. For all remaining iterations we will only read the last 4096 generated bytes. Once we have created 8192 hashes we are now going to make a Final hash. This is done by using all 8192 hashes and the first 16bytes as seed. The final hash will now be used to xor all other hashes individually. We have now created our nonce and can store it in a plot file before we continue to the next nonce.","title":"Generating a Nonce"},{"location":"en/technical-information-to-create-plot-files/#poc2-format","text":"The POC2 nonce format is created the same way as when we create POC1 with a slight addition to the end of the process. To create a POC2 formatted nonce we need to shuffle the data around. If we divide the nonce in 2 halves we get a range with scoops 0-2047 and 2048-4095. Let\u2019s call 0-2047 the low scoop range and 2048-4095 the high scoop range. To shuffle the data into correct place we take the second hash from a scoop in the low range and swap it with the second hash in its mirror scoop found in the high range. The mirror scoop is calculated like this: MirrorScoop = 4095 \u2013 CurrentScoop","title":"POC2 Format"},{"location":"en/technical-information-to-create-plot-files/#plot-structure","text":"When we are mining we read from one or more plot files. The miner software will open a plot file and seek the scoop locations to read the scoops data. If the plot file is unoptimized the scoop locations will be on more than one place. In the following example the miner will be seeking and reading scoop #403. This is not the most effective way since the miner will spend a lot of time to seek new locations on the storage device to be able to read the scoops. To prevent this, we can optimize plots or use plotter software that creates optimized plots from the beginning. Optimization is done by reordering the data in the plot file and grouping all data from the same scoop number together. Basically, what we have done is to divide the plot file into 4096 portions where we split up all the nonces data based on scoop numbers. When the miner now wants to read Scoop 4096 it only seeks one time and read all data sequentially. This provides better performance.","title":"Plot Structure"},{"location":"en/technical-information-to-create-plot-files/#stagger-and-filenames","text":"","title":"Stagger and Filenames"},{"location":"en/technical-information-to-create-plot-files/#stagger","text":"A stagger is basically a group of nonces in a plot file. The groups in the plot file is written in an optimized way. A given stagger number tells you how many nonces there are in each group. To find out how many groups there are in a plot file you take the number of nonces and divide it with the stagger number. If the stagger number is equal to the number of nonces in the file, there is only one group and the plot file is completely optimized. If this is the case the miner will not care about the stagger. If for some reason your division ends up with decimals, your plot file can be assumed broken. Poc2 formatted plot files cannot have staggers. They are always written in an optimized way.","title":"Stagger"},{"location":"en/technical-information-to-create-plot-files/#filenames","text":"Since a plot file only contains raw data there is no headers in the files. All information needed for a user and miner is set in the filenames. The formatting of the filename is as follows. POC1 format: AccountID_StartingNonce_NrOfNonces_Stagger POC2 format: AccountID_StartingNonce_NrOfNonces","title":"Filenames"},{"location":"en/testnet/","text":"TestNet Description Burst has a permanent TestNet running. Its purpose is to provide a sandbox for both developers and users to test Burst features and to experiment with features without remorse. Note: NEVER USE YOUR REAL PASSPHRASE ON TESTNET. How to set up a TestNet node To run a node on the TestNet, you will need to install the latest released version of the Burst Reference Software (BRS) that can be found on GitHub . Edit/add the following in the conf/brs.properties file: # These settings are the recommended minimum changes/additions needed to operate a TestNet node DEV.TestNet = yes DEV.P2P.BootstrapPeers = testnet-2.burst-alliance.org; testnet.getburst.net; 77.66.65.240; 77.68.73.180; DEV.P2P.rebroadcastTo = testnet-2.burst-alliance.org; testnet.getburst.net; 77.66.65.240; 77.68.73.180; P2P.NumBootstrapConnections = 2 Keep in mind there may be scenarios where you would like to have your own private test net, say in case of some future revisions that might require a fork for adding to the current chain. In this case, you could simply change the value of DEV.P2P.BootstrapPeers to the value of your localhost. If you would like access to another TestNet peer without having to install your own, you can use any of the ones listed here . If you want to use your own desired peer, you can just change the ip address accordingly. You can get TestNet Burst coins at this faucet . If for any reason you need to reset your peer, follow these instructions: If using the H2 database backend (which is the default), just remove all files under the burst_db folder. If using mariaDB database backend, perform these steps: Stop the node and execute the following in a terminal: mysql -u root Once in the mysql shell, execute the following commands (assuming $yourdatabase is your database's name and $youruser is your user). DROP DATABASE $yourdatabase; CREATE DATABASE $yourdatabase; FLUSH PRIVILEGES; Start node again, wait until sync is complete. Current TestNet Facilities Faucet Mining Pool Explorer 1 Explorer 2 Testnet Public Nodes You can access the following BAT operated TestNet nodes http://testnet.getburst.net:6876/index.html [1] https://testnet-2.burst-alliance.org:6876/index.html Other community run public nodes: http://testnet.burstcoin.network:6876/index.html https://octalsburstnode.ddns.net:6876/index.html Have Questions? Join our TestNet community on Discord here https://discord.gg/CQEUe3e and go to the #testnet channel. Stay informed about current updates being deployed on TestNet. References https://www.burstcoin.ist/2019/02/10/weekly-burst-report-69/","title":"Testnet"},{"location":"en/testnet/#testnet","text":"","title":"TestNet"},{"location":"en/testnet/#description","text":"Burst has a permanent TestNet running. Its purpose is to provide a sandbox for both developers and users to test Burst features and to experiment with features without remorse. Note: NEVER USE YOUR REAL PASSPHRASE ON TESTNET.","title":"Description"},{"location":"en/testnet/#how-to-set-up-a-testnet-node","text":"To run a node on the TestNet, you will need to install the latest released version of the Burst Reference Software (BRS) that can be found on GitHub . Edit/add the following in the conf/brs.properties file: # These settings are the recommended minimum changes/additions needed to operate a TestNet node DEV.TestNet = yes DEV.P2P.BootstrapPeers = testnet-2.burst-alliance.org; testnet.getburst.net; 77.66.65.240; 77.68.73.180; DEV.P2P.rebroadcastTo = testnet-2.burst-alliance.org; testnet.getburst.net; 77.66.65.240; 77.68.73.180; P2P.NumBootstrapConnections = 2 Keep in mind there may be scenarios where you would like to have your own private test net, say in case of some future revisions that might require a fork for adding to the current chain. In this case, you could simply change the value of DEV.P2P.BootstrapPeers to the value of your localhost. If you would like access to another TestNet peer without having to install your own, you can use any of the ones listed here . If you want to use your own desired peer, you can just change the ip address accordingly. You can get TestNet Burst coins at this faucet . If for any reason you need to reset your peer, follow these instructions: If using the H2 database backend (which is the default), just remove all files under the burst_db folder. If using mariaDB database backend, perform these steps: Stop the node and execute the following in a terminal: mysql -u root Once in the mysql shell, execute the following commands (assuming $yourdatabase is your database's name and $youruser is your user). DROP DATABASE $yourdatabase; CREATE DATABASE $yourdatabase; FLUSH PRIVILEGES; Start node again, wait until sync is complete.","title":"How to set up a TestNet node"},{"location":"en/testnet/#current-testnet-facilities","text":"Faucet Mining Pool Explorer 1 Explorer 2","title":"Current TestNet Facilities"},{"location":"en/testnet/#testnet-public-nodes","text":"You can access the following BAT operated TestNet nodes http://testnet.getburst.net:6876/index.html [1] https://testnet-2.burst-alliance.org:6876/index.html Other community run public nodes: http://testnet.burstcoin.network:6876/index.html https://octalsburstnode.ddns.net:6876/index.html","title":"Testnet Public Nodes"},{"location":"en/testnet/#have-questions","text":"Join our TestNet community on Discord here https://discord.gg/CQEUe3e and go to the #testnet channel. Stay informed about current updates being deployed on TestNet.","title":"Have Questions?"},{"location":"en/testnet/#references","text":"https://www.burstcoin.ist/2019/02/10/weekly-burst-report-69/","title":"References"},{"location":"en/the-burst-api-examples/","text":"Burst API Examples Version API 1.0.0 BRS Version 2.3.0 Description Examples of Burst API calls are collected on this page, individually linked from the main Burst API page. The organization and ordering is the same for both pages so that the section numbers in the table of contents are identical. The preliminary sections preceding the examples simply link back to the main page. For example: The Burst API Description . A lot of API calls can be viewed and tested on the MainNet at https://wallet1.burst-team.us:2083/burst . For specific API calls, use the GET url https://wallet1.burst-team.us:2083/burst?= specificRequestType . General Notes The Burst API General Notes Create Transaction The Burst API Create Transaction Account Operations Get Account Request https://wallet1.burst-team.us:2083/burst?requestType=getAccount&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"unconfirmedBalanceNQT\": \"100000000000\", \"guaranteedBalanceNQT\": \"100000000000\", \"unconfirmedAssetBalances\": [ { \"unconfirmedBalanceQNT\": \"120100\", \"asset\": \"3702027329806229573\" } ], \"effectiveBalanceNXT\": \"100000000000\", \"accountRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"name\": \"Umbrellacorp03\", \"forgedBalanceNQT\": \"0\", \"balanceNQT\": \"100000000000\", \"publicKey\": \"f22d8aa787eddbf69caf6f5960f5972a4b73247eb3a9479ddddeda40224aca60\", \"requestProcessingTime\": 1, \"assetBalances\": [ { \"balanceQNT\": \"120100\", \"asset\": \"3702027329806229573\" } ], \"account\": \"17001464071916561838\" } Get Account Block Ids Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountBlockIds&account=17001464071916561838&lastIndex=5 Response similar to: {\"blockIds\":[\"18426055195962363092\",\"7915836588136735869\",\"10232042957216858995\",\"6879436477641441477\",\"10946006553575734351\",\"11461420847451026714\"],\"requestProcessingTime\":2} Get Account Blocks Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountBlocks&account=BURST-JNRV-L9MB-QU9G-FR8YT&lastIndex=0 Response similar to: { \"blocks\": [ { \"previousBlockHash\": \"9bb982b31c196a59231197da7abc82aeecea8d21017eb0c12fbabed8a74ec71c\", \"payloadLength\": 1936, \"totalAmountNQT\": \"106611838192\", \"generationSignature\": \"dedb23e56e9cc7d17d0f8d09bde18890c950089a2d7253889e8197967a9cacce\", \"generator\": \"15922713504207360763\", \"generatorPublicKey\": \"177d9ea55714741b002665dd9b7a1bc49834281c49162282735fadbb654f525d\", \"baseTarget\": \"62600\", \"payloadHash\": \"9c2e60b58de75577d4f088abe14111756f602fc0498c8a1cd97555514b3794f3\", \"generatorRS\": \"BURST-JNRV-L9MB-QU9G-FR8YT\", \"blockReward\": \"1101\", \"nextBlock\": \"7294788635189399942\", \"scoopNum\": 3287, \"numberOfTransactions\": 11, \"blockSignature\": \"51cfdb787b44c6ef65fd44bcc1efe0d1880a1f36573b1976849a34514eebfb0c657092b04ab329147b08c14b2d36fb3b769ac7d348dd8b42c706feba1c31fe0d\", \"transactions\": [ \"9974453735926447276\", \"10292157220435803480\", \"12118294371901969706\", \"14492253203769113366\", \"16186302445201505070\", \"16411262478294799982\", \"1509465029747109302\", \"3032891187575274734\", \"3133520208744662995\", \"4199249628605348221\", \"4284107851893128481\" ], \"nonce\": \"11577401\", \"version\": 3, \"totalFeeNQT\": \"1100000000\", \"previousBlock\": \"6442989827968383387\", \"block\": \"12993921455729618779\", \"height\": 467931, \"timestamp\": 113186379 } ], \"requestProcessingTime\": 3 } Get Account Id Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountId&secretPhrase=IWontTellYou Response: { \"accountRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"publicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"requestProcessingTime\": 0, \"account\": \"15323192282528158131\" } Get Account Lessors Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountLessors&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"lessors\": [], \"accountRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"requestProcessingTime\": 0, \"account\": \"17001464071916561838\", \"height\": 496781 } Get Account Public Key Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountPublicKey&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"publicKey\": \"f22d8aa787eddbf69caf6f5960f5972a4b73247eb3a9479ddddeda40224aca60\", \"requestProcessingTime\": 1 } Get Account Transaction Ids Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountTransactionIds&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"transactionIds\": [ \"14471919803527301514\", \"8408429517094397948\", \"7677510357080940908\", \"15605878519502379168\", \"13241821260511921007\", \"16748761036604486700\", \"6521866371443385678\" ], \"requestProcessingTime\": 7 } Get Account Transactions Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountTransactions&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"requestProcessingTime\": 7, \"transactions\": [ { \"senderPublicKey\": \"2ebd275f257b5e73c58c1a5e13efbcba8a579829a3c336e79409f32a3bcf8379\", \"signature\": \"e96b97ee10365498641177ec07378b252b9bc6e727dc67130c4ee32e38cede076b24c0f3c2137a138234c154656b8cee45b913e2842bced41f8d8c195670eeb5\", \"feeNQT\": \"100000000\", \"type\": 2, \"confirmations\": 85, \"fullHash\": \"8a892fc36296d6c8540dab8d52458500e400483b091224db949fe8d36ce8aac5\", \"version\": 1, \"ecBlockId\": \"6134220061079224356\", \"signatureHash\": \"0811bab0ed422d3da9fe837e57bd38aa9bbe223f9bcc34109a650eaadc21ce5e\", \"attachment\": { \"version.AssetTransfer\": 1, \"quantityQNT\": \"10000\", \"asset\": \"3702027329806229573\" }, \"senderRS\": \"BURST-CMTM-GH7K-58PB-BFP2U\", \"subtype\": 1, \"amountNQT\": \"0\", \"sender\": \"11313795926748122931\", \"recipientRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"recipient\": \"17001464071916561838\", \"ecBlockHeight\": 496688, \"block\": \"9331719154915300577\", \"blockTimestamp\": 120142856, \"deadline\": 1440, \"transaction\": \"14471919803527301514\", \"timestamp\": 120142756, \"height\": 496701 }, { \"senderPublicKey\": \"f22d8aa787eddbf69caf6f5960f5972a4b73247eb3a9479ddddeda40224aca60\", \"signature\": \"e74d1213e17fdd41f6337eb3cf4c501089931b651ec4b3a563cf6b113ab58b0cfd2516f7e9d64cbbdcf87e8e35ae75caddef7811d729b4a53338a4c75bb85977\", \"feeNQT\": \"100000000\", \"type\": 0, \"confirmations\": 356, \"fullHash\": \"fc27529518beb074357b59f0efa477e18240c9f44a02b89fd32ccdb0b85b135a\", \"version\": 1, \"ecBlockId\": \"6116962714576197152\", \"signatureHash\": \"f10eaaaf1836f07fe6958293cc79a91fb57dd8dfec9780ea73e0ee82de18c292\", \"senderRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"subtype\": 0, \"amountNQT\": \"53329697341\", \"sender\": \"17001464071916561838\", \"recipientRS\": \"BURST-NQAW-GQ84-CA6C-7B3LS\", \"recipient\": \"6649610434652035356\", \"ecBlockHeight\": 496419, \"block\": \"5936178255841968699\", \"blockTimestamp\": 120078307, \"deadline\": 1440, \"transaction\": \"8408429517094397948\", \"timestamp\": 120078236, \"height\": 496430 } ] } Get Balance Request https://wallet1.burst-team.us:2083/burst?requestType=getBalance&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"unconfirmedBalanceNQT\": \"100000000000\", \"guaranteedBalanceNQT\": \"100000000000\", \"effectiveBalanceNXT\": \"100000000000\", \"forgedBalanceNQT\": \"0\", \"balanceNQT\": \"100000000000\", \"requestProcessingTime\": 0 } Get Unconfirmed Transaction Ids Request https://wallet1.burst-team.us:2083/burst?requestType=getUnconfirmedTransactionIds&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"requestProcessingTime\": 0, \"unconfirmedTransactionIds\": [] } Get Unconfirmed Transactions Request https://wallet1.burst-team.us:2083/burst?requestType=getUnconfirmedTransactions Response: { \"unconfirmedTransactions\": [ { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"5316c88b00f767d2bbe0cac07ae4f84b1fe75f002e24e9ce1c1a6b81d6821f09474a4db22db8461be85ac03f7c7df37fa007bd1aa72c34fc4be0e64b605bb2d6\", \"feeNQT\": \"100000000\", \"type\": 1, \"fullHash\": \"480ae3eba6a4e445c692eacae605bfaecd060e91005f96b09d57647d3c5fcf25\", \"version\": 1, \"ecBlockId\": \"3371057862366354193\", \"signatureHash\": \"d156bf1cdf9c8fce254a9ef3a7d47ed2f16a35ad94c8c625ec48a83fbda1b615\", \"attachment\": { \"name\": \"API-Examples2\", \"description\": \"\", \"version.AccountInfo\": 1 }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 5, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"ecBlockHeight\": 498894, \"deadline\": 1440, \"transaction\": \"5036331320136108616\", \"timestamp\": 120675576, \"height\": 498903 }, { \"senderPublicKey\": \"25cc2bb30ee7665737c9721090313c85176e485cd9a15495a0f3abc359d8d632\", \"signature\": \"194bd83c8473d5bfef972e50efde4699db401d9097dcb68eaa898042d5022c0a1e64d551e20d6f49402d34f930317577f90152949485f8515d8b89e5bbbf45c0\", \"feeNQT\": \"100000000\", \"type\": 0, \"fullHash\": \"0c53db6986e2ba38119354158128e60f23a749fec0acf893ff3ca2de22176df0\", \"version\": 1, \"ecBlockId\": \"3371057862366354193\", \"signatureHash\": \"3b1b88980766b041165a55c622a6eea4b08bb628eab95e3016c19838fda6c112\", \"senderRS\": \"BURST-HKML-NRG6-VBRA-2F8PS\", \"subtype\": 0, \"amountNQT\": \"10013275142\", \"sender\": \"888561138747819634\", \"recipientRS\": \"BURST-WXWK-MD2A-KXJL-HR27T\", \"recipient\": \"18200197947533981585\", \"ecBlockHeight\": 498894, \"deadline\": 1440, \"transaction\": \"4087828678721622796\", \"timestamp\": 120675589, \"height\": 498903 }, ], \"requestProcessingTime\": 1 } Get Subscription Request https://wallet1.burst-team.us:2083/burst?requestType=getSubscription&subscription=13721874590196751209 Response: { \"senderRS\": \"BURST-2RN8-FSU8-P64Q-5AL9C\", \"sender\": \"3827576371473833606\", \"amountNQT\": \"500000000\", \"recipientRS\": \"BURST-JDMH-EZQC-UWY4-EXXFU\", \"recipient\": \"14787496155544039023\", \"id\": \"13721874590196751209\", \"timeNext\": 128778762, \"requestProcessingTime\": 0, \"frequency\": 3600 } Get Subscriptions To Account Request https://wallet1.burst-team.us:2083/burst?requestType=getSubscriptionsToAccount&account=14787496155544039023 Response: { \"subscriptions\": [ { \"senderRS\": \"BURST-2RN8-FSU8-P64Q-5AL9C\", \"sender\": \"3827576371473833606\", \"amountNQT\": \"500000000\", \"recipientRS\": \"BURST-JDMH-EZQC-UWY4-EXXFU\", \"recipient\": \"14787496155544039023\", \"id\": \"13721874590196751209\", \"timeNext\": 128778762, \"frequency\": 3600 } ], \"requestProcessingTime\": 2 } Get Account Subscriptions Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountSubscriptions&account=14787496155544039023 Response: { \"subscriptions\": [ { \"senderRS\": \"BURST-2RN8-FSU8-P64Q-5AL9C\", \"sender\": \"3827576371473833606\", \"amountNQT\": \"500000000\", \"recipientRS\": \"BURST-JDMH-EZQC-UWY4-EXXFU\", \"recipient\": \"14787496155544039023\", \"id\": \"13721874590196751209\", \"timeNext\": 128778762, \"frequency\": 3600 } ], \"requestProcessingTime\": 2 } Send Money Request https://wallet1.burst-team.us:2083/burst?requestType=sendMoney&secretPhrase=IWontTellYou&recipient=BURST-GBFG-HVQ4-8AMM-GPCWR&amountNQT=100000000&feeNQT=100000000&deadline=24 Response: { \"signatureHash\": \"b6bb90bac0d529d9ebc6771089f389c976db2a67d76867f7c9d2e1b90e00358a\", \"unsignedTransactionBytes\": \"001092812d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93cae2527ec7e55f1eb00e1f5050000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"3b709a56a9a2308b2364cdb260cc8b08126b8ed13cfe891aa817c28760b0e90f108680db998938fd4747390a0ed9b3b3e25674b849e583dce011155f95ecaa3a\", \"feeNQT\": \"100000000\", \"type\": 0, \"fullHash\": \"808d5c32b12f4d4b963404c19523b6391ddf7a04a96ec4a495703aeead76c6ff\", \"version\": 1, \"ecBlockId\": \"16622227543717857480\", \"signatureHash\": \"b6bb90bac0d529d9ebc6771089f389c976db2a67d76867f7c9d2e1b90e00358a\", \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 0, \"amountNQT\": \"100000000\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"recipient\": \"17001464071916561838\", \"ecBlockHeight\": 497841, \"deadline\": 24, \"transaction\": \"5426045564151958912\", \"timestamp\": 120422802, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 4, \"transactionBytes\": \"001092812d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93cae2527ec7e55f1eb00e1f5050000000000e1f505*\", \"fullHash\": \"808d5c32b12f4d4b963404c19523b6391ddf7a04a96ec4a495703aeead76c6ff\", \"transaction\": \"5426045564151958912\" } Send Money Subscription Request https://wallet1.burst-team.us:2083/burst?requestType=sendMoneySubscription&recipient=BURST-ZYGT-HCNL-PU3A-98NM7&amountNQT=200000000&frequency=3600&secretPhrase=IWontTellYou&feeNQT=10000000&deadline=24 Response: { \"signatureHash\": \"c750d47f99a1dc5b01f3850d8c888b324fd49f1fe77c97fd8bccf339a82f3739\", \"unsignedTransactionBytes\": \"1513059bfe071800ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247d9f92fa97a86ce7200c2eb0b*\", \"transactionJSON\": { \"senderPublicKey\": \"ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247\", \"signature\": \"541e44ec8ea4642148dc6dd212076c16618580db47726f1522e2fda6805a680022cc3ef643f5cbefd0863796c9bcb8ee12cc611c38bc7a5bf01dbd2bc0777c29\", \"feeNQT\": \"10000000\", \"type\": 21, \"fullHash\": \"06491cddb3159f0ff9ff44e27b3ee2ed5a67756f9efe70dcbec83843c5bd2191\", \"version\": 1, \"ecBlockId\": \"3529501934685685596\", \"signatureHash\": \"c750d47f99a1dc5b01f3850d8c888b324fd49f1fe77c97fd8bccf339a82f3739\", \"attachment\": { \"version.SubscriptionSubscribe\": 1, \"frequency\": 3600 }, \"senderRS\": \"BURST-MNAM-VYK3-V3KC-DTACV\", \"subtype\": 3, \"amountNQT\": \"200000000\", \"sender\": \"13666482992520483091\", \"recipientRS\": \"BURST-ZYGT-HCNL-PU3A-98NM7\", \"recipient\": \"8272697426908805593\", \"ecBlockHeight\": 554516, \"deadline\": 24, \"transaction\": \"1125642294118861062\", \"timestamp\": 134126341, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 10, \"transactionBytes\": \"1513059bfe071800ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247d9f92fa97a86ce7200c2eb0b*\", \"fullHash\": \"06491cddb3159f0ff9ff44e27b3ee2ed5a67756f9efe70dcbec83843c5bd2191\", \"transaction\": \"1125642294118861062\" } Cancel Subscription Request https://wallet1.burst-team.us:2083/burst?requestType=subscriptionCancel&subscription=3470763597622549812&secretPhrase=IWontTellYou&feeNQT=10000000&deadline=24 Response: { \"signatureHash\": \"5d8b62549fc7533d898b6787930880b438257881fb5db6fc8aeeaf0209bb43ee\", \"unsignedTransactionBytes\": \"1514f39cfe071800ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247*\", \"transactionJSON\": { \"senderPublicKey\": \"ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247\", \"signature\": \"dd060be1727ad6e82c163c80b1a0cbb8c626169661d8d26a459a5fd49b4fa603cda2096fff8564d667e4fa199bd5351c0ba9a6ed2a32373f9808dd26fd2ed11d\", \"feeNQT\": \"10000000\", \"type\": 21, \"fullHash\": \"a84c68ef82c11caf97cbabb0e4cd26d077ecb16c5dd7f138fbbf347598609d92\", \"version\": 1, \"ecBlockId\": \"8594277110464290878\", \"signatureHash\": \"5d8b62549fc7533d898b6787930880b438257881fb5db6fc8aeeaf0209bb43ee\", \"attachment\": { \"subscriptionId\": \"3470763597622549812\", \"version.SubscriptionCancel\": 1 }, \"senderRS\": \"BURST-MNAM-VYK3-V3KC-DTACV\", \"subtype\": 4, \"amountNQT\": \"0\", \"sender\": \"13666482992520483091\", \"ecBlockHeight\": 554518, \"deadline\": 24, \"transaction\": \"12618173024091786408\", \"timestamp\": 134126835, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 9, \"transactionBytes\": \"1514f39cfe071800ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247*\", \"fullHash\": \"a84c68ef82c11caf97cbabb0e4cd26d077ecb16c5dd7f138fbbf347598609d92\", \"transaction\": \"12618173024091786408\" } Set Account Info Request https://wallet1.burst-team.us:2083/burst?requestType=setAccountInfo&secretPhrase=IWontTellYou&name=API-Examples&feeNQT=100000000&deadline=24 Response: { \"signatureHash\": \"00e5694c213c978045fc32125092a1f3b16e6c5bf4d1d24c51005466be29f14b\", \"unsignedTransactionBytes\": \"0115c1832d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c0000000000000000000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"9b2634d7f439bf0c71341511a3efb202f744ec7f1b60673d07965bb297b4060d27bed164bf2611b738da1df34cd15a44458bfed2f6e78c94707af11da46f5044\", \"feeNQT\": \"100000000\", \"type\": 1, \"fullHash\": \"7ace7428ff55c4c5963d828f0cd210be4c988b482b2930b73c80c7fe55c19af5\", \"version\": 1, \"ecBlockId\": \"4725767517890678156\", \"signatureHash\": \"00e5694c213c978045fc32125092a1f3b16e6c5bf4d1d24c51005466be29f14b\", \"attachment\": { \"name\": \"API-Examples\", \"description\": \"\", \"version.AccountInfo\": 1 }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 5, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 497844, \"deadline\": 24, \"transaction\": \"14250609675290857082\", \"timestamp\": 120423361, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 9, \"transactionBytes\": \"0115c1832d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c0000000000000000000000000000000000e1f505*\", \"fullHash\": \"7ace7428ff55c4c5963d828f0cd210be4c988b482b2930b73c80c7fe55c19af5\", \"transaction\": \"14250609675290857082\" } Alias Operations Buy / Sell Alias Request https://wallet1.burst-team.us:2083/burst?requestType=sellAlias&secretPhrase=IWontTellYou&aliasName=AliasTestSell&priceNQT=1&recipient=BURST-GBFG-HVQ4-8AMM-GPCWR&feeNQT=100000000&deadline=24 Response: { \"signatureHash\": \"952eea5e0eb67f1ec78abfab60edcde55f477ae8dcf8f620077783532217c329\", \"unsignedTransactionBytes\": \"0116a16031071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"6ce34c1f9a73ce7c375b9a0eeec1942f9932ecd6e34f8b5c9358a501007cf709fe26a2f205be7180af0cca753f89c648b6a1481bce7ed1e8b91dcbb8a0e7f0ce\", \"feeNQT\": \"100000000\", \"type\": 1, \"fullHash\": \"2d923132c2cd045c7c8d901b261ab237dbac7ebd50d3f7c549e601c8cc0f1cf9\", \"version\": 1, \"ecBlockId\": \"6797965034232082546\", \"signatureHash\": \"952eea5e0eb67f1ec78abfab60edcde55f477ae8dcf8f620077783532217c329\", \"attachment\": { \"alias\": \"AliasTestSell\", \"priceNQT\": \"1\", \"version.AliasSell\": 1 }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 6, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"recipient\": \"17001464071916561838\", \"ecBlockHeight\": 498897, \"deadline\": 24, \"transaction\": \"6630650785345671725\", \"timestamp\": 120676513, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 7, \"transactionBytes\": \"0116a16031071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb000000000000000000e1f505*\", \"fullHash\": \"2d923132c2cd045c7c8d901b261ab237dbac7ebd50d3f7c549e601c8cc0f1cf9\", \"transaction\": \"6630650785345671725\" } Set Alias Request https://wallet1.burst-team.us:2083/burst?requestType=setAlias&secretPhrase=IWontTellYou&aliasName=ApiExample&aliasURI=acct:burst-l6fm-89wk-vk8p-fcrbb@burst&feeNQT=100000000&deadline=24 Response: { \"signatureHash\": \"c59f26e0b40c306f5ecf0c222a51a83578a9f04165ff27d5f16a4f9f00fc63f7\", \"unsignedTransactionBytes\": \"0111a2852d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c0000000000000000000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"c27bd8a00b7f8025f7d5054d855d019f939388b1bb52781d9e7d901a81da1a04c726069306f881c2676ae8445cb2bf943465ce32d7daa9fae97a02f597db50b1\", \"feeNQT\": \"100000000\", \"type\": 1, \"fullHash\": \"ebe26aea6b9996886b245485f6a5005cbd9c4e2584211cf0c5fc16548db7ba29\", \"version\": 1, \"ecBlockId\": \"4323691795607025950\", \"signatureHash\": \"c59f26e0b40c306f5ecf0c222a51a83578a9f04165ff27d5f16a4f9f00fc63f7\", \"attachment\": { \"alias\": \"ApiExample\", \"version.AliasAssignment\": 1, \"uri\": \"acct:burst-l6fm-89wk-vk8p-fcrbb@burst\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 1, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 497845, \"deadline\": 24, \"transaction\": \"9842222724438221547\", \"timestamp\": 120423842, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 11, \"transactionBytes\": \"0111a2852d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c0000000000000000000000000000000000e1f505*\", \"transaction\": \"9842222724438221547\" } Get Alias Request http://127.0.0.1:8125/burst?requestType=getAlias&aliasName=AliasTestSell Response: { \"aliasURI\": \"acct:burst-frdj-uplh-my9a-gukqp@burst\", \"aliasName\": \"AliasTestSell\", \"accountRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"alias\": \"5747297803058313219\", \"requestProcessingTime\": 1, \"account\": \"16922903237994405232\", \"timestamp\": 120675864 } Get Aliases Request http://127.0.0.1:8125/burst?requestType=getAliases&account=16922903237994405232 Response: { \"aliases\": [ { \"aliasURI\": \"acct:burst-frdj-uplh-my9a-gukqp@burst\", \"aliasName\": \"AliasTestBuy\", \"accountRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"alias\": \"17197436179114898263\", \"account\": \"16922903237994405232\", \"timestamp\": 120676320 }, { \"aliasURI\": \"acct:burst-frdj-uplh-my9a-gukqp@burst\", \"aliasName\": \"AliasTestSell\", \"accountRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"alias\": \"5747297803058313219\", \"account\": \"16922903237994405232\", \"timestamp\": 120675864 } ], \"requestProcessingTime\": 2 } Arbitrary Message System Operations Encrypt To Request https://wallet1.burst-team.us:2083/burst?requestType=encryptTo&recipient=15323192282528158131&messageToEncrypt=This%20is%20a%20message%20encrypted%20using%20%22encryptTo%22.&messageToEncryptIsText=true&secretPhrase=IWontTellYou Response: { \"data\": \"d5a1958d12ce96ce30dbce5b6c8ead7ecbc0f59d857dc8e8fbeec10ae440e0e74e9120fef3b0fa586d4c63fde0f289340e709b30ae528e3c2d740b11e3ae3fdb5e5d5c63f724cf16157c75dabec31eaf\", \"requestProcessingTime\": 34, \"nonce\": \"7cefa6f66d5b71604e2ef56a18319b3f48a38e8aa5cf610369b294f1d40e0f8e\" } Decrypt From Request https://wallet1.burst-team.us:2083/burst?requestType=decryptFrom&account=16922903237994405232&data=d5a1958d12ce96ce30dbce5b6c8ead7ecbc0f59d857dc8e8fbeec10ae440e0e74e9120fef3b0fa586d4c63fde0f289340e709b30ae528e3c2d740b11e3ae3fdb5e5d5c63f724cf16157c75dabec31eaf&nonce=7cefa6f66d5b71604e2ef56a18319b3f48a38e8aa5cf610369b294f1d40e0f8e&decryptedMessageIsText=true&secretPhrase=IWontTellYou Response: { \"decryptedMessage\": \"This is a message encrypted using \\\"encryptTo\\\".\", \"requestProcessingTime\": 2 } Send Message Request https://wallet1.burst-team.us:2083/burst?requestType=sendMessage&recipient=15323192282528158131&secretPhrase=IWontTellYou&feeNQT=735000&deadline=24&broadcast=true&message=This%20is%20a%20sendMessage%20API%20example&messageIsText=true Response: { \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"unsignedTransactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"dc2503584a48e30ac62d62848f58461e0e9ff55070008743c24f380c24a9ef05525c70b5d40962566f3f4de2018277ba7956eb09d0aec84219784de7f3b76f6a\", \"feeNQT\": \"735000\", \"type\": 1, \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"version\": 1, \"ecBlockId\": \"1212249281481197658\", \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"attachment\": { \"version.Message\": 1, \"messageIsText\": true, \"message\": \"This is a sendMessage API example\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"recipient\": \"15323192282528158131\", \"ecBlockHeight\": 502787, \"deadline\": 24, \"transaction\": \"3120851314369640207\", \"timestamp\": 121620814, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 11, \"transactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\", \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"transaction\": \"3120851314369640207\" } Read Message Request https://wallet1.burst-team.us:2083/burst?requestType=readMessage&transaction=3120851314369640207 Response: { \"requestProcessingTime\": 0, \"message\": \"This is a sendMessage API example\" } Asset Exchange Operations Cancel Order Request https://wallet1.burst-team.us:2083/burst?requestType=cancelAskOrder&order=15076843998317839249&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=1&broadcast=true Response: { \"signatureHash\": \"ea56c641c52e20cfeb2413dc49fc24a00eba23ac4aa444fdb059ad0aa66fdb0f\", \"unsignedTransactionBytes\": \"0214c0d347070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f120000000000000000000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"67f67f75a4ed60109239719e29a11915e4e05addd7d851d75766ef4e64b7b7093ff55615144ffb26d2b0de4c8656330ecd1117b3d477219ed09a1098cb77cd81\", \"feeNQT\": \"100000000\", \"type\": 2, \"fullHash\": \"1454e33bfca5e67186d69ce027e408b3fc52dce6497d4f1d667598e52cae4a3e\", \"version\": 1, \"ecBlockId\": \"16853437834039716545\", \"signatureHash\": \"ea56c641c52e20cfeb2413dc49fc24a00eba23ac4aa444fdb059ad0aa66fdb0f\", \"attachment\": { \"version.AskOrderCancellation\": 1, \"order\": \"15076843998317839249\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 4, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"ecBlockHeight\": 504969, \"deadline\": 1, \"transaction\": \"8207429873684403220\", \"timestamp\": 122147776, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 7, \"transactionBytes\": \"0214c0d347070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f120000000000000000000000000000000000e1f505*\", \"fullHash\": \"1454e33bfca5e67186d69ce027e408b3fc52dce6497d4f1d667598e52cae4a3e\", \"transaction\": \"8207429873684403220\" } Get Account Current Order Ids Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountCurrentAskOrderIds&account=9582909050628712440 Response: { \"requestProcessingTime\": 2, \"askOrderIds\": [ \"4875748854378397140\", \"109196327778941945\" ] } Get Account Current Orders Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountCurrentAskOrders&account=9582909050628712440 Response: { \"askOrders\": [ { \"quantityQNT\": \"100000\", \"priceNQT\": \"195000\", \"accountRS\": \"BURST-MBZS-2BCT-45QV-APCZB\", \"asset\": \"3702027329806229573\", \"type\": \"ask\", \"account\": \"9582909050628712440\", \"order\": \"4875748854378397140\", \"height\": 495658 }, { \"quantityQNT\": \"260100\", \"priceNQT\": \"200000\", \"accountRS\": \"BURST-MBZS-2BCT-45QV-APCZB\", \"asset\": \"3702027329806229573\", \"type\": \"ask\", \"account\": \"9582909050628712440\", \"order\": \"109196327778941945\", \"height\": 494427 } ], \"requestProcessingTime\": 1 } Get All Assets Request https://wallet1.burst-team.us:2083/burst?requestType=getAllAssets&firstIndex=373 Response: { \"assets\": [ { \"quantityQNT\": \"10000000000\", \"numberOfAccounts\": 77, \"accountRS\": \"BURST-8E8K-WQ2F-ZDZ5-FQWHX\", \"decimals\": 8, \"numberOfTransfers\": 26, \"name\": \"BCPT\", \"description\": \"Burst Cryptoport Pool Token, is an asset that backed by profit from MiningPool at http://burst-pool.cryptoport.io, i will pay dividend from 50% fund i got from pool fee (monthly). dividend will be proportional to BCPT owned\", \"numberOfTrades\": 510, \"asset\": \"12791182347560578640\", \"account\": \"16050713509424738513\" }, { \"quantityQNT\": \"100000000\", \"numberOfAccounts\": 26, \"accountRS\": \"BURST-H2ZW-3H4D-RJBS-FCVGV\", \"decimals\": 2, \"numberOfTransfers\": 36, \"name\": \"BurstFund\", \"description\": \"This asset will act as a stabilizer fund for Burst. This asset aims to assist in maintaining the value of Burst, providing market correction in the event of market manipulation. Each Quantity will be representative of 10 Burst at an initial market price of 0.00001000 each (or determined by asset market). This assets main focus will be ensuring Burst does not become another outdated and dead NXT clone...\", \"numberOfTrades\": 2, \"asset\": \"673530795527425458\", \"account\": \"15977480701804512252\" } ], \"requestProcessingTime\": 3 } Get All Open Orders Request https://wallet1.burst-team.us:2083/burst?requestType=getAllOpenAskOrders&firstIndex=2577 Response: { \"requestProcessingTime\": 0, \"openOrders\": [ { \"quantityQNT\": \"10\", \"priceNQT\": \"10000000000000\", \"accountRS\": \"BURST-359Q-QH73-4N5P-FP54C\", \"asset\": \"15295227971848272658\", \"type\": \"ask\", \"account\": \"15350648744942013686\", \"order\": \"14034527401109329159\", \"height\": 17901 }, { \"quantityQNT\": \"1\", \"priceNQT\": \"10000000000000\", \"accountRS\": \"BURST-Q4TR-YKRW-6RAN-EDBC8\", \"asset\": \"11375670541237055652\", \"type\": \"ask\", \"account\": \"14062819640288676663\", \"order\": \"18379469307992717843\", \"height\": 11997 }, { \"quantityQNT\": \"4392\", \"priceNQT\": \"100000000000\", \"accountRS\": \"BURST-SKL3-ACW8-DBN6-5M8VM\", \"asset\": \"11375670541237055652\", \"type\": \"ask\", \"account\": \"4173943238181013057\", \"order\": \"756014781951608408\", \"height\": 11257 } ] } Get All Trades Request https://wallet1.burst-team.us:2083/burst?requestType=getAllTrades&lastIndex=1 Response: { \"trades\": [ { \"seller\": \"2695253629713716937\", \"quantityQNT\": \"7700\", \"bidOrder\": \"17489219850997945774\", \"sellerRS\": \"BURST-Q7QB-WPPC-6VE2-4QVTC\", \"buyer\": \"14676337193484961173\", \"priceNQT\": \"100000\", \"askOrder\": \"7125231493760146086\", \"buyerRS\": \"BURST-EKEP-XEYS-6YPW-EL8DR\", \"decimals\": 2, \"name\": \"CryptoMaps\", \"block\": \"10810208340839229954\", \"asset\": \"3702027329806229573\", \"askOrderHeight\": 504189, \"tradeType\": \"sell\", \"timestamp\": 122140342, \"height\": 504949 }, { \"seller\": \"6905334832585552856\", \"quantityQNT\": \"1000\", \"bidOrder\": \"14942960390822608034\", \"sellerRS\": \"BURST-BEYS-G8VQ-6SEK-7F7PZ\", \"buyer\": \"17808054289263456125\", \"priceNQT\": \"66500000\", \"askOrder\": \"3461704332885328085\", \"buyerRS\": \"BURST-QVVX-2TL8-WZ2C-HDRAG\", \"decimals\": 0, \"name\": \"BTFGPool\", \"block\": \"9914674296156980645\", \"asset\": \"9036920395530551012\", \"askOrderHeight\": 504920, \"tradeType\": \"buy\", \"timestamp\": 122132789, \"height\": 504920 } ], \"requestProcessingTime\": 447 } Get Asset Request https://wallet1.burst-team.us:2083/burst?requestType=getAsset&asset=3702027329806229573 Response: { \"quantityQNT\": \"20000000000\", \"numberOfAccounts\": 9210, \"accountRS\": \"BURST-CMAP-ME5N-TFKP-6BCER\", \"decimals\": 2, \"numberOfTransfers\": 11869, \"name\": \"CryptoMaps\", \"description\": \"The official CryptoMaps Token, see more details at https://token.cryptomaps.me\", \"numberOfTrades\": 523, \"requestProcessingTime\": 0, \"asset\": \"3702027329806229573\", \"account\": \"5454221553913122069\" } Get Asset Accounts Request https://wallet1.burst-team.us:2083/burst?requestType=getAssetAccounts&asset=3702027329806229573&lastIndex=1 Response: { \"accountAssets\": [ { \"quantityQNT\": \"5000000000\", \"accountRS\": \"BURST-CMAP-AY84-2TV8-6F2QK\", \"unconfirmedQuantityQNT\": \"5000000000\", \"asset\": \"3702027329806229573\", \"account\": \"5248959966645406997\" }, { \"quantityQNT\": \"5000000000\", \"accountRS\": \"BURST-CMSP-HRMP-ZBTM-9P4J7\", \"unconfirmedQuantityQNT\": \"5000000000\", \"asset\": \"3702027329806229573\", \"account\": \"8268702915092631317\" } ], \"requestProcessingTime\": 22 } Get Asset Ids Request https://wallet1.burst-team.us:2083/burst?requestType=getAssetIds&lastIndex=5 Response: { \"assetIds\": [ \"2644409077762286513\", \"5533434524898779728\", \"7756017130240677072\", \"2663432644302202784\", \"11700625361170592721\", \"9789600218215198873\" ], \"requestProcessingTime\": 1 } Get Asset Transfers Request https://wallet1.burst-team.us:2083/burst?requestType=getAssetTransfers&asset=3702027329806229573&lastIndex=1 Response: { \"transfers\": [ { \"quantityQNT\": \"10000\", \"senderRS\": \"BURST-RBHF-BY3C-V949-37G3N\", \"assetTransfer\": \"16436527819322024045\", \"sender\": \"1875121765155055085\", \"recipientRS\": \"BURST-59HP-HQ5R-7MGU-AG4LC\", \"decimals\": 2, \"recipient\": \"9604012506417831413\", \"name\": \"CryptoMaps\", \"asset\": \"3702027329806229573\", \"height\": 504029, \"timestamp\": 121917645 }, { \"quantityQNT\": \"5500\", \"senderRS\": \"BURST-PVZT-KWEH-ZTJE-7Z7C9\", \"assetTransfer\": \"9907383924348587793\", \"sender\": \"6028278722555736057\", \"recipientRS\": \"BURST-RKW5-ZVFT-JU69-6X4JC\", \"decimals\": 2, \"recipient\": \"4990091736314005379\", \"name\": \"CryptoMaps\", \"asset\": \"3702027329806229573\", \"height\": 500631, \"timestamp\": 121093713 } ], \"requestProcessingTime\": 2 } Get Assets Request https://wallet1.burst-team.us:2083/burst?requestType=getAssets&assets=9306257191450064346&assets=3702027329806229573 Response: { \"assets\": [ { \"quantityQNT\": \"20000000000\", \"numberOfAccounts\": 9210, \"accountRS\": \"BURST-CMAP-ME5N-TFKP-6BCER\", \"decimals\": 2, \"numberOfTransfers\": 11869, \"name\": \"CryptoMaps\", \"description\": \"The official CryptoMaps Token, see more details at https://token.cryptomaps.me\", \"numberOfTrades\": 523, \"asset\": \"3702027329806229573\", \"account\": \"5454221553913122069\" }, { \"quantityQNT\": \"200000000000\", \"numberOfAccounts\": 1, \"accountRS\": \"BURST-SPPT-TD44-HUVK-FSZS4\", \"decimals\": 2, \"numberOfTransfers\": 0, \"name\": \"SpotPoint\", \"description\": \"The official SpotPoint Token, see more details at https://spotpoint.me\", \"numberOfTrades\": 0, \"asset\": \"9306257191450064346\", \"account\": \"15088176726379615929\" } ], \"requestProcessingTime\": 0 } Get Assets By Issuer Request https://wallet1.burst-team.us:2083/burst?requestType=getAssetsByIssuer&account=1494753212313950790&account=5970910749481183928 Response: { \"assets\": [ [ { \"quantityQNT\": \"100000000\", \"numberOfAccounts\": 19, \"accountRS\": \"BURST-KQL8-645F-3WU8-3GMHB\", \"decimals\": 2, \"numberOfTransfers\": 0, \"name\": \"BoB1Pos\", \"description\": \"Brotherhood of Blockchain www.bob-invest.com proudly present the first investment opportunity on Burst asset. This asset will invest in Prove of Stake coins and pay out dividend in Burst. The payout ratio is 70% to asset holder 20% equipment, internet, electricity, maintenance and admin. 10% reinvest in coins.This asset will make a monthly payment every 15th of the month, first payment is 15/6/2018.\", \"numberOfTrades\": 35, \"asset\": \"15511449532155436028\", \"account\": \"1494753212313950790\" } ], [ { \"quantityQNT\": \"80000000000000\", \"numberOfAccounts\": 6, \"accountRS\": \"BURST-8CPS-Q628-PU9W-7H9R7\", \"decimals\": 6, \"numberOfTransfers\": 3, \"name\": \"GMK\", \"description\": \"GMK Coin\", \"numberOfTrades\": 2, \"asset\": \"8141917335139373659\", \"account\": \"5970910749481183928\" } ] ], \"requestProcessingTime\": 3 } Get Order Request https://wallet1.burst-team.us:2083/burst?requestType=getAskOrder&order=14034527401109329159 Response: { \"quantityQNT\": \"10\", \"priceNQT\": \"10000000000000\", \"accountRS\": \"BURST-359Q-QH73-4N5P-FP54C\", \"requestProcessingTime\": 1, \"asset\": \"15295227971848272658\", \"type\": \"ask\", \"account\": \"15350648744942013686\", \"order\": \"14034527401109329159\", \"height\": 17901 } Get Order Ids Request https://wallet1.burst-team.us:2083/burst?requestType=getAskOrderIds&asset=11700625361170592721&lastIndex=5 Response: { \"requestProcessingTime\": 3, \"askOrderIds\": [ \"9230225288402446558\", \"9243318318548315528\", \"9399454941412352140\", \"9436352279829246389\", \"9443733332658954573\", \"9545675672764030312\" ] } Get Orders Request https://wallet1.burst-team.us:2083/burst?requestType=getAskOrders&asset=11700625361170592721&lastIndex=2 Response: { \"askOrders\": [ { \"quantityQNT\": \"250\", \"priceNQT\": \"100000000\", \"accountRS\": \"BURST-CDQV-WN87-YB2L-FTEPP\", \"asset\": \"11700625361170592721\", \"type\": \"ask\", \"account\": \"15768678879341129435\", \"order\": \"9230225288402446558\", \"height\": 501552 }, { \"quantityQNT\": \"50000\", \"priceNQT\": \"100000000\", \"accountRS\": \"BURST-CDQV-WN87-YB2L-FTEPP\", \"asset\": \"11700625361170592721\", \"type\": \"ask\", \"account\": \"15768678879341129435\", \"order\": \"9243318318548315528\", \"height\": 501552 }, { \"quantityQNT\": \"50\", \"priceNQT\": \"100000000\", \"accountRS\": \"BURST-CDQV-WN87-YB2L-FTEPP\", \"asset\": \"11700625361170592721\", \"type\": \"ask\", \"account\": \"15768678879341129435\", \"order\": \"9399454941412352140\", \"height\": 501552 } ], \"requestProcessingTime\": 1 } Get Trades Request https://wallet1.burst-team.us:2083/burst?requestType=getTrades&asset=3702027329806229573&lastIndex=2&includeAssetInfo=false Response: { \"trades\": [ { \"seller\": \"2695253629713716937\", \"quantityQNT\": \"7700\", \"bidOrder\": \"17489219850997945774\", \"sellerRS\": \"BURST-Q7QB-WPPC-6VE2-4QVTC\", \"buyer\": \"14676337193484961173\", \"priceNQT\": \"100000\", \"askOrder\": \"7125231493760146086\", \"buyerRS\": \"BURST-EKEP-XEYS-6YPW-EL8DR\", \"block\": \"10810208340839229954\", \"asset\": \"3702027329806229573\", \"askOrderHeight\": 504189, \"tradeType\": \"sell\", \"timestamp\": 122140342, \"height\": 504949 }, { \"seller\": \"13248005565246971693\", \"quantityQNT\": \"100000\", \"bidOrder\": \"6312065606850043247\", \"sellerRS\": \"BURST-59TF-VVKH-X6SQ-DYLQH\", \"buyer\": \"9582909050628712440\", \"priceNQT\": \"120000\", \"askOrder\": \"17472059594274895773\", \"buyerRS\": \"BURST-MBZS-2BCT-45QV-APCZB\", \"block\": \"12097007668561592790\", \"asset\": \"3702027329806229573\", \"askOrderHeight\": 504899, \"tradeType\": \"buy\", \"timestamp\": 122129038, \"height\": 504899 }, { \"seller\": \"12065311156306389227\", \"quantityQNT\": \"7700\", \"bidOrder\": \"17489219850997945774\", \"sellerRS\": \"BURST-8C9D-LBN5-X9FG-CS6WG\", \"buyer\": \"14676337193484961173\", \"priceNQT\": \"100000\", \"askOrder\": \"2519849914836375271\", \"buyerRS\": \"BURST-EKEP-XEYS-6YPW-EL8DR\", \"block\": \"16551915903483185103\", \"asset\": \"3702027329806229573\", \"askOrderHeight\": 504189, \"tradeType\": \"sell\", \"timestamp\": 122075678, \"height\": 504681 } ], \"requestProcessingTime\": 1 } Issue Asset Request http://localhost:8125/burst?requestType=issueAsset&publicKey=57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c&name=SecretCoin&description=This+is+SecretCoin&quantityQNT=100&deadline=60&feeNQT=100000000000 Note: This is a fake example. Response: { \"unsignedTransactionBytes\": \"021095e5da013c0073080c6a224062660184f10ebb7fb431d459364a12403...\", \"transactionJSON\": { \"senderPublicKey\": \"73080c6a224062660184f10ebb7fb431d459364a12403320c7f601f9d75cc547\", \"feeNQT\": \"100000000000\", \"type\": 2, \"version\": 1, \"ecBlockId\": \"1564408139943737911\", \"attachment\": { \"name\": \"SecretCoin\", \"description\": \"This+is+SecretCoin\", \"quantityQNT\": \"100\", \"version.AssetIssuance\": 1, \"decimals\": 0 }, \"senderRS\": \"BURST-4VNQ-RWZC-4WWQ-GVM8S\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"17013046603665206934\", \"ecBlockHeight\": 288402, \"deadline\": 60, \"timestamp\": 31122837, \"height\": 2147483647 }, \"broadcasted\": false, \"requestProcessingTime\": 2 } Place Order Request https://wallet1.burst-team.us:2083/burst?requestType=placeBidOrder&asset=3702027329806229573&quantityQNT=1&priceNQT=100000000&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=1&broadcast=false Response: { \"signatureHash\": \"3358f546ce7136ca478692102d0b526f80b4ca83eb78e90d15813b9636b654e5\", \"unsignedTransactionBytes\": \"0213c6cc47070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f120000000000000000000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"48d14f308d26380e4dfa26b296c8728eef04af8704acff60f4d8bef28a126701ea29878753d2106a16228cfc3829e8f3d6a2e5baf739dbd0460fd45cff1241e0\", \"feeNQT\": \"100000000\", \"type\": 2, \"fullHash\": \"229f52765195110e0e096b81b91f04186be14ada7e29949841ee30e37b655775\", \"version\": 1, \"ecBlockId\": \"6656096466494440810\", \"signatureHash\": \"3358f546ce7136ca478692102d0b526f80b4ca83eb78e90d15813b9636b654e5\", \"attachment\": { \"quantityQNT\": \"1\", \"priceNQT\": \"100000000\", \"asset\": \"3702027329806229573\", \"version.BidOrderPlacement\": 1 }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 3, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"ecBlockHeight\": 504963, \"deadline\": 1, \"transaction\": \"1013755568245088034\", \"timestamp\": 122145990, \"height\": 2147483647 }, \"broadcasted\": false, \"requestProcessingTime\": 3, \"transactionBytes\": \"0213c6cc47070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f120000000000000000000000000000000000e1f505*\", \"fullHash\": \"229f52765195110e0e096b81b91f04186be14ada7e29949841ee30e37b655775\", \"transaction\": \"1013755568245088034\" } Transfer Asset Request https://wallet1.burst-team.us:2083/burst?requestType=transferAsset&recipient=17001464071916561838&asset=3702027329806229573&quantityQNT=1&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=1&broadcast=true Response: { \"signatureHash\": \"59456e26081926b27c38ca46d574e4a6373953b932e8368f131f7bc86ffc3aa9\", \"unsignedTransactionBytes\": \"021143d147070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"b5f33599a52e5e4e56ad5c316cd6f6ced8ebe9e9931222aaee30407570ede60031a068b6a89714fca851b486e8d8c2509ef46b3e0e1ef44c819cbff5b0bb78c4\", \"feeNQT\": \"100000000\", \"type\": 2, \"fullHash\": \"3b7d9f5b998ce795a3300ed1e6df1ba8fe467b137e2f2c662c9149a5b0f878d9\", \"version\": 1, \"ecBlockId\": \"6974740076508916530\", \"signatureHash\": \"59456e26081926b27c38ca46d574e4a6373953b932e8368f131f7bc86ffc3aa9\", \"attachment\": { \"version.AssetTransfer\": 1, \"quantityQNT\": \"1\", \"asset\": \"3702027329806229573\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 1, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"recipient\": \"17001464071916561838\", \"ecBlockHeight\": 504968, \"deadline\": 1, \"transaction\": \"10801756821566487867\", \"timestamp\": 122147139, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 5, \"transactionBytes\": \"021143d147070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb000000000000000000e1f505*\", \"fullHash\": \"3b7d9f5b998ce795a3300ed1e6df1ba8fe467b137e2f2c662c9149a5b0f878d9\", \"transaction\": \"10801756821566487867\" } Block Operations Get Block Request https://wallet1.burst-team.us:2083/burst?requestType=getBlock&block=2298247278137763160 Response: { \"previousBlockHash\": \"98338ec9e496040f505dace85c3ab331e6ad257f24d6e9417877a4a22b449ab3\", \"payloadLength\": 214, \"totalAmountNQT\": \"0\", \"generationSignature\": \"be12abb71bfe2dcde77cbd5872e64855929d934d04a491cb08950b9e509f37eb\", \"generator\": \"16286104011619463406\", \"generatorPublicKey\": \"ba5464139a83fcdb600ba141b567430ec5ebd0e409d246cdd33c3597855e0a4e\", \"baseTarget\": \"116169\", \"payloadHash\": \"20585e4ab9b6ac07f8903a509b1494dab99b931bedf3e3ad11c5a556a82b7c3e\", \"generatorRS\": \"BURST-AW9G-BYKU-AZWL-GXY26\", \"blockReward\": \"944\", \"nextBlock\": \"10431007917907627236\", \"requestProcessingTime\": 0, \"scoopNum\": 3035, \"numberOfTransactions\": 1, \"blockSignature\": \"5c40fb39d21ec55a77718e9de25b40f008b5a940434208b191bf010322c453047a3fe6418b0ffa62c131a31d59142ec9b336815210c96a8a37709768a6d8e6c3\", \"transactions\": [ \"3120851314369640207\" ], \"nonce\": \"77469254\", \"version\": 3, \"totalFeeNQT\": \"735000\", \"previousBlock\": \"1082155719854011288\", \"block\": \"2298247278137763160\", \"height\": 502797, \"timestamp\": 121620850 } Get Block Id Request https://wallet1.burst-team.us:2083/burst?requestType=getBlockId&height=502000 Response: { \"block\": \"9782158559918006093\", \"requestProcessingTime\": 1 } Get Blocks Request https://wallet1.burst-team.us:2083/burst?requestType=getBlocks&lastIndex=1 Response: { \"blocks\": [ { \"previousBlockHash\": \"e4cc2b7c6f62c290d1405ef236b846d316df4cc187c9554b18dcb54861f4ade2\", \"payloadLength\": 1234, \"totalAmountNQT\": \"132933935798\", \"generationSignature\": \"53f43986acef5899f08e388bde1bc6b935499c91badace2247076aa984fea577\", \"generator\": \"12019899115821911181\", \"generatorPublicKey\": \"f6b3ee829223351281340617eae3bdc3082ae9db6899395befddabc4aae37161\", \"baseTarget\": \"115429\", \"payloadHash\": \"2e71185d5f9c8cce3f2cc87dec5df9643dc0b6562f78f49b553610bc4d9af5a3\", \"generatorRS\": \"BURST-KM6F-KZ7B-46SF-C4UMF\", \"blockReward\": \"944\", \"scoopNum\": 1265, \"numberOfTransactions\": 7, \"blockSignature\": \"c5f9495278e685e90d4d42108c0a25b0a62f0006bdbb70f8df90d17d49a4670c09d13d63947fe69904340748348001277308de67891ee3bec177524629bc7383\", \"transactions\": [ \"14343547955476128075\", \"14751316321929102651\", \"18403710335612237831\", \"2492947289038528624\", \"3664660987329932102\", \"5094936331677798562\", \"5165719427461695861\" ], \"nonce\": \"518857973\", \"version\": 3, \"totalFeeNQT\": \"510735000\", \"previousBlock\": \"10431007917907627236\", \"block\": \"3526547904120473437\", \"height\": 502799, \"timestamp\": 121621514 }, { \"previousBlockHash\": \"58e5680bb903e51f3dfe2221d5f291e5e7750f360fe78f7f5fee3c568867c7f2\", \"payloadLength\": 938, \"totalAmountNQT\": \"139674768871\", \"generationSignature\": \"142e073b4a84e95284b8eae679f1cc87d82f418897ffe0858d9bd1adda33d220\", \"generator\": \"12414125682074447698\", \"generatorPublicKey\": \"4f04a259ddc9c60e49bf3ef0ca5cb53c00ae97dedc1fcb59af2e48a9894ea745\", \"baseTarget\": \"116986\", \"payloadHash\": \"3d5153f350a07fb6d0b9a4cd07f2d4ef38b0bf312df2091eda05edf2ca4f1283\", \"generatorRS\": \"BURST-MVUL-K5UK-RRTY-CPYKS\", \"blockReward\": \"944\", \"nextBlock\": \"3526547904120473437\", \"scoopNum\": 3885, \"numberOfTransactions\": 5, \"blockSignature\": \"300fd5eace546b846213894c0afa9e68755fa300472a1101ca36d524d3433108445f7154d6b9151c3202272e516b7b9c180751ee65de949cdc7a459409a8b613\", \"transactions\": [ \"13447447233023586787\", \"14140393734437081046\", \"3451268376629033899\", \"4144139998017169860\", \"5800257696655274819\" ], \"nonce\": \"77540123\", \"version\": 3, \"totalFeeNQT\": \"400735000\", \"previousBlock\": \"2298247278137763160\", \"block\": \"10431007917907627236\", \"height\": 502798, \"timestamp\": 121620994 } ], \"requestProcessingTime\": 1 } Get EC Block Request https://wallet1.burst-team.us:2083/burst?requestType=getECBlock Response: { \"ecBlockHeight\": 502788, \"requestProcessingTime\": 1, \"ecBlockId\": \"15769175919943831738\", \"timestamp\": 121621703 } Digital Goods Store Operations DGS Delisting Request https://wallet1.burst-team.us:2083/burst?requestType=dgsDelisting&goods=11813734897437346473&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"87dd2aa00690acaa5da4e8cd9db6ab94b5ed8bf0f8fe2c2ba6a39c57d3073105\", \"unsignedTransactionBytes\": \"03111852e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"39ee52204d0a32c0bbd0e4bc6a6fb52299cd7d16ab74e9a040f857d3b1c3e...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"40e64c357e240f9b7ca5780e757e34d48a58ae93eeb19e62d020d5719b43e2b6\", \"version\": 1, \"ecBlockId\": \"5345754442518111082\", \"signatureHash\": \"87dd2aa00690acaa5da4e8cd9db6ab94b5ed8bf0f8fe2c2ba6a39c57d3073105\", \"attachment\": { \"version.DigitalGoodsDelisting\": 1, \"goods\": \"11813734897437346473\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 1, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 292903, \"deadline\": 60, \"transaction\": \"11173189325008201280\", \"timestamp\": 31609368, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 5188, \"transactionBytes\": \"03111852e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"40e64c357e240f9b7ca5780e757e34d48a58ae93eeb19e62d020d5719b43e2b6\", \"transaction\": \"11173189325008201280\" } DGS Delivery Request https://wallet1.burst-team.us:2083/burst?requestType=dgsDelivery&purchase=3723760852542296589&goodsToEncrypt=DownloadCode&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"f3f1f1bf30c7a6f5a7776aa23502dfe5240efe0d5c016760f8e8a152c4eb1b1b\", \"unsignedTransactionBytes\": \"0315b20fe1013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"b96c42161ce38177168de5a8906ce747a5415017df5b16cdce1c015cb6e1f10b...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"349926ea025b627117c05fbe3ff298e97a8efdb07f7ae552b5a91e7112c5b82b\", \"version\": 1, \"ecBlockId\": \"15813950788992376142\", \"signatureHash\": \"f3f1f1bf30c7a6f5a7776aa23502dfe5240efe0d5c016760f8e8a152c4eb1b1b\", \"attachment\": { \"goodsIsText\": true, \"discountNQT\": \"0\", \"purchase\": \"3723760852542296589\", \"goodsData\": \"aef91bfe543844964b0dadc51c6fe4c624b6b0c72c23c5c61f7e626f51e15...\", \"version.DigitalGoodsDelivery\": 1, \"goodsNonce\": \"4cb474ec53a590c6fd20d050c429d009ddefd286b2782eb3a0782ae45c2bbbbd\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 5, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-6GMG-FC5F-YSX6-8CVEL\", \"recipient\": \"7580519603555678830\", \"ecBlockHeight\": 292069, \"deadline\": 60, \"transaction\": \"8170192742079961396\", \"timestamp\": 31526834, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 8832, \"transactionBytes\": \"0315b20fe1013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"349926ea025b627117c05fbe3ff298e97a8efdb07f7ae552b5a91e7112c5b82b\", \"transaction\": \"8170192742079961396\" } Feedback Request https://wallet1.burst-team.us:2083/burst?requestType=dgsFeedback&purchase=10234639413366748292&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60&message=Thanks Response: { \"signatureHash\": \"bf31e4e3b2037bfe223efd72519e3a2d25cd1e0dc1a62e3eeefe59179e16a7a4\", \"unsignedTransactionBytes\": \"0316a463e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"a3ee76ce4bec0328fe5cfc1a2adfc229a8c9959a81b7912664de51156987c...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"491d94b9031b7a7a32d9ab5d0491b81364941eb080ee9029de58cb6ffa0161f6\", \"version\": 1, \"ecBlockId\": \"5484311742753527844\", \"signatureHash\": \"bf31e4e3b2037bfe223efd72519e3a2d25cd1e0dc1a62e3eeefe59179e16a7a4\", \"attachment\": { \"purchase\": \"10234639413366748292\", \"version.Message\": 1, \"messageIsText\": true, \"version.DigitalGoodsFeedback\": 1, \"message\": \"Thank you!\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 6, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-6GMG-FC5F-YSX6-8CVEL\", \"recipient\": \"7580519603555678830\", \"ecBlockHeight\": 292938, \"deadline\": 60, \"transaction\": \"8825396122598251849\", \"timestamp\": 31613860, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 9343, \"transactionBytes\": \"0316a463e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"491d94b9031b7a7a32d9ab5d0491b81364941eb080ee9029de58cb6ffa0161f6\", \"transaction\": \"8825396122598251849\" } DGS Listing Request https://wallet1.burst-team.us:2083/burst?requestType=dgsListing&secretPhrase=IWontTellYou&name=Test&description=Testing&tags=test&quantity=3&priceNQT=100000000&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"565bc0a6140ae1331cd5db009fbd9da164d8802330939ef40204a9bc343b3149\", \"unsignedTransactionBytes\": \"031092aedf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"465ed3dfef9a02fc97fc18a6f83bb9f07c285aef41ff78c957d59cda2972ba...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"a98a63204cd1f2a3304cee79776854f290f0472883c576056fec16a23efa90df\", \"version\": 1, \"ecBlockId\": \"4480409615309425420\", \"signatureHash\": \"565bc0a6140ae1331cd5db009fbd9da164d8802330939ef40204a9bc343b3149\", \"attachment\": { \"priceNQT\": \"100000000\", \"quantity\": 3, \"name\": \"Test Product\", \"description\": \"Testing the DGS.\", \"version.DigitalGoodsListing\": 1, \"tags\": \"test, product, tag, extra\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 291240, \"deadline\": 60, \"transaction\": \"11813734897437346473\", \"timestamp\": 31436434, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 8958, \"transactionBytes\": \"031092aedf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473b...\", \"fullHash\": \"a98a63204cd1f2a3304cee79776854f290f0472883c576056fec16a23efa90df\", \"transaction\": \"11813734897437346473\" } DGS Price Change Request https://wallet1.burst-team.us:2083/burst?requestType=dgsPriceChange&goods=11813734897437346473&priceNQT=200000000&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"aad88476935eda8ca3a9190163b83106e6ca95733ddfa274d29a0378d773cc3c\", \"unsignedTransactionBytes\": \"0312cebbdf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"533f9c330100cab8a7a0f9375b49a09f6432b0e029660ab715a728ac75e6c2...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"1964e4fe11f4a00a96c79e274f9da21f64d7fe10ed77a154975b92d3c65f1287\", \"version\": 1, \"ecBlockId\": \"14411471768450948944\", \"signatureHash\": \"aad88476935eda8ca3a9190163b83106e6ca95733ddfa274d29a0378d773cc3c\", \"attachment\": { \"goods\": \"11813734897437346473\", \"priceNQT\": \"200000000\", \"version.DigitalGoodsPriceChange\": 1 }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 2, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 291259, \"deadline\": 60, \"transaction\": \"765880294780986393\", \"timestamp\": 31439822, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 6444, \"transactionBytes\": \"0312cebbdf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"1964e4fe11f4a00a96c79e274f9da21f64d7fe10ed77a154975b92d3c65f1287\", \"transaction\": \"765880294780986393\" } DGS Purchase Request https://wallet1.burst-team.us:2083/burst?requestType=dgsPurchase&goods=1587116104511359906&quantity=1&deliveryDeadlineTimestamp=31800000&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"03e112d8707ae33ec37ff4405f31920c0e67c58439e33033c248b3eaca81d2c3\", \"unsignedTransactionBytes\": \"0314805be2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"a2739ef63024d9d3c61bebbb2692e7a2092666e13fc380c2e8b29c3a3fc24...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"84f4ef2d52be088e011e5b7857fbab88665918e0df02102a8333aee53c3bb88b\", \"version\": 1, \"ecBlockId\": \"3186563001195424357\", \"signatureHash\": \"03e112d8707ae33ec37ff4405f31920c0e67c58439e33033c248b3eaca81d2c3\", \"attachment\": { \"goods\": \"1587116104511359906\", \"priceNQT\": \"100000000\", \"quantity\": 1, \"deliveryDeadlineTimestamp\": 31800000, \"version.DigitalGoodsPurchase\": 1 }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 4, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-6GMG-FC5F-YSX6-8CVEL\", \"recipient\": \"7580519603555678830\", \"ecBlockHeight\": 292925, \"deadline\": 60, \"transaction\": \"10234639413366748292\", \"timestamp\": 31611776, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 5536, \"transactionBytes\": \"0314805be2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"84f4ef2d52be088e011e5b7857fbab88665918e0df02102a8333aee53c3bb88b\", \"transaction\": \"10234639413366748292\" } DGS Quantity Change Request https://wallet1.burst-team.us:2083/burst?requestType=dgsQuantityChange&goods=11813734897437346473&deltaQuantity=-1&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"5c60fc94452980f88423c3a16a74d49209d246d0f7454024c87cc76ea3221500\", \"unsignedTransactionBytes\": \"031334b7df013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"7eaf8e48a780f51aa7e01c01091c9388b72a1bf075dddbd3594d55ad169272...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"f3cd9046bba3706dd6f63cf387f23c7c29532ff15e3423f57900613c844a646f\", \"version\": 1, \"ecBlockId\": \"14589429051005044326\", \"signatureHash\": \"5c60fc94452980f88423c3a16a74d49209d246d0f7454024c87cc76ea3221500\", \"attachment\": { \"goods\": \"11813734897437346473\", \"version.DigitalGoodsQuantityChange\": 1, \"deltaQuantity\": -1 }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 3, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 291249, \"deadline\": 60, \"transaction\": \"7885982972263845363\", \"timestamp\": 31438644, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 7474, \"transactionBytes\": \"031334b7df013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"f3cd9046bba3706dd6f63cf387f23c7c29532ff15e3423f57900613c844a646f\", \"transaction\": \"7885982972263845363\" } DGS Refund Request https://wallet1.burst-team.us:2083/burst?requestType=dgsRefund&purchase=3723760852542296589&refundNQT=100000000&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"dafa980759db6bd6e5f11aa7bdc1cff1bb201be750328c397870f1758cef975c\", \"unsignedTransactionBytes\": \"0317944ee2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"43a90c1f0dde1bca84623e69b0abe0284883600d7bfb5286b3489a9ee417...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"64c2af2811da3306f4671002ed1f12655fca1937a0b68164da2a71f3ee63adce\", \"version\": 1, \"ecBlockId\": \"11418000967717599433\", \"signatureHash\": \"dafa980759db6bd6e5f11aa7bdc1cff1bb201be750328c397870f1758cef975c\", \"attachment\": { \"purchase\": \"3723760852542296589\", \"version.DigitalGoodsRefund\": 1, \"refundNQT\": \"100000000\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 7, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-6GMG-FC5F-YSX6-8CVEL\", \"recipient\": \"7580519603555678830\", \"ecBlockHeight\": 292899, \"deadline\": 60, \"transaction\": \"446940555271717476\", \"timestamp\": 31608468, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 10509, \"transactionBytes\": \"0317944ee2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"64c2af2811da3306f4671002ed1f12655fca1937a0b68164da2a71f3ee63adce\", \"transaction\": \"446940555271717476\" } Get DGS Good Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSGood&goods=490136863013671329 Response: { \"seller\": \"16432157717192673510\", \"priceNQT\": \"750000000000\", \"quantity\": 1000, \"name\": \"100 TB Plot File\", \"goods\": \"490136863013671329\", \"description\": \"48-100h delivery Time\\r\\nSpecify how big you want your file\\r\\nMin size 1 TB\\r\\nMax size 10 TB\\r\\nDelivery is a Torrent Download\", \"sellerRS\": \"BURST-F498-E9P9-ACDE-G2Q4A\", \"requestProcessingTime\": 1, \"delisted\": false, \"tags\": \"plotter\", \"timestamp\": 121088459 } Get DGS Goods Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSGoods&seller=869755421284789028 Response: { \"seller\": \"16432157717192673510\", \"priceNQT\": \"750000000000\", \"quantity\": 1000, \"name\": \"100 TB Plot File\", \"goods\": \"490136863013671329\", \"description\": \"48-100h delivery Time\\r\\nSpecify how big you want your file\\r\\nMin size 1 TB\\r\\nMax size 10 TB\\r\\nDelivery is a Torrent Download\", \"sellerRS\": \"BURST-F498-E9P9-ACDE-G2Q4A\", \"requestProcessingTime\": 1, \"delisted\": false, \"tags\": \"plotter\", \"timestamp\": 121088459 } Get DGS Goods Purchases Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSGoods&seller=869755421284789028 Response: { \"goods\": [ { \"seller\": \"869755421284789028\", \"priceNQT\": \"100000000\", \"quantity\": 9996, \"name\": \"Donate - Help CompSci Students\", \"goods\": \"8877051912510361584\", \"description\": \"My claass of compsci students is working on burst related projects as well as a mining rig. Help me help them learn more, do more. Please donate to their cause.\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"delisted\": false, \"tags\": \"school\", \"timestamp\": 117044802 }, { \"seller\": \"869755421284789028\", \"priceNQT\": \"1000000000\", \"quantity\": 999999, \"name\": \"Hard drives for high school students\", \"goods\": \"4170413457250059275\", \"description\": \"The high school computer science class is woefully funded. Please help and donate..\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"delisted\": false, \"tags\": \"\", \"timestamp\": 122140901 } ], \"requestProcessingTime\": 1 } Get DGS Pending Purchases Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSPendingPurchases&seller=869755421284789028 Response: { \"purchases\": [ { \"seller\": \"869755421284789028\", \"priceNQT\": \"100000000\", \"quantity\": 1, \"deliveryDeadlineTimestamp\": 142820935, \"buyerRS\": \"BURST-8J3W-BBNN-BJMG-HCPG3\", \"pending\": true, \"purchase\": \"18028864805999806823\", \"name\": \"Donate - Help CompSci Students\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"buyer\": \"17346364151341203516\", \"timestamp\": 120220136 }, { \"seller\": \"869755421284789028\", \"note\": { \"data\": \"530c56998edacb24b664d9be3d9db3be52cb89bc10efdfbb1c97a5bb415bff2a1737ecf758202b57171145296bb3db2e\", \"nonce\": \"6b59813a09abe6809d87a34a0d7eb4ad7b97f43a28ae8d26f4811f8fff864712\" }, \"quantity\": 1, \"pending\": true, \"purchase\": \"9754082484071034298\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"buyer\": \"11786437085044315193\", \"priceNQT\": \"100000000\", \"deliveryDeadlineTimestamp\": 139660265, \"buyerRS\": \"BURST-X73T-4MLS-LV98-CQG69\", \"name\": \"Donate - Help CompSci Students\", \"timestamp\": 117059465 } ], \"requestProcessingTime\": 2 } Get DGS Purchase Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSPurchase&purchase=18028864805999806823 Response: { \"seller\": \"869755421284789028\", \"quantity\": 1, \"pending\": true, \"purchase\": \"18028864805999806823\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"requestProcessingTime\": 1, \"buyer\": \"17346364151341203516\", \"priceNQT\": \"100000000\", \"deliveryDeadlineTimestamp\": 142820935, \"buyerRS\": \"BURST-8J3W-BBNN-BJMG-HCPG3\", \"name\": \"Donate - Help CompSci Students\", \"timestamp\": 120220136 } Get DGS Purchases Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSPurchases&seller=869755421284789028 Response: { \"purchases\": [ { \"seller\": \"869755421284789028\", \"priceNQT\": \"100000000\", \"quantity\": 1, \"deliveryDeadlineTimestamp\": 142820935, \"buyerRS\": \"BURST-8J3W-BBNN-BJMG-HCPG3\", \"pending\": true, \"purchase\": \"18028864805999806823\", \"name\": \"Donate - Help CompSci Students\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"buyer\": \"17346364151341203516\", \"timestamp\": 120220136 }, { \"seller\": \"869755421284789028\", \"note\": { \"data\": \"530c56998edacb24b664d9be3d9db3be52cb89bc10efdfbb1c97a5bb415bff2a1737ecf758202b57171145296bb3db2e\", \"nonce\": \"6b59813a09abe6809d87a34a0d7eb4ad7b97f43a28ae8d26f4811f8fff864712\" }, \"quantity\": 1, \"pending\": true, \"purchase\": \"9754082484071034298\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"buyer\": \"11786437085044315193\", \"priceNQT\": \"100000000\", \"deliveryDeadlineTimestamp\": 139660265, \"buyerRS\": \"BURST-X73T-4MLS-LV98-CQG69\", \"name\": \"Donate - Help CompSci Students\", \"timestamp\": 117059465 } ], \"requestProcessingTime\": 2 } Networking Operations Get My Info Request https://wallet1.burst-team.us:2083/burst?requestType=getMyInfo Response: { \"address\": \"127.0.0.1\", \"host\": \"127.0.0.1\", \"requestProcessingTime\": 0 } Get Peer Request https://wallet1.burst-team.us:2083/burst?requestType=getPeer&peer=107.150.6.121 Response: { \"lastUpdated\": 121622908, \"downloadedVolume\": 5557831, \"blacklisted\": false, \"announcedAddress\": \"107.150.6.121\", \"application\": \"BRS\", \"uploadedVolume\": 11482803, \"state\": 1, \"requestProcessingTime\": 0, \"version\": \"2.2.1\", \"platform\": \"PC\", \"shareAddress\": true } Get Peers Request https://wallet1.burst-team.us:2083/burst?requestType=getPeers&active=true Response: { \"peers\": [ \"107.150.6.121\", \"37.205.11.73\", \"79.113.222.145\", \"74.141.142.82\", \"71.172.254.124\", \"89.133.236.99\", \"97.84.139.244\" ], \"requestProcessingTime\": 0 } Server Information Operations Get Blockchain Status Request https://wallet1.burst-team.us:2083/burst?requestType=getBlockchainStatus Response: { \"lastBlock\": \"10431007917907627236\", \"application\": \"BRS\", \"isScanning\": false, \"cumulativeDifficulty\": \"29365339954194811259\", \"lastBlockchainFeederHeight\": 501733, \"numberOfBlocks\": 502799, \"time\": 121621131, \"requestProcessingTime\": 0, \"version\": \"2.2.1\", \"lastBlockchainFeeder\": \"86.26.25.217\" } Get Constants Request https://wallet1.burst-team.us:2083/burst?requestType=getConstants Response: { \"maxBlockPayloadLength\": 44880, \"genesisAccountId\": \"0\", \"genesisBlockId\": \"3444294670862540038\", \"transactionTypes\": [ { \"description\": \"Payment\", \"value\": 0, \"subtypes\": [ { \"description\": \"Ordinary payment\", \"value\": 0 } ] }, { \"description\": \"Messaging\", \"value\": 1, \"subtypes\": [ { \"description\": \"Arbitrary message\", \"value\": 0 }, { \"description\": \"Alias assignment\", \"value\": 1 }, { \"description\": \"Alias sell\", \"value\": 6 }, { \"description\": \"Alias buy\", \"value\": 7 }, { \"description\": \"Account info\", \"value\": 5 } ] }, { \"description\": \"Colored coins\", \"value\": 2, \"subtypes\": [ { \"description\": \"Asset issuance\", \"value\": 0 }, { \"description\": \"Asset transfer\", \"value\": 1 }, { \"description\": \"Ask order placement\", \"value\": 2 }, { \"description\": \"Bid order placement\", \"value\": 3 }, { \"description\": \"Ask order cancellation\", \"value\": 4 }, { \"description\": \"Bid order cancellation\", \"value\": 5 } ] }, { \"description\": \"Digital goods\", \"value\": 3, \"subtypes\": [ { \"description\": \"Listing\", \"value\": 0 }, { \"description\": \"Delisting\", \"value\": 1 }, { \"description\": \"Price change\", \"value\": 2 }, { \"description\": \"Quantity change\", \"value\": 3 }, { \"description\": \"Purchase\", \"value\": 4 }, { \"description\": \"Delivery\", \"value\": 5 }, { \"description\": \"Feedback\", \"value\": 6 }, { \"description\": \"Refund\", \"value\": 7 } ] }, { \"description\": \"Account Control\", \"value\": 4, \"subtypes\": [ { \"description\": \"Effective balance leasing\", \"value\": 0 } ] } ], \"peerStates\": [ { \"description\": \"Non-connected\", \"value\": 0 }, { \"description\": \"Connected\", \"value\": 1 }, { \"description\": \"Disconnected\", \"value\": 2 } ], \"maxArbitraryMessageLength\": 1000, \"requestTypes\": {} } Get State Request https://wallet1.burst-team.us:2083/burst?requestType=getState Response: { \"numberOfPeers\": 2748, \"numberOfUnlockedAccounts\": 0, \"numberOfTransfers\": 56779, \"numberOfOrders\": 2974, \"numberOfTransactions\": 7528488, \"maxMemory\": 1431830528, \"isScanning\": false, \"cumulativeDifficulty\": \"29365339954194811259\", \"numberOfAssets\": 371, \"freeMemory\": 617885288, \"availableProcessors\": 2, \"totalEffectiveBalanceNXT\": 1961368807, \"numberOfAccounts\": 147147, \"numberOfBlocks\": 502799, \"requestProcessingTime\": 6189, \"version\": \"2.2.1\", \"numberOfBidOrders\": 397, \"lastBlock\": \"10431007917907627236\", \"totalMemory\": 1167589376, \"application\": \"BRS\", \"numberOfAliases\": 17008, \"lastBlockchainFeederHeight\": 502798, \"numberOfTrades\": 109663, \"time\": 121621202, \"numberOfAskOrders\": 2577, \"lastBlockchainFeeder\": \"169.55.184.235\" } Get Time Request https://wallet1.burst-team.us:2083/burst?requestType=getTime Response: { \"time\": 121621260, \"requestProcessingTime\": 0 } Transaction Operations Broadcast Transaction Request https://wallet1.burst-team.us:2083/burst?requestType=broadcastTransaction&transactionBytes=00109cce3f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb00e1f5050000000018370b00000000000000000000000000000000000000000000000000000000000000000000000000bed76407665ef3dbe24c78041a497e9e603076b8adf90353effe5218c83f69078adaec89a2f2e1ffb7bc835b1c21cf8300185cd4f3d7df52be156e61069d569d0000000006ac0700769afc7e6215e488 Response: { \"requestProcessingTime\": 4, \"fullHash\": \"d663f7fe8bf215906b29838ade5d860b2229188acea7827a737d823253b488db\", \"transaction\": \"10382471199064548310\" } Note : If the transaction has already been broadcast, the following INFO notice appears in the console output and log file: Transaction 15200507403046301754 already in blockchain (or unconfirmed pool), will not broadcast again . Calculate Full Hash Request https://wallet1.burst-team.us:2083/burst?requestType=calculateFullHash&unsignedTransactionBytes=01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000003ac07005ac8e8794cc6d21001210000805468697320697320612073656e644d65737361676520415049206578616d706c65&signatureHash=0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e Response: { \"requestProcessingTime\": 0, \"fullHash\": \"a8035211b0fb38415509ca451feee44787598462e7bc608affb8e7b2a1f81d05\" } Get Transaction Request https://wallet1.burst-team.us:2083/burst?requestType=getTransaction&transaction=3120851314369640207%20 Response: { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"dc2503584a48e30ac62d62848f58461e0e9ff55070008743c24f380c24a9ef05525c70b5d40962566f3f4de2018277ba7956eb09d0aec84219784de7f3b76f6a\", \"feeNQT\": \"735000\", \"requestProcessingTime\": 0, \"type\": 1, \"confirmations\": 7, \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"version\": 1, \"ecBlockId\": \"1212249281481197658\", \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"attachment\": { \"version.Message\": 1, \"messageIsText\": true, \"message\": \"This is a sendMessage API example\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"recipient\": \"15323192282528158131\", \"ecBlockHeight\": 502787, \"block\": \"2298247278137763160\", \"blockTimestamp\": 121620850, \"deadline\": 24, \"transaction\": \"3120851314369640207\", \"timestamp\": 121620814, \"height\": 502797 } Get Transaction Bytes Request https://wallet1.burst-team.us:2083/burst?requestType=getTransactionBytes&transaction=3120851314369640207 Response: { \"unsignedTransactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\", \"requestProcessingTime\": 0, \"confirmations\": 7, \"transactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\" } Parse Transaction Request https://wallet1.burst-team.us:2083/burst?requestType=parseTransaction&transactionBytes=01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b00000000000000000000000000000000000000000000000000000000000000000000000000dc2503584a48e30ac62d62848f58461e0e9ff55070008743c24f380c24a9ef05525c70b5d40962566f3f4de2018277ba7956eb09d0aec84219784de7f3b76f6a0100000003ac07005ac8e8794cc6d21001210000805468697320697320612073656e644d65737361676520415049206578616d706c65 Response: { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"dc2503584a48e30ac62d62848f58461e0e9ff55070008743c24f380c24a9ef05525c70b5d40962566f3f4de2018277ba7956eb09d0aec84219784de7f3b76f6a\", \"feeNQT\": \"735000\", \"requestProcessingTime\": 238, \"type\": 1, \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"version\": 1, \"ecBlockId\": \"1212249281481197658\", \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"attachment\": { \"version.Message\": 1, \"messageIsText\": true, \"message\": \"This is a sendMessage API example\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"recipient\": \"15323192282528158131\", \"ecBlockHeight\": 502787, \"verify\": true, \"deadline\": 24, \"transaction\": \"3120851314369640207\", \"timestamp\": 121620814, \"height\": 2147483647 } Sign Transaction Request https://wallet1.burst-team.us:2083/burst?requestType=signTransaction&unsignedTransactionBytes=01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000003ac07005ac8e8794cc6d21001210000805468697320697320612073656e644d65737361676520415049206578616d706c65&secretPhrase=IWontTellYou Response: { \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"verify\": true, \"requestProcessingTime\": 2, \"transactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\", \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"transaction\": \"3120851314369640207\" } Utilities Long Convert Request https://wallet1.burst-team.us:2083/burst?requestType=longConvert&id=16922903237994405232 Response: { \"stringId\": \"16922903237994405232\", \"requestProcessingTime\": 0, \"longId\": \"-1523840835715146384\" } RS Convert Request https://wallet1.burst-team.us:2083/burst?requestType=rsConvert&account=16922903237994405232 Response: { \"accountRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"requestProcessingTime\": 0, \"account\": \"16922903237994405232\" } Mining Get Mining Info Request https://wallet1.burst-team.us:2083/burst?requestType=getMiningInfo Response: { \"generationSignature\": \"2cfe207000274ed4194fc32699ab4265a3c8698d31aa169c24e87ef51b1dd985\", \"baseTarget\": \"53922\", \"requestProcessingTime\": 0, \"height\": \"562666\" } Get Accounts With Reward Recipient Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountsWithRewardRecipient&account=BURST-S8Z2-TQ7W-ECVP-FM4FP Response: { \"accounts\": [ \"9999020599272053507\", \"14978592240935099976\", \"2218446457340567982\", \"2413156362128439728\", \"2726459462890839466\", \"4007570020057677303\", \"4440732188425076111\", \"7113578903125529023\", \"7563608324197478590\", \"8380834105937589772\", \"8413162550188879456\", \"9137291541131717436\", \"15759313138355018720\" ], \"requestProcessingTime\": 3 } Get Reward Recipient Request https://wallet1.burst-team.us:2083/burst?requestType=getRewardRecipient&account=BURST-FRDJ-UPLH-MY9A-GUKQP Response: { \"rewardRecipient\": \"16922903237994405232\", \"requestProcessingTime\": 1 } Automated Transactions Get Account ATs Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountATs&account=BURST-35LY-PRT7-A9MR-A3LNQ Response: { \"ats\": [ { \"atVersion\": 1, \"creator\": \"10039158734712770142\", \"creatorRS\": \"BURST-35LY-PRT7-A9MR-A3LNQ\", \"stopped\": true, \"machineCode\": \"350003000000002501000000350004020000002102000000030000004f35010304*\", \"description\": \"this is my first time using the crowdfunding thing. just want to see if it works.Crowdfund\", \"machineData\": \"0000000000000000c04e000000000000000000000000000000aea68f02*\", \"frozen\": false, \"finished\": false, \"dead\": false, \"balanceNQT\": \"0\", \"nextBlock\": 559302, \"minActivation\": \"700000000\", \"running\": false, \"at\": \"8736107560017092008\", \"name\": \"justtryingthisout\", \"atRS\": \"BURST-SRFA-KAX8-SQ29-959HL\", \"prevBalanceNQT\": \"0\", \"creationBlock\": 559302 } ], \"requestProcessingTime\": 4 }","title":"The Burst API Examples"},{"location":"en/the-burst-api-examples/#description","text":"Examples of Burst API calls are collected on this page, individually linked from the main Burst API page. The organization and ordering is the same for both pages so that the section numbers in the table of contents are identical. The preliminary sections preceding the examples simply link back to the main page. For example: The Burst API Description . A lot of API calls can be viewed and tested on the MainNet at https://wallet1.burst-team.us:2083/burst . For specific API calls, use the GET url https://wallet1.burst-team.us:2083/burst?= specificRequestType .","title":"Description"},{"location":"en/the-burst-api-examples/#general-notes","text":"The Burst API General Notes","title":"General Notes"},{"location":"en/the-burst-api-examples/#create-transaction","text":"The Burst API Create Transaction","title":"Create Transaction"},{"location":"en/the-burst-api-examples/#account-operations","text":"","title":"Account Operations"},{"location":"en/the-burst-api-examples/#get-account","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccount&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"unconfirmedBalanceNQT\": \"100000000000\", \"guaranteedBalanceNQT\": \"100000000000\", \"unconfirmedAssetBalances\": [ { \"unconfirmedBalanceQNT\": \"120100\", \"asset\": \"3702027329806229573\" } ], \"effectiveBalanceNXT\": \"100000000000\", \"accountRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"name\": \"Umbrellacorp03\", \"forgedBalanceNQT\": \"0\", \"balanceNQT\": \"100000000000\", \"publicKey\": \"f22d8aa787eddbf69caf6f5960f5972a4b73247eb3a9479ddddeda40224aca60\", \"requestProcessingTime\": 1, \"assetBalances\": [ { \"balanceQNT\": \"120100\", \"asset\": \"3702027329806229573\" } ], \"account\": \"17001464071916561838\" }","title":"Get Account"},{"location":"en/the-burst-api-examples/#get-account-block-ids","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountBlockIds&account=17001464071916561838&lastIndex=5 Response similar to: {\"blockIds\":[\"18426055195962363092\",\"7915836588136735869\",\"10232042957216858995\",\"6879436477641441477\",\"10946006553575734351\",\"11461420847451026714\"],\"requestProcessingTime\":2}","title":"Get Account Block Ids"},{"location":"en/the-burst-api-examples/#get-account-blocks","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountBlocks&account=BURST-JNRV-L9MB-QU9G-FR8YT&lastIndex=0 Response similar to: { \"blocks\": [ { \"previousBlockHash\": \"9bb982b31c196a59231197da7abc82aeecea8d21017eb0c12fbabed8a74ec71c\", \"payloadLength\": 1936, \"totalAmountNQT\": \"106611838192\", \"generationSignature\": \"dedb23e56e9cc7d17d0f8d09bde18890c950089a2d7253889e8197967a9cacce\", \"generator\": \"15922713504207360763\", \"generatorPublicKey\": \"177d9ea55714741b002665dd9b7a1bc49834281c49162282735fadbb654f525d\", \"baseTarget\": \"62600\", \"payloadHash\": \"9c2e60b58de75577d4f088abe14111756f602fc0498c8a1cd97555514b3794f3\", \"generatorRS\": \"BURST-JNRV-L9MB-QU9G-FR8YT\", \"blockReward\": \"1101\", \"nextBlock\": \"7294788635189399942\", \"scoopNum\": 3287, \"numberOfTransactions\": 11, \"blockSignature\": \"51cfdb787b44c6ef65fd44bcc1efe0d1880a1f36573b1976849a34514eebfb0c657092b04ab329147b08c14b2d36fb3b769ac7d348dd8b42c706feba1c31fe0d\", \"transactions\": [ \"9974453735926447276\", \"10292157220435803480\", \"12118294371901969706\", \"14492253203769113366\", \"16186302445201505070\", \"16411262478294799982\", \"1509465029747109302\", \"3032891187575274734\", \"3133520208744662995\", \"4199249628605348221\", \"4284107851893128481\" ], \"nonce\": \"11577401\", \"version\": 3, \"totalFeeNQT\": \"1100000000\", \"previousBlock\": \"6442989827968383387\", \"block\": \"12993921455729618779\", \"height\": 467931, \"timestamp\": 113186379 } ], \"requestProcessingTime\": 3 }","title":"Get Account Blocks"},{"location":"en/the-burst-api-examples/#get-account-id","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountId&secretPhrase=IWontTellYou Response: { \"accountRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"publicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"requestProcessingTime\": 0, \"account\": \"15323192282528158131\" }","title":"Get Account Id"},{"location":"en/the-burst-api-examples/#get-account-lessors","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountLessors&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"lessors\": [], \"accountRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"requestProcessingTime\": 0, \"account\": \"17001464071916561838\", \"height\": 496781 }","title":"Get Account Lessors"},{"location":"en/the-burst-api-examples/#get-account-public-key","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountPublicKey&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"publicKey\": \"f22d8aa787eddbf69caf6f5960f5972a4b73247eb3a9479ddddeda40224aca60\", \"requestProcessingTime\": 1 }","title":"Get Account Public Key"},{"location":"en/the-burst-api-examples/#get-account-transaction-ids","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountTransactionIds&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"transactionIds\": [ \"14471919803527301514\", \"8408429517094397948\", \"7677510357080940908\", \"15605878519502379168\", \"13241821260511921007\", \"16748761036604486700\", \"6521866371443385678\" ], \"requestProcessingTime\": 7 }","title":"Get Account Transaction Ids"},{"location":"en/the-burst-api-examples/#get-account-transactions","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountTransactions&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"requestProcessingTime\": 7, \"transactions\": [ { \"senderPublicKey\": \"2ebd275f257b5e73c58c1a5e13efbcba8a579829a3c336e79409f32a3bcf8379\", \"signature\": \"e96b97ee10365498641177ec07378b252b9bc6e727dc67130c4ee32e38cede076b24c0f3c2137a138234c154656b8cee45b913e2842bced41f8d8c195670eeb5\", \"feeNQT\": \"100000000\", \"type\": 2, \"confirmations\": 85, \"fullHash\": \"8a892fc36296d6c8540dab8d52458500e400483b091224db949fe8d36ce8aac5\", \"version\": 1, \"ecBlockId\": \"6134220061079224356\", \"signatureHash\": \"0811bab0ed422d3da9fe837e57bd38aa9bbe223f9bcc34109a650eaadc21ce5e\", \"attachment\": { \"version.AssetTransfer\": 1, \"quantityQNT\": \"10000\", \"asset\": \"3702027329806229573\" }, \"senderRS\": \"BURST-CMTM-GH7K-58PB-BFP2U\", \"subtype\": 1, \"amountNQT\": \"0\", \"sender\": \"11313795926748122931\", \"recipientRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"recipient\": \"17001464071916561838\", \"ecBlockHeight\": 496688, \"block\": \"9331719154915300577\", \"blockTimestamp\": 120142856, \"deadline\": 1440, \"transaction\": \"14471919803527301514\", \"timestamp\": 120142756, \"height\": 496701 }, { \"senderPublicKey\": \"f22d8aa787eddbf69caf6f5960f5972a4b73247eb3a9479ddddeda40224aca60\", \"signature\": \"e74d1213e17fdd41f6337eb3cf4c501089931b651ec4b3a563cf6b113ab58b0cfd2516f7e9d64cbbdcf87e8e35ae75caddef7811d729b4a53338a4c75bb85977\", \"feeNQT\": \"100000000\", \"type\": 0, \"confirmations\": 356, \"fullHash\": \"fc27529518beb074357b59f0efa477e18240c9f44a02b89fd32ccdb0b85b135a\", \"version\": 1, \"ecBlockId\": \"6116962714576197152\", \"signatureHash\": \"f10eaaaf1836f07fe6958293cc79a91fb57dd8dfec9780ea73e0ee82de18c292\", \"senderRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"subtype\": 0, \"amountNQT\": \"53329697341\", \"sender\": \"17001464071916561838\", \"recipientRS\": \"BURST-NQAW-GQ84-CA6C-7B3LS\", \"recipient\": \"6649610434652035356\", \"ecBlockHeight\": 496419, \"block\": \"5936178255841968699\", \"blockTimestamp\": 120078307, \"deadline\": 1440, \"transaction\": \"8408429517094397948\", \"timestamp\": 120078236, \"height\": 496430 } ] }","title":"Get Account Transactions"},{"location":"en/the-burst-api-examples/#get-balance","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getBalance&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"unconfirmedBalanceNQT\": \"100000000000\", \"guaranteedBalanceNQT\": \"100000000000\", \"effectiveBalanceNXT\": \"100000000000\", \"forgedBalanceNQT\": \"0\", \"balanceNQT\": \"100000000000\", \"requestProcessingTime\": 0 }","title":"Get Balance"},{"location":"en/the-burst-api-examples/#get-unconfirmed-transaction-ids","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getUnconfirmedTransactionIds&account=BURST-GBFG-HVQ4-8AMM-GPCWR Response: { \"requestProcessingTime\": 0, \"unconfirmedTransactionIds\": [] }","title":"Get Unconfirmed Transaction Ids"},{"location":"en/the-burst-api-examples/#get-unconfirmed-transactions","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getUnconfirmedTransactions Response: { \"unconfirmedTransactions\": [ { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"5316c88b00f767d2bbe0cac07ae4f84b1fe75f002e24e9ce1c1a6b81d6821f09474a4db22db8461be85ac03f7c7df37fa007bd1aa72c34fc4be0e64b605bb2d6\", \"feeNQT\": \"100000000\", \"type\": 1, \"fullHash\": \"480ae3eba6a4e445c692eacae605bfaecd060e91005f96b09d57647d3c5fcf25\", \"version\": 1, \"ecBlockId\": \"3371057862366354193\", \"signatureHash\": \"d156bf1cdf9c8fce254a9ef3a7d47ed2f16a35ad94c8c625ec48a83fbda1b615\", \"attachment\": { \"name\": \"API-Examples2\", \"description\": \"\", \"version.AccountInfo\": 1 }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 5, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"ecBlockHeight\": 498894, \"deadline\": 1440, \"transaction\": \"5036331320136108616\", \"timestamp\": 120675576, \"height\": 498903 }, { \"senderPublicKey\": \"25cc2bb30ee7665737c9721090313c85176e485cd9a15495a0f3abc359d8d632\", \"signature\": \"194bd83c8473d5bfef972e50efde4699db401d9097dcb68eaa898042d5022c0a1e64d551e20d6f49402d34f930317577f90152949485f8515d8b89e5bbbf45c0\", \"feeNQT\": \"100000000\", \"type\": 0, \"fullHash\": \"0c53db6986e2ba38119354158128e60f23a749fec0acf893ff3ca2de22176df0\", \"version\": 1, \"ecBlockId\": \"3371057862366354193\", \"signatureHash\": \"3b1b88980766b041165a55c622a6eea4b08bb628eab95e3016c19838fda6c112\", \"senderRS\": \"BURST-HKML-NRG6-VBRA-2F8PS\", \"subtype\": 0, \"amountNQT\": \"10013275142\", \"sender\": \"888561138747819634\", \"recipientRS\": \"BURST-WXWK-MD2A-KXJL-HR27T\", \"recipient\": \"18200197947533981585\", \"ecBlockHeight\": 498894, \"deadline\": 1440, \"transaction\": \"4087828678721622796\", \"timestamp\": 120675589, \"height\": 498903 }, ], \"requestProcessingTime\": 1 }","title":"Get Unconfirmed Transactions"},{"location":"en/the-burst-api-examples/#get-subscription","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getSubscription&subscription=13721874590196751209 Response: { \"senderRS\": \"BURST-2RN8-FSU8-P64Q-5AL9C\", \"sender\": \"3827576371473833606\", \"amountNQT\": \"500000000\", \"recipientRS\": \"BURST-JDMH-EZQC-UWY4-EXXFU\", \"recipient\": \"14787496155544039023\", \"id\": \"13721874590196751209\", \"timeNext\": 128778762, \"requestProcessingTime\": 0, \"frequency\": 3600 }","title":"Get Subscription"},{"location":"en/the-burst-api-examples/#get-subscriptions-to-account","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getSubscriptionsToAccount&account=14787496155544039023 Response: { \"subscriptions\": [ { \"senderRS\": \"BURST-2RN8-FSU8-P64Q-5AL9C\", \"sender\": \"3827576371473833606\", \"amountNQT\": \"500000000\", \"recipientRS\": \"BURST-JDMH-EZQC-UWY4-EXXFU\", \"recipient\": \"14787496155544039023\", \"id\": \"13721874590196751209\", \"timeNext\": 128778762, \"frequency\": 3600 } ], \"requestProcessingTime\": 2 }","title":"Get Subscriptions To Account"},{"location":"en/the-burst-api-examples/#get-account-subscriptions","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountSubscriptions&account=14787496155544039023 Response: { \"subscriptions\": [ { \"senderRS\": \"BURST-2RN8-FSU8-P64Q-5AL9C\", \"sender\": \"3827576371473833606\", \"amountNQT\": \"500000000\", \"recipientRS\": \"BURST-JDMH-EZQC-UWY4-EXXFU\", \"recipient\": \"14787496155544039023\", \"id\": \"13721874590196751209\", \"timeNext\": 128778762, \"frequency\": 3600 } ], \"requestProcessingTime\": 2 }","title":"Get Account Subscriptions"},{"location":"en/the-burst-api-examples/#send-money","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=sendMoney&secretPhrase=IWontTellYou&recipient=BURST-GBFG-HVQ4-8AMM-GPCWR&amountNQT=100000000&feeNQT=100000000&deadline=24 Response: { \"signatureHash\": \"b6bb90bac0d529d9ebc6771089f389c976db2a67d76867f7c9d2e1b90e00358a\", \"unsignedTransactionBytes\": \"001092812d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93cae2527ec7e55f1eb00e1f5050000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"3b709a56a9a2308b2364cdb260cc8b08126b8ed13cfe891aa817c28760b0e90f108680db998938fd4747390a0ed9b3b3e25674b849e583dce011155f95ecaa3a\", \"feeNQT\": \"100000000\", \"type\": 0, \"fullHash\": \"808d5c32b12f4d4b963404c19523b6391ddf7a04a96ec4a495703aeead76c6ff\", \"version\": 1, \"ecBlockId\": \"16622227543717857480\", \"signatureHash\": \"b6bb90bac0d529d9ebc6771089f389c976db2a67d76867f7c9d2e1b90e00358a\", \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 0, \"amountNQT\": \"100000000\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"recipient\": \"17001464071916561838\", \"ecBlockHeight\": 497841, \"deadline\": 24, \"transaction\": \"5426045564151958912\", \"timestamp\": 120422802, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 4, \"transactionBytes\": \"001092812d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93cae2527ec7e55f1eb00e1f5050000000000e1f505*\", \"fullHash\": \"808d5c32b12f4d4b963404c19523b6391ddf7a04a96ec4a495703aeead76c6ff\", \"transaction\": \"5426045564151958912\" }","title":"Send Money"},{"location":"en/the-burst-api-examples/#send-money-subscription","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=sendMoneySubscription&recipient=BURST-ZYGT-HCNL-PU3A-98NM7&amountNQT=200000000&frequency=3600&secretPhrase=IWontTellYou&feeNQT=10000000&deadline=24 Response: { \"signatureHash\": \"c750d47f99a1dc5b01f3850d8c888b324fd49f1fe77c97fd8bccf339a82f3739\", \"unsignedTransactionBytes\": \"1513059bfe071800ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247d9f92fa97a86ce7200c2eb0b*\", \"transactionJSON\": { \"senderPublicKey\": \"ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247\", \"signature\": \"541e44ec8ea4642148dc6dd212076c16618580db47726f1522e2fda6805a680022cc3ef643f5cbefd0863796c9bcb8ee12cc611c38bc7a5bf01dbd2bc0777c29\", \"feeNQT\": \"10000000\", \"type\": 21, \"fullHash\": \"06491cddb3159f0ff9ff44e27b3ee2ed5a67756f9efe70dcbec83843c5bd2191\", \"version\": 1, \"ecBlockId\": \"3529501934685685596\", \"signatureHash\": \"c750d47f99a1dc5b01f3850d8c888b324fd49f1fe77c97fd8bccf339a82f3739\", \"attachment\": { \"version.SubscriptionSubscribe\": 1, \"frequency\": 3600 }, \"senderRS\": \"BURST-MNAM-VYK3-V3KC-DTACV\", \"subtype\": 3, \"amountNQT\": \"200000000\", \"sender\": \"13666482992520483091\", \"recipientRS\": \"BURST-ZYGT-HCNL-PU3A-98NM7\", \"recipient\": \"8272697426908805593\", \"ecBlockHeight\": 554516, \"deadline\": 24, \"transaction\": \"1125642294118861062\", \"timestamp\": 134126341, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 10, \"transactionBytes\": \"1513059bfe071800ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247d9f92fa97a86ce7200c2eb0b*\", \"fullHash\": \"06491cddb3159f0ff9ff44e27b3ee2ed5a67756f9efe70dcbec83843c5bd2191\", \"transaction\": \"1125642294118861062\" }","title":"Send Money Subscription"},{"location":"en/the-burst-api-examples/#cancel-subscription","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=subscriptionCancel&subscription=3470763597622549812&secretPhrase=IWontTellYou&feeNQT=10000000&deadline=24 Response: { \"signatureHash\": \"5d8b62549fc7533d898b6787930880b438257881fb5db6fc8aeeaf0209bb43ee\", \"unsignedTransactionBytes\": \"1514f39cfe071800ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247*\", \"transactionJSON\": { \"senderPublicKey\": \"ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247\", \"signature\": \"dd060be1727ad6e82c163c80b1a0cbb8c626169661d8d26a459a5fd49b4fa603cda2096fff8564d667e4fa199bd5351c0ba9a6ed2a32373f9808dd26fd2ed11d\", \"feeNQT\": \"10000000\", \"type\": 21, \"fullHash\": \"a84c68ef82c11caf97cbabb0e4cd26d077ecb16c5dd7f138fbbf347598609d92\", \"version\": 1, \"ecBlockId\": \"8594277110464290878\", \"signatureHash\": \"5d8b62549fc7533d898b6787930880b438257881fb5db6fc8aeeaf0209bb43ee\", \"attachment\": { \"subscriptionId\": \"3470763597622549812\", \"version.SubscriptionCancel\": 1 }, \"senderRS\": \"BURST-MNAM-VYK3-V3KC-DTACV\", \"subtype\": 4, \"amountNQT\": \"0\", \"sender\": \"13666482992520483091\", \"ecBlockHeight\": 554518, \"deadline\": 24, \"transaction\": \"12618173024091786408\", \"timestamp\": 134126835, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 9, \"transactionBytes\": \"1514f39cfe071800ad6cfaf61afba1b6542a5f3ef2a8f072a0e417b00d41cfcf86060cf780af1247*\", \"fullHash\": \"a84c68ef82c11caf97cbabb0e4cd26d077ecb16c5dd7f138fbbf347598609d92\", \"transaction\": \"12618173024091786408\" }","title":"Cancel Subscription"},{"location":"en/the-burst-api-examples/#set-account-info","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=setAccountInfo&secretPhrase=IWontTellYou&name=API-Examples&feeNQT=100000000&deadline=24 Response: { \"signatureHash\": \"00e5694c213c978045fc32125092a1f3b16e6c5bf4d1d24c51005466be29f14b\", \"unsignedTransactionBytes\": \"0115c1832d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c0000000000000000000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"9b2634d7f439bf0c71341511a3efb202f744ec7f1b60673d07965bb297b4060d27bed164bf2611b738da1df34cd15a44458bfed2f6e78c94707af11da46f5044\", \"feeNQT\": \"100000000\", \"type\": 1, \"fullHash\": \"7ace7428ff55c4c5963d828f0cd210be4c988b482b2930b73c80c7fe55c19af5\", \"version\": 1, \"ecBlockId\": \"4725767517890678156\", \"signatureHash\": \"00e5694c213c978045fc32125092a1f3b16e6c5bf4d1d24c51005466be29f14b\", \"attachment\": { \"name\": \"API-Examples\", \"description\": \"\", \"version.AccountInfo\": 1 }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 5, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 497844, \"deadline\": 24, \"transaction\": \"14250609675290857082\", \"timestamp\": 120423361, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 9, \"transactionBytes\": \"0115c1832d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c0000000000000000000000000000000000e1f505*\", \"fullHash\": \"7ace7428ff55c4c5963d828f0cd210be4c988b482b2930b73c80c7fe55c19af5\", \"transaction\": \"14250609675290857082\" }","title":"Set Account Info"},{"location":"en/the-burst-api-examples/#alias-operations","text":"","title":"Alias Operations"},{"location":"en/the-burst-api-examples/#buy-sell-alias","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=sellAlias&secretPhrase=IWontTellYou&aliasName=AliasTestSell&priceNQT=1&recipient=BURST-GBFG-HVQ4-8AMM-GPCWR&feeNQT=100000000&deadline=24 Response: { \"signatureHash\": \"952eea5e0eb67f1ec78abfab60edcde55f477ae8dcf8f620077783532217c329\", \"unsignedTransactionBytes\": \"0116a16031071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"6ce34c1f9a73ce7c375b9a0eeec1942f9932ecd6e34f8b5c9358a501007cf709fe26a2f205be7180af0cca753f89c648b6a1481bce7ed1e8b91dcbb8a0e7f0ce\", \"feeNQT\": \"100000000\", \"type\": 1, \"fullHash\": \"2d923132c2cd045c7c8d901b261ab237dbac7ebd50d3f7c549e601c8cc0f1cf9\", \"version\": 1, \"ecBlockId\": \"6797965034232082546\", \"signatureHash\": \"952eea5e0eb67f1ec78abfab60edcde55f477ae8dcf8f620077783532217c329\", \"attachment\": { \"alias\": \"AliasTestSell\", \"priceNQT\": \"1\", \"version.AliasSell\": 1 }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 6, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"recipient\": \"17001464071916561838\", \"ecBlockHeight\": 498897, \"deadline\": 24, \"transaction\": \"6630650785345671725\", \"timestamp\": 120676513, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 7, \"transactionBytes\": \"0116a16031071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb000000000000000000e1f505*\", \"fullHash\": \"2d923132c2cd045c7c8d901b261ab237dbac7ebd50d3f7c549e601c8cc0f1cf9\", \"transaction\": \"6630650785345671725\" }","title":"Buy / Sell Alias"},{"location":"en/the-burst-api-examples/#set-alias","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=setAlias&secretPhrase=IWontTellYou&aliasName=ApiExample&aliasURI=acct:burst-l6fm-89wk-vk8p-fcrbb@burst&feeNQT=100000000&deadline=24 Response: { \"signatureHash\": \"c59f26e0b40c306f5ecf0c222a51a83578a9f04165ff27d5f16a4f9f00fc63f7\", \"unsignedTransactionBytes\": \"0111a2852d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c0000000000000000000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"c27bd8a00b7f8025f7d5054d855d019f939388b1bb52781d9e7d901a81da1a04c726069306f881c2676ae8445cb2bf943465ce32d7daa9fae97a02f597db50b1\", \"feeNQT\": \"100000000\", \"type\": 1, \"fullHash\": \"ebe26aea6b9996886b245485f6a5005cbd9c4e2584211cf0c5fc16548db7ba29\", \"version\": 1, \"ecBlockId\": \"4323691795607025950\", \"signatureHash\": \"c59f26e0b40c306f5ecf0c222a51a83578a9f04165ff27d5f16a4f9f00fc63f7\", \"attachment\": { \"alias\": \"ApiExample\", \"version.AliasAssignment\": 1, \"uri\": \"acct:burst-l6fm-89wk-vk8p-fcrbb@burst\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 1, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 497845, \"deadline\": 24, \"transaction\": \"9842222724438221547\", \"timestamp\": 120423842, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 11, \"transactionBytes\": \"0111a2852d07180057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c0000000000000000000000000000000000e1f505*\", \"transaction\": \"9842222724438221547\" }","title":"Set Alias"},{"location":"en/the-burst-api-examples/#get-alias","text":"Request http://127.0.0.1:8125/burst?requestType=getAlias&aliasName=AliasTestSell Response: { \"aliasURI\": \"acct:burst-frdj-uplh-my9a-gukqp@burst\", \"aliasName\": \"AliasTestSell\", \"accountRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"alias\": \"5747297803058313219\", \"requestProcessingTime\": 1, \"account\": \"16922903237994405232\", \"timestamp\": 120675864 }","title":"Get Alias"},{"location":"en/the-burst-api-examples/#get-aliases","text":"Request http://127.0.0.1:8125/burst?requestType=getAliases&account=16922903237994405232 Response: { \"aliases\": [ { \"aliasURI\": \"acct:burst-frdj-uplh-my9a-gukqp@burst\", \"aliasName\": \"AliasTestBuy\", \"accountRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"alias\": \"17197436179114898263\", \"account\": \"16922903237994405232\", \"timestamp\": 120676320 }, { \"aliasURI\": \"acct:burst-frdj-uplh-my9a-gukqp@burst\", \"aliasName\": \"AliasTestSell\", \"accountRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"alias\": \"5747297803058313219\", \"account\": \"16922903237994405232\", \"timestamp\": 120675864 } ], \"requestProcessingTime\": 2 }","title":"Get Aliases"},{"location":"en/the-burst-api-examples/#arbitrary-message-system-operations","text":"","title":"Arbitrary Message System Operations"},{"location":"en/the-burst-api-examples/#encrypt-to","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=encryptTo&recipient=15323192282528158131&messageToEncrypt=This%20is%20a%20message%20encrypted%20using%20%22encryptTo%22.&messageToEncryptIsText=true&secretPhrase=IWontTellYou Response: { \"data\": \"d5a1958d12ce96ce30dbce5b6c8ead7ecbc0f59d857dc8e8fbeec10ae440e0e74e9120fef3b0fa586d4c63fde0f289340e709b30ae528e3c2d740b11e3ae3fdb5e5d5c63f724cf16157c75dabec31eaf\", \"requestProcessingTime\": 34, \"nonce\": \"7cefa6f66d5b71604e2ef56a18319b3f48a38e8aa5cf610369b294f1d40e0f8e\" }","title":"Encrypt To"},{"location":"en/the-burst-api-examples/#decrypt-from","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=decryptFrom&account=16922903237994405232&data=d5a1958d12ce96ce30dbce5b6c8ead7ecbc0f59d857dc8e8fbeec10ae440e0e74e9120fef3b0fa586d4c63fde0f289340e709b30ae528e3c2d740b11e3ae3fdb5e5d5c63f724cf16157c75dabec31eaf&nonce=7cefa6f66d5b71604e2ef56a18319b3f48a38e8aa5cf610369b294f1d40e0f8e&decryptedMessageIsText=true&secretPhrase=IWontTellYou Response: { \"decryptedMessage\": \"This is a message encrypted using \\\"encryptTo\\\".\", \"requestProcessingTime\": 2 }","title":"Decrypt From"},{"location":"en/the-burst-api-examples/#send-message","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=sendMessage&recipient=15323192282528158131&secretPhrase=IWontTellYou&feeNQT=735000&deadline=24&broadcast=true&message=This%20is%20a%20sendMessage%20API%20example&messageIsText=true Response: { \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"unsignedTransactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"dc2503584a48e30ac62d62848f58461e0e9ff55070008743c24f380c24a9ef05525c70b5d40962566f3f4de2018277ba7956eb09d0aec84219784de7f3b76f6a\", \"feeNQT\": \"735000\", \"type\": 1, \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"version\": 1, \"ecBlockId\": \"1212249281481197658\", \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"attachment\": { \"version.Message\": 1, \"messageIsText\": true, \"message\": \"This is a sendMessage API example\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"recipient\": \"15323192282528158131\", \"ecBlockHeight\": 502787, \"deadline\": 24, \"transaction\": \"3120851314369640207\", \"timestamp\": 121620814, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 11, \"transactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\", \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"transaction\": \"3120851314369640207\" }","title":"Send Message"},{"location":"en/the-burst-api-examples/#read-message","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=readMessage&transaction=3120851314369640207 Response: { \"requestProcessingTime\": 0, \"message\": \"This is a sendMessage API example\" }","title":"Read Message"},{"location":"en/the-burst-api-examples/#asset-exchange-operations","text":"","title":"Asset Exchange Operations"},{"location":"en/the-burst-api-examples/#cancel-order","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=cancelAskOrder&order=15076843998317839249&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=1&broadcast=true Response: { \"signatureHash\": \"ea56c641c52e20cfeb2413dc49fc24a00eba23ac4aa444fdb059ad0aa66fdb0f\", \"unsignedTransactionBytes\": \"0214c0d347070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f120000000000000000000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"67f67f75a4ed60109239719e29a11915e4e05addd7d851d75766ef4e64b7b7093ff55615144ffb26d2b0de4c8656330ecd1117b3d477219ed09a1098cb77cd81\", \"feeNQT\": \"100000000\", \"type\": 2, \"fullHash\": \"1454e33bfca5e67186d69ce027e408b3fc52dce6497d4f1d667598e52cae4a3e\", \"version\": 1, \"ecBlockId\": \"16853437834039716545\", \"signatureHash\": \"ea56c641c52e20cfeb2413dc49fc24a00eba23ac4aa444fdb059ad0aa66fdb0f\", \"attachment\": { \"version.AskOrderCancellation\": 1, \"order\": \"15076843998317839249\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 4, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"ecBlockHeight\": 504969, \"deadline\": 1, \"transaction\": \"8207429873684403220\", \"timestamp\": 122147776, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 7, \"transactionBytes\": \"0214c0d347070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f120000000000000000000000000000000000e1f505*\", \"fullHash\": \"1454e33bfca5e67186d69ce027e408b3fc52dce6497d4f1d667598e52cae4a3e\", \"transaction\": \"8207429873684403220\" }","title":"Cancel Order"},{"location":"en/the-burst-api-examples/#get-account-current-order-ids","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountCurrentAskOrderIds&account=9582909050628712440 Response: { \"requestProcessingTime\": 2, \"askOrderIds\": [ \"4875748854378397140\", \"109196327778941945\" ] }","title":"Get Account Current Order Ids"},{"location":"en/the-burst-api-examples/#get-account-current-orders","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountCurrentAskOrders&account=9582909050628712440 Response: { \"askOrders\": [ { \"quantityQNT\": \"100000\", \"priceNQT\": \"195000\", \"accountRS\": \"BURST-MBZS-2BCT-45QV-APCZB\", \"asset\": \"3702027329806229573\", \"type\": \"ask\", \"account\": \"9582909050628712440\", \"order\": \"4875748854378397140\", \"height\": 495658 }, { \"quantityQNT\": \"260100\", \"priceNQT\": \"200000\", \"accountRS\": \"BURST-MBZS-2BCT-45QV-APCZB\", \"asset\": \"3702027329806229573\", \"type\": \"ask\", \"account\": \"9582909050628712440\", \"order\": \"109196327778941945\", \"height\": 494427 } ], \"requestProcessingTime\": 1 }","title":"Get Account Current Orders"},{"location":"en/the-burst-api-examples/#get-all-assets","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAllAssets&firstIndex=373 Response: { \"assets\": [ { \"quantityQNT\": \"10000000000\", \"numberOfAccounts\": 77, \"accountRS\": \"BURST-8E8K-WQ2F-ZDZ5-FQWHX\", \"decimals\": 8, \"numberOfTransfers\": 26, \"name\": \"BCPT\", \"description\": \"Burst Cryptoport Pool Token, is an asset that backed by profit from MiningPool at http://burst-pool.cryptoport.io, i will pay dividend from 50% fund i got from pool fee (monthly). dividend will be proportional to BCPT owned\", \"numberOfTrades\": 510, \"asset\": \"12791182347560578640\", \"account\": \"16050713509424738513\" }, { \"quantityQNT\": \"100000000\", \"numberOfAccounts\": 26, \"accountRS\": \"BURST-H2ZW-3H4D-RJBS-FCVGV\", \"decimals\": 2, \"numberOfTransfers\": 36, \"name\": \"BurstFund\", \"description\": \"This asset will act as a stabilizer fund for Burst. This asset aims to assist in maintaining the value of Burst, providing market correction in the event of market manipulation. Each Quantity will be representative of 10 Burst at an initial market price of 0.00001000 each (or determined by asset market). This assets main focus will be ensuring Burst does not become another outdated and dead NXT clone...\", \"numberOfTrades\": 2, \"asset\": \"673530795527425458\", \"account\": \"15977480701804512252\" } ], \"requestProcessingTime\": 3 }","title":"Get All Assets"},{"location":"en/the-burst-api-examples/#get-all-open-orders","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAllOpenAskOrders&firstIndex=2577 Response: { \"requestProcessingTime\": 0, \"openOrders\": [ { \"quantityQNT\": \"10\", \"priceNQT\": \"10000000000000\", \"accountRS\": \"BURST-359Q-QH73-4N5P-FP54C\", \"asset\": \"15295227971848272658\", \"type\": \"ask\", \"account\": \"15350648744942013686\", \"order\": \"14034527401109329159\", \"height\": 17901 }, { \"quantityQNT\": \"1\", \"priceNQT\": \"10000000000000\", \"accountRS\": \"BURST-Q4TR-YKRW-6RAN-EDBC8\", \"asset\": \"11375670541237055652\", \"type\": \"ask\", \"account\": \"14062819640288676663\", \"order\": \"18379469307992717843\", \"height\": 11997 }, { \"quantityQNT\": \"4392\", \"priceNQT\": \"100000000000\", \"accountRS\": \"BURST-SKL3-ACW8-DBN6-5M8VM\", \"asset\": \"11375670541237055652\", \"type\": \"ask\", \"account\": \"4173943238181013057\", \"order\": \"756014781951608408\", \"height\": 11257 } ] }","title":"Get All Open Orders"},{"location":"en/the-burst-api-examples/#get-all-trades","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAllTrades&lastIndex=1 Response: { \"trades\": [ { \"seller\": \"2695253629713716937\", \"quantityQNT\": \"7700\", \"bidOrder\": \"17489219850997945774\", \"sellerRS\": \"BURST-Q7QB-WPPC-6VE2-4QVTC\", \"buyer\": \"14676337193484961173\", \"priceNQT\": \"100000\", \"askOrder\": \"7125231493760146086\", \"buyerRS\": \"BURST-EKEP-XEYS-6YPW-EL8DR\", \"decimals\": 2, \"name\": \"CryptoMaps\", \"block\": \"10810208340839229954\", \"asset\": \"3702027329806229573\", \"askOrderHeight\": 504189, \"tradeType\": \"sell\", \"timestamp\": 122140342, \"height\": 504949 }, { \"seller\": \"6905334832585552856\", \"quantityQNT\": \"1000\", \"bidOrder\": \"14942960390822608034\", \"sellerRS\": \"BURST-BEYS-G8VQ-6SEK-7F7PZ\", \"buyer\": \"17808054289263456125\", \"priceNQT\": \"66500000\", \"askOrder\": \"3461704332885328085\", \"buyerRS\": \"BURST-QVVX-2TL8-WZ2C-HDRAG\", \"decimals\": 0, \"name\": \"BTFGPool\", \"block\": \"9914674296156980645\", \"asset\": \"9036920395530551012\", \"askOrderHeight\": 504920, \"tradeType\": \"buy\", \"timestamp\": 122132789, \"height\": 504920 } ], \"requestProcessingTime\": 447 }","title":"Get All Trades"},{"location":"en/the-burst-api-examples/#get-asset","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAsset&asset=3702027329806229573 Response: { \"quantityQNT\": \"20000000000\", \"numberOfAccounts\": 9210, \"accountRS\": \"BURST-CMAP-ME5N-TFKP-6BCER\", \"decimals\": 2, \"numberOfTransfers\": 11869, \"name\": \"CryptoMaps\", \"description\": \"The official CryptoMaps Token, see more details at https://token.cryptomaps.me\", \"numberOfTrades\": 523, \"requestProcessingTime\": 0, \"asset\": \"3702027329806229573\", \"account\": \"5454221553913122069\" }","title":"Get Asset"},{"location":"en/the-burst-api-examples/#get-asset-accounts","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAssetAccounts&asset=3702027329806229573&lastIndex=1 Response: { \"accountAssets\": [ { \"quantityQNT\": \"5000000000\", \"accountRS\": \"BURST-CMAP-AY84-2TV8-6F2QK\", \"unconfirmedQuantityQNT\": \"5000000000\", \"asset\": \"3702027329806229573\", \"account\": \"5248959966645406997\" }, { \"quantityQNT\": \"5000000000\", \"accountRS\": \"BURST-CMSP-HRMP-ZBTM-9P4J7\", \"unconfirmedQuantityQNT\": \"5000000000\", \"asset\": \"3702027329806229573\", \"account\": \"8268702915092631317\" } ], \"requestProcessingTime\": 22 }","title":"Get Asset Accounts"},{"location":"en/the-burst-api-examples/#get-asset-ids","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAssetIds&lastIndex=5 Response: { \"assetIds\": [ \"2644409077762286513\", \"5533434524898779728\", \"7756017130240677072\", \"2663432644302202784\", \"11700625361170592721\", \"9789600218215198873\" ], \"requestProcessingTime\": 1 }","title":"Get Asset Ids"},{"location":"en/the-burst-api-examples/#get-asset-transfers","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAssetTransfers&asset=3702027329806229573&lastIndex=1 Response: { \"transfers\": [ { \"quantityQNT\": \"10000\", \"senderRS\": \"BURST-RBHF-BY3C-V949-37G3N\", \"assetTransfer\": \"16436527819322024045\", \"sender\": \"1875121765155055085\", \"recipientRS\": \"BURST-59HP-HQ5R-7MGU-AG4LC\", \"decimals\": 2, \"recipient\": \"9604012506417831413\", \"name\": \"CryptoMaps\", \"asset\": \"3702027329806229573\", \"height\": 504029, \"timestamp\": 121917645 }, { \"quantityQNT\": \"5500\", \"senderRS\": \"BURST-PVZT-KWEH-ZTJE-7Z7C9\", \"assetTransfer\": \"9907383924348587793\", \"sender\": \"6028278722555736057\", \"recipientRS\": \"BURST-RKW5-ZVFT-JU69-6X4JC\", \"decimals\": 2, \"recipient\": \"4990091736314005379\", \"name\": \"CryptoMaps\", \"asset\": \"3702027329806229573\", \"height\": 500631, \"timestamp\": 121093713 } ], \"requestProcessingTime\": 2 }","title":"Get Asset Transfers"},{"location":"en/the-burst-api-examples/#get-assets","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAssets&assets=9306257191450064346&assets=3702027329806229573 Response: { \"assets\": [ { \"quantityQNT\": \"20000000000\", \"numberOfAccounts\": 9210, \"accountRS\": \"BURST-CMAP-ME5N-TFKP-6BCER\", \"decimals\": 2, \"numberOfTransfers\": 11869, \"name\": \"CryptoMaps\", \"description\": \"The official CryptoMaps Token, see more details at https://token.cryptomaps.me\", \"numberOfTrades\": 523, \"asset\": \"3702027329806229573\", \"account\": \"5454221553913122069\" }, { \"quantityQNT\": \"200000000000\", \"numberOfAccounts\": 1, \"accountRS\": \"BURST-SPPT-TD44-HUVK-FSZS4\", \"decimals\": 2, \"numberOfTransfers\": 0, \"name\": \"SpotPoint\", \"description\": \"The official SpotPoint Token, see more details at https://spotpoint.me\", \"numberOfTrades\": 0, \"asset\": \"9306257191450064346\", \"account\": \"15088176726379615929\" } ], \"requestProcessingTime\": 0 }","title":"Get Assets"},{"location":"en/the-burst-api-examples/#get-assets-by-issuer","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAssetsByIssuer&account=1494753212313950790&account=5970910749481183928 Response: { \"assets\": [ [ { \"quantityQNT\": \"100000000\", \"numberOfAccounts\": 19, \"accountRS\": \"BURST-KQL8-645F-3WU8-3GMHB\", \"decimals\": 2, \"numberOfTransfers\": 0, \"name\": \"BoB1Pos\", \"description\": \"Brotherhood of Blockchain www.bob-invest.com proudly present the first investment opportunity on Burst asset. This asset will invest in Prove of Stake coins and pay out dividend in Burst. The payout ratio is 70% to asset holder 20% equipment, internet, electricity, maintenance and admin. 10% reinvest in coins.This asset will make a monthly payment every 15th of the month, first payment is 15/6/2018.\", \"numberOfTrades\": 35, \"asset\": \"15511449532155436028\", \"account\": \"1494753212313950790\" } ], [ { \"quantityQNT\": \"80000000000000\", \"numberOfAccounts\": 6, \"accountRS\": \"BURST-8CPS-Q628-PU9W-7H9R7\", \"decimals\": 6, \"numberOfTransfers\": 3, \"name\": \"GMK\", \"description\": \"GMK Coin\", \"numberOfTrades\": 2, \"asset\": \"8141917335139373659\", \"account\": \"5970910749481183928\" } ] ], \"requestProcessingTime\": 3 }","title":"Get Assets By Issuer"},{"location":"en/the-burst-api-examples/#get-order","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAskOrder&order=14034527401109329159 Response: { \"quantityQNT\": \"10\", \"priceNQT\": \"10000000000000\", \"accountRS\": \"BURST-359Q-QH73-4N5P-FP54C\", \"requestProcessingTime\": 1, \"asset\": \"15295227971848272658\", \"type\": \"ask\", \"account\": \"15350648744942013686\", \"order\": \"14034527401109329159\", \"height\": 17901 }","title":"Get Order"},{"location":"en/the-burst-api-examples/#get-order-ids","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAskOrderIds&asset=11700625361170592721&lastIndex=5 Response: { \"requestProcessingTime\": 3, \"askOrderIds\": [ \"9230225288402446558\", \"9243318318548315528\", \"9399454941412352140\", \"9436352279829246389\", \"9443733332658954573\", \"9545675672764030312\" ] }","title":"Get Order Ids"},{"location":"en/the-burst-api-examples/#get-orders","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAskOrders&asset=11700625361170592721&lastIndex=2 Response: { \"askOrders\": [ { \"quantityQNT\": \"250\", \"priceNQT\": \"100000000\", \"accountRS\": \"BURST-CDQV-WN87-YB2L-FTEPP\", \"asset\": \"11700625361170592721\", \"type\": \"ask\", \"account\": \"15768678879341129435\", \"order\": \"9230225288402446558\", \"height\": 501552 }, { \"quantityQNT\": \"50000\", \"priceNQT\": \"100000000\", \"accountRS\": \"BURST-CDQV-WN87-YB2L-FTEPP\", \"asset\": \"11700625361170592721\", \"type\": \"ask\", \"account\": \"15768678879341129435\", \"order\": \"9243318318548315528\", \"height\": 501552 }, { \"quantityQNT\": \"50\", \"priceNQT\": \"100000000\", \"accountRS\": \"BURST-CDQV-WN87-YB2L-FTEPP\", \"asset\": \"11700625361170592721\", \"type\": \"ask\", \"account\": \"15768678879341129435\", \"order\": \"9399454941412352140\", \"height\": 501552 } ], \"requestProcessingTime\": 1 }","title":"Get Orders"},{"location":"en/the-burst-api-examples/#get-trades","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getTrades&asset=3702027329806229573&lastIndex=2&includeAssetInfo=false Response: { \"trades\": [ { \"seller\": \"2695253629713716937\", \"quantityQNT\": \"7700\", \"bidOrder\": \"17489219850997945774\", \"sellerRS\": \"BURST-Q7QB-WPPC-6VE2-4QVTC\", \"buyer\": \"14676337193484961173\", \"priceNQT\": \"100000\", \"askOrder\": \"7125231493760146086\", \"buyerRS\": \"BURST-EKEP-XEYS-6YPW-EL8DR\", \"block\": \"10810208340839229954\", \"asset\": \"3702027329806229573\", \"askOrderHeight\": 504189, \"tradeType\": \"sell\", \"timestamp\": 122140342, \"height\": 504949 }, { \"seller\": \"13248005565246971693\", \"quantityQNT\": \"100000\", \"bidOrder\": \"6312065606850043247\", \"sellerRS\": \"BURST-59TF-VVKH-X6SQ-DYLQH\", \"buyer\": \"9582909050628712440\", \"priceNQT\": \"120000\", \"askOrder\": \"17472059594274895773\", \"buyerRS\": \"BURST-MBZS-2BCT-45QV-APCZB\", \"block\": \"12097007668561592790\", \"asset\": \"3702027329806229573\", \"askOrderHeight\": 504899, \"tradeType\": \"buy\", \"timestamp\": 122129038, \"height\": 504899 }, { \"seller\": \"12065311156306389227\", \"quantityQNT\": \"7700\", \"bidOrder\": \"17489219850997945774\", \"sellerRS\": \"BURST-8C9D-LBN5-X9FG-CS6WG\", \"buyer\": \"14676337193484961173\", \"priceNQT\": \"100000\", \"askOrder\": \"2519849914836375271\", \"buyerRS\": \"BURST-EKEP-XEYS-6YPW-EL8DR\", \"block\": \"16551915903483185103\", \"asset\": \"3702027329806229573\", \"askOrderHeight\": 504189, \"tradeType\": \"sell\", \"timestamp\": 122075678, \"height\": 504681 } ], \"requestProcessingTime\": 1 }","title":"Get Trades"},{"location":"en/the-burst-api-examples/#issue-asset","text":"Request http://localhost:8125/burst?requestType=issueAsset&publicKey=57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c&name=SecretCoin&description=This+is+SecretCoin&quantityQNT=100&deadline=60&feeNQT=100000000000 Note: This is a fake example. Response: { \"unsignedTransactionBytes\": \"021095e5da013c0073080c6a224062660184f10ebb7fb431d459364a12403...\", \"transactionJSON\": { \"senderPublicKey\": \"73080c6a224062660184f10ebb7fb431d459364a12403320c7f601f9d75cc547\", \"feeNQT\": \"100000000000\", \"type\": 2, \"version\": 1, \"ecBlockId\": \"1564408139943737911\", \"attachment\": { \"name\": \"SecretCoin\", \"description\": \"This+is+SecretCoin\", \"quantityQNT\": \"100\", \"version.AssetIssuance\": 1, \"decimals\": 0 }, \"senderRS\": \"BURST-4VNQ-RWZC-4WWQ-GVM8S\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"17013046603665206934\", \"ecBlockHeight\": 288402, \"deadline\": 60, \"timestamp\": 31122837, \"height\": 2147483647 }, \"broadcasted\": false, \"requestProcessingTime\": 2 }","title":"Issue Asset"},{"location":"en/the-burst-api-examples/#place-order","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=placeBidOrder&asset=3702027329806229573&quantityQNT=1&priceNQT=100000000&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=1&broadcast=false Response: { \"signatureHash\": \"3358f546ce7136ca478692102d0b526f80b4ca83eb78e90d15813b9636b654e5\", \"unsignedTransactionBytes\": \"0213c6cc47070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f120000000000000000000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"48d14f308d26380e4dfa26b296c8728eef04af8704acff60f4d8bef28a126701ea29878753d2106a16228cfc3829e8f3d6a2e5baf739dbd0460fd45cff1241e0\", \"feeNQT\": \"100000000\", \"type\": 2, \"fullHash\": \"229f52765195110e0e096b81b91f04186be14ada7e29949841ee30e37b655775\", \"version\": 1, \"ecBlockId\": \"6656096466494440810\", \"signatureHash\": \"3358f546ce7136ca478692102d0b526f80b4ca83eb78e90d15813b9636b654e5\", \"attachment\": { \"quantityQNT\": \"1\", \"priceNQT\": \"100000000\", \"asset\": \"3702027329806229573\", \"version.BidOrderPlacement\": 1 }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 3, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"ecBlockHeight\": 504963, \"deadline\": 1, \"transaction\": \"1013755568245088034\", \"timestamp\": 122145990, \"height\": 2147483647 }, \"broadcasted\": false, \"requestProcessingTime\": 3, \"transactionBytes\": \"0213c6cc47070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f120000000000000000000000000000000000e1f505*\", \"fullHash\": \"229f52765195110e0e096b81b91f04186be14ada7e29949841ee30e37b655775\", \"transaction\": \"1013755568245088034\" }","title":"Place Order"},{"location":"en/the-burst-api-examples/#transfer-asset","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=transferAsset&recipient=17001464071916561838&asset=3702027329806229573&quantityQNT=1&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=1&broadcast=true Response: { \"signatureHash\": \"59456e26081926b27c38ca46d574e4a6373953b932e8368f131f7bc86ffc3aa9\", \"unsignedTransactionBytes\": \"021143d147070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb000000000000000000e1f505*\", \"transactionJSON\": { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"b5f33599a52e5e4e56ad5c316cd6f6ced8ebe9e9931222aaee30407570ede60031a068b6a89714fca851b486e8d8c2509ef46b3e0e1ef44c819cbff5b0bb78c4\", \"feeNQT\": \"100000000\", \"type\": 2, \"fullHash\": \"3b7d9f5b998ce795a3300ed1e6df1ba8fe467b137e2f2c662c9149a5b0f878d9\", \"version\": 1, \"ecBlockId\": \"6974740076508916530\", \"signatureHash\": \"59456e26081926b27c38ca46d574e4a6373953b932e8368f131f7bc86ffc3aa9\", \"attachment\": { \"version.AssetTransfer\": 1, \"quantityQNT\": \"1\", \"asset\": \"3702027329806229573\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 1, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-GBFG-HVQ4-8AMM-GPCWR\", \"recipient\": \"17001464071916561838\", \"ecBlockHeight\": 504968, \"deadline\": 1, \"transaction\": \"10801756821566487867\", \"timestamp\": 122147139, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 5, \"transactionBytes\": \"021143d147070100a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb000000000000000000e1f505*\", \"fullHash\": \"3b7d9f5b998ce795a3300ed1e6df1ba8fe467b137e2f2c662c9149a5b0f878d9\", \"transaction\": \"10801756821566487867\" }","title":"Transfer Asset"},{"location":"en/the-burst-api-examples/#block-operations","text":"","title":"Block Operations"},{"location":"en/the-burst-api-examples/#get-block","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getBlock&block=2298247278137763160 Response: { \"previousBlockHash\": \"98338ec9e496040f505dace85c3ab331e6ad257f24d6e9417877a4a22b449ab3\", \"payloadLength\": 214, \"totalAmountNQT\": \"0\", \"generationSignature\": \"be12abb71bfe2dcde77cbd5872e64855929d934d04a491cb08950b9e509f37eb\", \"generator\": \"16286104011619463406\", \"generatorPublicKey\": \"ba5464139a83fcdb600ba141b567430ec5ebd0e409d246cdd33c3597855e0a4e\", \"baseTarget\": \"116169\", \"payloadHash\": \"20585e4ab9b6ac07f8903a509b1494dab99b931bedf3e3ad11c5a556a82b7c3e\", \"generatorRS\": \"BURST-AW9G-BYKU-AZWL-GXY26\", \"blockReward\": \"944\", \"nextBlock\": \"10431007917907627236\", \"requestProcessingTime\": 0, \"scoopNum\": 3035, \"numberOfTransactions\": 1, \"blockSignature\": \"5c40fb39d21ec55a77718e9de25b40f008b5a940434208b191bf010322c453047a3fe6418b0ffa62c131a31d59142ec9b336815210c96a8a37709768a6d8e6c3\", \"transactions\": [ \"3120851314369640207\" ], \"nonce\": \"77469254\", \"version\": 3, \"totalFeeNQT\": \"735000\", \"previousBlock\": \"1082155719854011288\", \"block\": \"2298247278137763160\", \"height\": 502797, \"timestamp\": 121620850 }","title":"Get Block"},{"location":"en/the-burst-api-examples/#get-block-id","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getBlockId&height=502000 Response: { \"block\": \"9782158559918006093\", \"requestProcessingTime\": 1 }","title":"Get Block Id"},{"location":"en/the-burst-api-examples/#get-blocks","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getBlocks&lastIndex=1 Response: { \"blocks\": [ { \"previousBlockHash\": \"e4cc2b7c6f62c290d1405ef236b846d316df4cc187c9554b18dcb54861f4ade2\", \"payloadLength\": 1234, \"totalAmountNQT\": \"132933935798\", \"generationSignature\": \"53f43986acef5899f08e388bde1bc6b935499c91badace2247076aa984fea577\", \"generator\": \"12019899115821911181\", \"generatorPublicKey\": \"f6b3ee829223351281340617eae3bdc3082ae9db6899395befddabc4aae37161\", \"baseTarget\": \"115429\", \"payloadHash\": \"2e71185d5f9c8cce3f2cc87dec5df9643dc0b6562f78f49b553610bc4d9af5a3\", \"generatorRS\": \"BURST-KM6F-KZ7B-46SF-C4UMF\", \"blockReward\": \"944\", \"scoopNum\": 1265, \"numberOfTransactions\": 7, \"blockSignature\": \"c5f9495278e685e90d4d42108c0a25b0a62f0006bdbb70f8df90d17d49a4670c09d13d63947fe69904340748348001277308de67891ee3bec177524629bc7383\", \"transactions\": [ \"14343547955476128075\", \"14751316321929102651\", \"18403710335612237831\", \"2492947289038528624\", \"3664660987329932102\", \"5094936331677798562\", \"5165719427461695861\" ], \"nonce\": \"518857973\", \"version\": 3, \"totalFeeNQT\": \"510735000\", \"previousBlock\": \"10431007917907627236\", \"block\": \"3526547904120473437\", \"height\": 502799, \"timestamp\": 121621514 }, { \"previousBlockHash\": \"58e5680bb903e51f3dfe2221d5f291e5e7750f360fe78f7f5fee3c568867c7f2\", \"payloadLength\": 938, \"totalAmountNQT\": \"139674768871\", \"generationSignature\": \"142e073b4a84e95284b8eae679f1cc87d82f418897ffe0858d9bd1adda33d220\", \"generator\": \"12414125682074447698\", \"generatorPublicKey\": \"4f04a259ddc9c60e49bf3ef0ca5cb53c00ae97dedc1fcb59af2e48a9894ea745\", \"baseTarget\": \"116986\", \"payloadHash\": \"3d5153f350a07fb6d0b9a4cd07f2d4ef38b0bf312df2091eda05edf2ca4f1283\", \"generatorRS\": \"BURST-MVUL-K5UK-RRTY-CPYKS\", \"blockReward\": \"944\", \"nextBlock\": \"3526547904120473437\", \"scoopNum\": 3885, \"numberOfTransactions\": 5, \"blockSignature\": \"300fd5eace546b846213894c0afa9e68755fa300472a1101ca36d524d3433108445f7154d6b9151c3202272e516b7b9c180751ee65de949cdc7a459409a8b613\", \"transactions\": [ \"13447447233023586787\", \"14140393734437081046\", \"3451268376629033899\", \"4144139998017169860\", \"5800257696655274819\" ], \"nonce\": \"77540123\", \"version\": 3, \"totalFeeNQT\": \"400735000\", \"previousBlock\": \"2298247278137763160\", \"block\": \"10431007917907627236\", \"height\": 502798, \"timestamp\": 121620994 } ], \"requestProcessingTime\": 1 }","title":"Get Blocks"},{"location":"en/the-burst-api-examples/#get-ec-block","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getECBlock Response: { \"ecBlockHeight\": 502788, \"requestProcessingTime\": 1, \"ecBlockId\": \"15769175919943831738\", \"timestamp\": 121621703 }","title":"Get EC Block"},{"location":"en/the-burst-api-examples/#digital-goods-store-operations","text":"","title":"Digital Goods Store Operations"},{"location":"en/the-burst-api-examples/#dgs-delisting","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=dgsDelisting&goods=11813734897437346473&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"87dd2aa00690acaa5da4e8cd9db6ab94b5ed8bf0f8fe2c2ba6a39c57d3073105\", \"unsignedTransactionBytes\": \"03111852e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"39ee52204d0a32c0bbd0e4bc6a6fb52299cd7d16ab74e9a040f857d3b1c3e...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"40e64c357e240f9b7ca5780e757e34d48a58ae93eeb19e62d020d5719b43e2b6\", \"version\": 1, \"ecBlockId\": \"5345754442518111082\", \"signatureHash\": \"87dd2aa00690acaa5da4e8cd9db6ab94b5ed8bf0f8fe2c2ba6a39c57d3073105\", \"attachment\": { \"version.DigitalGoodsDelisting\": 1, \"goods\": \"11813734897437346473\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 1, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 292903, \"deadline\": 60, \"transaction\": \"11173189325008201280\", \"timestamp\": 31609368, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 5188, \"transactionBytes\": \"03111852e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"40e64c357e240f9b7ca5780e757e34d48a58ae93eeb19e62d020d5719b43e2b6\", \"transaction\": \"11173189325008201280\" }","title":"DGS Delisting"},{"location":"en/the-burst-api-examples/#dgs-delivery","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=dgsDelivery&purchase=3723760852542296589&goodsToEncrypt=DownloadCode&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"f3f1f1bf30c7a6f5a7776aa23502dfe5240efe0d5c016760f8e8a152c4eb1b1b\", \"unsignedTransactionBytes\": \"0315b20fe1013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"b96c42161ce38177168de5a8906ce747a5415017df5b16cdce1c015cb6e1f10b...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"349926ea025b627117c05fbe3ff298e97a8efdb07f7ae552b5a91e7112c5b82b\", \"version\": 1, \"ecBlockId\": \"15813950788992376142\", \"signatureHash\": \"f3f1f1bf30c7a6f5a7776aa23502dfe5240efe0d5c016760f8e8a152c4eb1b1b\", \"attachment\": { \"goodsIsText\": true, \"discountNQT\": \"0\", \"purchase\": \"3723760852542296589\", \"goodsData\": \"aef91bfe543844964b0dadc51c6fe4c624b6b0c72c23c5c61f7e626f51e15...\", \"version.DigitalGoodsDelivery\": 1, \"goodsNonce\": \"4cb474ec53a590c6fd20d050c429d009ddefd286b2782eb3a0782ae45c2bbbbd\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 5, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-6GMG-FC5F-YSX6-8CVEL\", \"recipient\": \"7580519603555678830\", \"ecBlockHeight\": 292069, \"deadline\": 60, \"transaction\": \"8170192742079961396\", \"timestamp\": 31526834, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 8832, \"transactionBytes\": \"0315b20fe1013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"349926ea025b627117c05fbe3ff298e97a8efdb07f7ae552b5a91e7112c5b82b\", \"transaction\": \"8170192742079961396\" }","title":"DGS Delivery"},{"location":"en/the-burst-api-examples/#feedback","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=dgsFeedback&purchase=10234639413366748292&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60&message=Thanks Response: { \"signatureHash\": \"bf31e4e3b2037bfe223efd72519e3a2d25cd1e0dc1a62e3eeefe59179e16a7a4\", \"unsignedTransactionBytes\": \"0316a463e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"a3ee76ce4bec0328fe5cfc1a2adfc229a8c9959a81b7912664de51156987c...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"491d94b9031b7a7a32d9ab5d0491b81364941eb080ee9029de58cb6ffa0161f6\", \"version\": 1, \"ecBlockId\": \"5484311742753527844\", \"signatureHash\": \"bf31e4e3b2037bfe223efd72519e3a2d25cd1e0dc1a62e3eeefe59179e16a7a4\", \"attachment\": { \"purchase\": \"10234639413366748292\", \"version.Message\": 1, \"messageIsText\": true, \"version.DigitalGoodsFeedback\": 1, \"message\": \"Thank you!\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 6, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-6GMG-FC5F-YSX6-8CVEL\", \"recipient\": \"7580519603555678830\", \"ecBlockHeight\": 292938, \"deadline\": 60, \"transaction\": \"8825396122598251849\", \"timestamp\": 31613860, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 9343, \"transactionBytes\": \"0316a463e2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"491d94b9031b7a7a32d9ab5d0491b81364941eb080ee9029de58cb6ffa0161f6\", \"transaction\": \"8825396122598251849\" }","title":"Feedback"},{"location":"en/the-burst-api-examples/#dgs-listing","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=dgsListing&secretPhrase=IWontTellYou&name=Test&description=Testing&tags=test&quantity=3&priceNQT=100000000&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"565bc0a6140ae1331cd5db009fbd9da164d8802330939ef40204a9bc343b3149\", \"unsignedTransactionBytes\": \"031092aedf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"465ed3dfef9a02fc97fc18a6f83bb9f07c285aef41ff78c957d59cda2972ba...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"a98a63204cd1f2a3304cee79776854f290f0472883c576056fec16a23efa90df\", \"version\": 1, \"ecBlockId\": \"4480409615309425420\", \"signatureHash\": \"565bc0a6140ae1331cd5db009fbd9da164d8802330939ef40204a9bc343b3149\", \"attachment\": { \"priceNQT\": \"100000000\", \"quantity\": 3, \"name\": \"Test Product\", \"description\": \"Testing the DGS.\", \"version.DigitalGoodsListing\": 1, \"tags\": \"test, product, tag, extra\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 291240, \"deadline\": 60, \"transaction\": \"11813734897437346473\", \"timestamp\": 31436434, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 8958, \"transactionBytes\": \"031092aedf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473b...\", \"fullHash\": \"a98a63204cd1f2a3304cee79776854f290f0472883c576056fec16a23efa90df\", \"transaction\": \"11813734897437346473\" }","title":"DGS Listing"},{"location":"en/the-burst-api-examples/#dgs-price-change","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=dgsPriceChange&goods=11813734897437346473&priceNQT=200000000&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"aad88476935eda8ca3a9190163b83106e6ca95733ddfa274d29a0378d773cc3c\", \"unsignedTransactionBytes\": \"0312cebbdf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"533f9c330100cab8a7a0f9375b49a09f6432b0e029660ab715a728ac75e6c2...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"1964e4fe11f4a00a96c79e274f9da21f64d7fe10ed77a154975b92d3c65f1287\", \"version\": 1, \"ecBlockId\": \"14411471768450948944\", \"signatureHash\": \"aad88476935eda8ca3a9190163b83106e6ca95733ddfa274d29a0378d773cc3c\", \"attachment\": { \"goods\": \"11813734897437346473\", \"priceNQT\": \"200000000\", \"version.DigitalGoodsPriceChange\": 1 }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 2, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 291259, \"deadline\": 60, \"transaction\": \"765880294780986393\", \"timestamp\": 31439822, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 6444, \"transactionBytes\": \"0312cebbdf013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"1964e4fe11f4a00a96c79e274f9da21f64d7fe10ed77a154975b92d3c65f1287\", \"transaction\": \"765880294780986393\" }","title":"DGS Price Change"},{"location":"en/the-burst-api-examples/#dgs-purchase","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=dgsPurchase&goods=1587116104511359906&quantity=1&deliveryDeadlineTimestamp=31800000&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"03e112d8707ae33ec37ff4405f31920c0e67c58439e33033c248b3eaca81d2c3\", \"unsignedTransactionBytes\": \"0314805be2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"a2739ef63024d9d3c61bebbb2692e7a2092666e13fc380c2e8b29c3a3fc24...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"84f4ef2d52be088e011e5b7857fbab88665918e0df02102a8333aee53c3bb88b\", \"version\": 1, \"ecBlockId\": \"3186563001195424357\", \"signatureHash\": \"03e112d8707ae33ec37ff4405f31920c0e67c58439e33033c248b3eaca81d2c3\", \"attachment\": { \"goods\": \"1587116104511359906\", \"priceNQT\": \"100000000\", \"quantity\": 1, \"deliveryDeadlineTimestamp\": 31800000, \"version.DigitalGoodsPurchase\": 1 }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 4, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-6GMG-FC5F-YSX6-8CVEL\", \"recipient\": \"7580519603555678830\", \"ecBlockHeight\": 292925, \"deadline\": 60, \"transaction\": \"10234639413366748292\", \"timestamp\": 31611776, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 5536, \"transactionBytes\": \"0314805be2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"84f4ef2d52be088e011e5b7857fbab88665918e0df02102a8333aee53c3bb88b\", \"transaction\": \"10234639413366748292\" }","title":"DGS Purchase"},{"location":"en/the-burst-api-examples/#dgs-quantity-change","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=dgsQuantityChange&goods=11813734897437346473&deltaQuantity=-1&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"5c60fc94452980f88423c3a16a74d49209d246d0f7454024c87cc76ea3221500\", \"unsignedTransactionBytes\": \"031334b7df013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"7eaf8e48a780f51aa7e01c01091c9388b72a1bf075dddbd3594d55ad169272...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"f3cd9046bba3706dd6f63cf387f23c7c29532ff15e3423f57900613c844a646f\", \"version\": 1, \"ecBlockId\": \"14589429051005044326\", \"signatureHash\": \"5c60fc94452980f88423c3a16a74d49209d246d0f7454024c87cc76ea3221500\", \"attachment\": { \"goods\": \"11813734897437346473\", \"version.DigitalGoodsQuantityChange\": 1, \"deltaQuantity\": -1 }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 3, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"ecBlockHeight\": 291249, \"deadline\": 60, \"transaction\": \"7885982972263845363\", \"timestamp\": 31438644, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 7474, \"transactionBytes\": \"031334b7df013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"f3cd9046bba3706dd6f63cf387f23c7c29532ff15e3423f57900613c844a646f\", \"transaction\": \"7885982972263845363\" }","title":"DGS Quantity Change"},{"location":"en/the-burst-api-examples/#dgs-refund","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=dgsRefund&purchase=3723760852542296589&refundNQT=100000000&secretPhrase=IWontTellYou&feeNQT=100000000&deadline=60 Response: { \"signatureHash\": \"dafa980759db6bd6e5f11aa7bdc1cff1bb201be750328c397870f1758cef975c\", \"unsignedTransactionBytes\": \"0317944ee2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"transactionJSON\": { \"senderPublicKey\": \"57fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b473beec228f79ff93c\", \"signature\": \"43a90c1f0dde1bca84623e69b0abe0284883600d7bfb5286b3489a9ee417...\", \"feeNQT\": \"100000000\", \"type\": 3, \"fullHash\": \"64c2af2811da3306f4671002ed1f12655fca1937a0b68164da2a71f3ee63adce\", \"version\": 1, \"ecBlockId\": \"11418000967717599433\", \"signatureHash\": \"dafa980759db6bd6e5f11aa7bdc1cff1bb201be750328c397870f1758cef975c\", \"attachment\": { \"purchase\": \"3723760852542296589\", \"version.DigitalGoodsRefund\": 1, \"refundNQT\": \"100000000\" }, \"senderRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"subtype\": 7, \"amountNQT\": \"0\", \"sender\": \"15323192282528158131\", \"recipientRS\": \"BURST-6GMG-FC5F-YSX6-8CVEL\", \"recipient\": \"7580519603555678830\", \"ecBlockHeight\": 292899, \"deadline\": 60, \"transaction\": \"446940555271717476\", \"timestamp\": 31608468, \"height\": 2147483647 }, \"broadcasted\": true, \"requestProcessingTime\": 10509, \"transactionBytes\": \"0317944ee2013c0057fb6f3a958e320bb49c4e81b4c2cf28b9f25d086c143b...\", \"fullHash\": \"64c2af2811da3306f4671002ed1f12655fca1937a0b68164da2a71f3ee63adce\", \"transaction\": \"446940555271717476\" }","title":"DGS Refund"},{"location":"en/the-burst-api-examples/#get-dgs-good","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSGood&goods=490136863013671329 Response: { \"seller\": \"16432157717192673510\", \"priceNQT\": \"750000000000\", \"quantity\": 1000, \"name\": \"100 TB Plot File\", \"goods\": \"490136863013671329\", \"description\": \"48-100h delivery Time\\r\\nSpecify how big you want your file\\r\\nMin size 1 TB\\r\\nMax size 10 TB\\r\\nDelivery is a Torrent Download\", \"sellerRS\": \"BURST-F498-E9P9-ACDE-G2Q4A\", \"requestProcessingTime\": 1, \"delisted\": false, \"tags\": \"plotter\", \"timestamp\": 121088459 }","title":"Get DGS Good"},{"location":"en/the-burst-api-examples/#get-dgs-goods","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSGoods&seller=869755421284789028 Response: { \"seller\": \"16432157717192673510\", \"priceNQT\": \"750000000000\", \"quantity\": 1000, \"name\": \"100 TB Plot File\", \"goods\": \"490136863013671329\", \"description\": \"48-100h delivery Time\\r\\nSpecify how big you want your file\\r\\nMin size 1 TB\\r\\nMax size 10 TB\\r\\nDelivery is a Torrent Download\", \"sellerRS\": \"BURST-F498-E9P9-ACDE-G2Q4A\", \"requestProcessingTime\": 1, \"delisted\": false, \"tags\": \"plotter\", \"timestamp\": 121088459 }","title":"Get DGS Goods"},{"location":"en/the-burst-api-examples/#get-dgs-goods-purchases","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSGoods&seller=869755421284789028 Response: { \"goods\": [ { \"seller\": \"869755421284789028\", \"priceNQT\": \"100000000\", \"quantity\": 9996, \"name\": \"Donate - Help CompSci Students\", \"goods\": \"8877051912510361584\", \"description\": \"My claass of compsci students is working on burst related projects as well as a mining rig. Help me help them learn more, do more. Please donate to their cause.\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"delisted\": false, \"tags\": \"school\", \"timestamp\": 117044802 }, { \"seller\": \"869755421284789028\", \"priceNQT\": \"1000000000\", \"quantity\": 999999, \"name\": \"Hard drives for high school students\", \"goods\": \"4170413457250059275\", \"description\": \"The high school computer science class is woefully funded. Please help and donate..\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"delisted\": false, \"tags\": \"\", \"timestamp\": 122140901 } ], \"requestProcessingTime\": 1 }","title":"Get DGS Goods Purchases"},{"location":"en/the-burst-api-examples/#get-dgs-pending-purchases","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSPendingPurchases&seller=869755421284789028 Response: { \"purchases\": [ { \"seller\": \"869755421284789028\", \"priceNQT\": \"100000000\", \"quantity\": 1, \"deliveryDeadlineTimestamp\": 142820935, \"buyerRS\": \"BURST-8J3W-BBNN-BJMG-HCPG3\", \"pending\": true, \"purchase\": \"18028864805999806823\", \"name\": \"Donate - Help CompSci Students\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"buyer\": \"17346364151341203516\", \"timestamp\": 120220136 }, { \"seller\": \"869755421284789028\", \"note\": { \"data\": \"530c56998edacb24b664d9be3d9db3be52cb89bc10efdfbb1c97a5bb415bff2a1737ecf758202b57171145296bb3db2e\", \"nonce\": \"6b59813a09abe6809d87a34a0d7eb4ad7b97f43a28ae8d26f4811f8fff864712\" }, \"quantity\": 1, \"pending\": true, \"purchase\": \"9754082484071034298\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"buyer\": \"11786437085044315193\", \"priceNQT\": \"100000000\", \"deliveryDeadlineTimestamp\": 139660265, \"buyerRS\": \"BURST-X73T-4MLS-LV98-CQG69\", \"name\": \"Donate - Help CompSci Students\", \"timestamp\": 117059465 } ], \"requestProcessingTime\": 2 }","title":"Get DGS Pending Purchases"},{"location":"en/the-burst-api-examples/#get-dgs-purchase","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSPurchase&purchase=18028864805999806823 Response: { \"seller\": \"869755421284789028\", \"quantity\": 1, \"pending\": true, \"purchase\": \"18028864805999806823\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"requestProcessingTime\": 1, \"buyer\": \"17346364151341203516\", \"priceNQT\": \"100000000\", \"deliveryDeadlineTimestamp\": 142820935, \"buyerRS\": \"BURST-8J3W-BBNN-BJMG-HCPG3\", \"name\": \"Donate - Help CompSci Students\", \"timestamp\": 120220136 }","title":"Get DGS Purchase"},{"location":"en/the-burst-api-examples/#get-dgs-purchases","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getDGSPurchases&seller=869755421284789028 Response: { \"purchases\": [ { \"seller\": \"869755421284789028\", \"priceNQT\": \"100000000\", \"quantity\": 1, \"deliveryDeadlineTimestamp\": 142820935, \"buyerRS\": \"BURST-8J3W-BBNN-BJMG-HCPG3\", \"pending\": true, \"purchase\": \"18028864805999806823\", \"name\": \"Donate - Help CompSci Students\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"buyer\": \"17346364151341203516\", \"timestamp\": 120220136 }, { \"seller\": \"869755421284789028\", \"note\": { \"data\": \"530c56998edacb24b664d9be3d9db3be52cb89bc10efdfbb1c97a5bb415bff2a1737ecf758202b57171145296bb3db2e\", \"nonce\": \"6b59813a09abe6809d87a34a0d7eb4ad7b97f43a28ae8d26f4811f8fff864712\" }, \"quantity\": 1, \"pending\": true, \"purchase\": \"9754082484071034298\", \"goods\": \"8877051912510361584\", \"sellerRS\": \"BURST-EUT6-YC9L-N63Y-2XH6S\", \"buyer\": \"11786437085044315193\", \"priceNQT\": \"100000000\", \"deliveryDeadlineTimestamp\": 139660265, \"buyerRS\": \"BURST-X73T-4MLS-LV98-CQG69\", \"name\": \"Donate - Help CompSci Students\", \"timestamp\": 117059465 } ], \"requestProcessingTime\": 2 }","title":"Get DGS Purchases"},{"location":"en/the-burst-api-examples/#networking-operations","text":"","title":"Networking Operations"},{"location":"en/the-burst-api-examples/#get-my-info","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getMyInfo Response: { \"address\": \"127.0.0.1\", \"host\": \"127.0.0.1\", \"requestProcessingTime\": 0 }","title":"Get My Info"},{"location":"en/the-burst-api-examples/#get-peer","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getPeer&peer=107.150.6.121 Response: { \"lastUpdated\": 121622908, \"downloadedVolume\": 5557831, \"blacklisted\": false, \"announcedAddress\": \"107.150.6.121\", \"application\": \"BRS\", \"uploadedVolume\": 11482803, \"state\": 1, \"requestProcessingTime\": 0, \"version\": \"2.2.1\", \"platform\": \"PC\", \"shareAddress\": true }","title":"Get Peer"},{"location":"en/the-burst-api-examples/#get-peers","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getPeers&active=true Response: { \"peers\": [ \"107.150.6.121\", \"37.205.11.73\", \"79.113.222.145\", \"74.141.142.82\", \"71.172.254.124\", \"89.133.236.99\", \"97.84.139.244\" ], \"requestProcessingTime\": 0 }","title":"Get Peers"},{"location":"en/the-burst-api-examples/#server-information-operations","text":"","title":"Server Information Operations"},{"location":"en/the-burst-api-examples/#get-blockchain-status","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getBlockchainStatus Response: { \"lastBlock\": \"10431007917907627236\", \"application\": \"BRS\", \"isScanning\": false, \"cumulativeDifficulty\": \"29365339954194811259\", \"lastBlockchainFeederHeight\": 501733, \"numberOfBlocks\": 502799, \"time\": 121621131, \"requestProcessingTime\": 0, \"version\": \"2.2.1\", \"lastBlockchainFeeder\": \"86.26.25.217\" }","title":"Get Blockchain Status"},{"location":"en/the-burst-api-examples/#get-constants","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getConstants Response: { \"maxBlockPayloadLength\": 44880, \"genesisAccountId\": \"0\", \"genesisBlockId\": \"3444294670862540038\", \"transactionTypes\": [ { \"description\": \"Payment\", \"value\": 0, \"subtypes\": [ { \"description\": \"Ordinary payment\", \"value\": 0 } ] }, { \"description\": \"Messaging\", \"value\": 1, \"subtypes\": [ { \"description\": \"Arbitrary message\", \"value\": 0 }, { \"description\": \"Alias assignment\", \"value\": 1 }, { \"description\": \"Alias sell\", \"value\": 6 }, { \"description\": \"Alias buy\", \"value\": 7 }, { \"description\": \"Account info\", \"value\": 5 } ] }, { \"description\": \"Colored coins\", \"value\": 2, \"subtypes\": [ { \"description\": \"Asset issuance\", \"value\": 0 }, { \"description\": \"Asset transfer\", \"value\": 1 }, { \"description\": \"Ask order placement\", \"value\": 2 }, { \"description\": \"Bid order placement\", \"value\": 3 }, { \"description\": \"Ask order cancellation\", \"value\": 4 }, { \"description\": \"Bid order cancellation\", \"value\": 5 } ] }, { \"description\": \"Digital goods\", \"value\": 3, \"subtypes\": [ { \"description\": \"Listing\", \"value\": 0 }, { \"description\": \"Delisting\", \"value\": 1 }, { \"description\": \"Price change\", \"value\": 2 }, { \"description\": \"Quantity change\", \"value\": 3 }, { \"description\": \"Purchase\", \"value\": 4 }, { \"description\": \"Delivery\", \"value\": 5 }, { \"description\": \"Feedback\", \"value\": 6 }, { \"description\": \"Refund\", \"value\": 7 } ] }, { \"description\": \"Account Control\", \"value\": 4, \"subtypes\": [ { \"description\": \"Effective balance leasing\", \"value\": 0 } ] } ], \"peerStates\": [ { \"description\": \"Non-connected\", \"value\": 0 }, { \"description\": \"Connected\", \"value\": 1 }, { \"description\": \"Disconnected\", \"value\": 2 } ], \"maxArbitraryMessageLength\": 1000, \"requestTypes\": {} }","title":"Get Constants"},{"location":"en/the-burst-api-examples/#get-state","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getState Response: { \"numberOfPeers\": 2748, \"numberOfUnlockedAccounts\": 0, \"numberOfTransfers\": 56779, \"numberOfOrders\": 2974, \"numberOfTransactions\": 7528488, \"maxMemory\": 1431830528, \"isScanning\": false, \"cumulativeDifficulty\": \"29365339954194811259\", \"numberOfAssets\": 371, \"freeMemory\": 617885288, \"availableProcessors\": 2, \"totalEffectiveBalanceNXT\": 1961368807, \"numberOfAccounts\": 147147, \"numberOfBlocks\": 502799, \"requestProcessingTime\": 6189, \"version\": \"2.2.1\", \"numberOfBidOrders\": 397, \"lastBlock\": \"10431007917907627236\", \"totalMemory\": 1167589376, \"application\": \"BRS\", \"numberOfAliases\": 17008, \"lastBlockchainFeederHeight\": 502798, \"numberOfTrades\": 109663, \"time\": 121621202, \"numberOfAskOrders\": 2577, \"lastBlockchainFeeder\": \"169.55.184.235\" }","title":"Get State"},{"location":"en/the-burst-api-examples/#get-time","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getTime Response: { \"time\": 121621260, \"requestProcessingTime\": 0 }","title":"Get Time"},{"location":"en/the-burst-api-examples/#transaction-operations","text":"","title":"Transaction Operations"},{"location":"en/the-burst-api-examples/#broadcast-transaction","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=broadcastTransaction&transactionBytes=00109cce3f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12ae2527ec7e55f1eb00e1f5050000000018370b00000000000000000000000000000000000000000000000000000000000000000000000000bed76407665ef3dbe24c78041a497e9e603076b8adf90353effe5218c83f69078adaec89a2f2e1ffb7bc835b1c21cf8300185cd4f3d7df52be156e61069d569d0000000006ac0700769afc7e6215e488 Response: { \"requestProcessingTime\": 4, \"fullHash\": \"d663f7fe8bf215906b29838ade5d860b2229188acea7827a737d823253b488db\", \"transaction\": \"10382471199064548310\" } Note : If the transaction has already been broadcast, the following INFO notice appears in the console output and log file: Transaction 15200507403046301754 already in blockchain (or unconfirmed pool), will not broadcast again .","title":"Broadcast Transaction"},{"location":"en/the-burst-api-examples/#calculate-full-hash","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=calculateFullHash&unsignedTransactionBytes=01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000003ac07005ac8e8794cc6d21001210000805468697320697320612073656e644d65737361676520415049206578616d706c65&signatureHash=0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e Response: { \"requestProcessingTime\": 0, \"fullHash\": \"a8035211b0fb38415509ca451feee44787598462e7bc608affb8e7b2a1f81d05\" }","title":"Calculate Full Hash"},{"location":"en/the-burst-api-examples/#get-transaction","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getTransaction&transaction=3120851314369640207%20 Response: { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"dc2503584a48e30ac62d62848f58461e0e9ff55070008743c24f380c24a9ef05525c70b5d40962566f3f4de2018277ba7956eb09d0aec84219784de7f3b76f6a\", \"feeNQT\": \"735000\", \"requestProcessingTime\": 0, \"type\": 1, \"confirmations\": 7, \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"version\": 1, \"ecBlockId\": \"1212249281481197658\", \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"attachment\": { \"version.Message\": 1, \"messageIsText\": true, \"message\": \"This is a sendMessage API example\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"recipient\": \"15323192282528158131\", \"ecBlockHeight\": 502787, \"block\": \"2298247278137763160\", \"blockTimestamp\": 121620850, \"deadline\": 24, \"transaction\": \"3120851314369640207\", \"timestamp\": 121620814, \"height\": 502797 }","title":"Get Transaction"},{"location":"en/the-burst-api-examples/#get-transaction-bytes","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getTransactionBytes&transaction=3120851314369640207 Response: { \"unsignedTransactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\", \"requestProcessingTime\": 0, \"confirmations\": 7, \"transactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\" }","title":"Get Transaction Bytes"},{"location":"en/the-burst-api-examples/#parse-transaction","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=parseTransaction&transactionBytes=01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b00000000000000000000000000000000000000000000000000000000000000000000000000dc2503584a48e30ac62d62848f58461e0e9ff55070008743c24f380c24a9ef05525c70b5d40962566f3f4de2018277ba7956eb09d0aec84219784de7f3b76f6a0100000003ac07005ac8e8794cc6d21001210000805468697320697320612073656e644d65737361676520415049206578616d706c65 Response: { \"senderPublicKey\": \"a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12\", \"signature\": \"dc2503584a48e30ac62d62848f58461e0e9ff55070008743c24f380c24a9ef05525c70b5d40962566f3f4de2018277ba7956eb09d0aec84219784de7f3b76f6a\", \"feeNQT\": \"735000\", \"requestProcessingTime\": 238, \"type\": 1, \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"version\": 1, \"ecBlockId\": \"1212249281481197658\", \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"attachment\": { \"version.Message\": 1, \"messageIsText\": true, \"message\": \"This is a sendMessage API example\" }, \"senderRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"subtype\": 0, \"amountNQT\": \"0\", \"sender\": \"16922903237994405232\", \"recipientRS\": \"BURST-L6FM-89WK-VK8P-FCRBB\", \"recipient\": \"15323192282528158131\", \"ecBlockHeight\": 502787, \"verify\": true, \"deadline\": 24, \"transaction\": \"3120851314369640207\", \"timestamp\": 121620814, \"height\": 2147483647 }","title":"Parse Transaction"},{"location":"en/the-burst-api-examples/#sign-transaction","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=signTransaction&unsignedTransactionBytes=01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000003ac07005ac8e8794cc6d21001210000805468697320697320612073656e644d65737361676520415049206578616d706c65&secretPhrase=IWontTellYou Response: { \"signatureHash\": \"2bcbafeab7a0bae40337fe34adea84110b1f770a33841c95f3fe9e19dde41bae\", \"verify\": true, \"requestProcessingTime\": 2, \"transactionBytes\": \"01104ec93f071800a61325eec9e83d7cac55544b8eca8ea8034559bafb5834b8a5d3b6d4efb85f12b31119f931eaa6d4000000000000000018370b*\", \"fullHash\": \"0f37d045bc7d4f2bd85cb565a5c4e575464ac387b986f80fb8c31635cf03923e\", \"transaction\": \"3120851314369640207\" }","title":"Sign Transaction"},{"location":"en/the-burst-api-examples/#utilities","text":"","title":"Utilities"},{"location":"en/the-burst-api-examples/#long-convert","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=longConvert&id=16922903237994405232 Response: { \"stringId\": \"16922903237994405232\", \"requestProcessingTime\": 0, \"longId\": \"-1523840835715146384\" }","title":"Long Convert"},{"location":"en/the-burst-api-examples/#rs-convert","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=rsConvert&account=16922903237994405232 Response: { \"accountRS\": \"BURST-FRDJ-UPLH-MY9A-GUKQP\", \"requestProcessingTime\": 0, \"account\": \"16922903237994405232\" }","title":"RS Convert"},{"location":"en/the-burst-api-examples/#mining","text":"","title":"Mining"},{"location":"en/the-burst-api-examples/#get-mining-info","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getMiningInfo Response: { \"generationSignature\": \"2cfe207000274ed4194fc32699ab4265a3c8698d31aa169c24e87ef51b1dd985\", \"baseTarget\": \"53922\", \"requestProcessingTime\": 0, \"height\": \"562666\" }","title":"Get Mining Info"},{"location":"en/the-burst-api-examples/#get-accounts-with-reward-recipient","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountsWithRewardRecipient&account=BURST-S8Z2-TQ7W-ECVP-FM4FP Response: { \"accounts\": [ \"9999020599272053507\", \"14978592240935099976\", \"2218446457340567982\", \"2413156362128439728\", \"2726459462890839466\", \"4007570020057677303\", \"4440732188425076111\", \"7113578903125529023\", \"7563608324197478590\", \"8380834105937589772\", \"8413162550188879456\", \"9137291541131717436\", \"15759313138355018720\" ], \"requestProcessingTime\": 3 }","title":"Get Accounts With Reward Recipient"},{"location":"en/the-burst-api-examples/#get-reward-recipient","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getRewardRecipient&account=BURST-FRDJ-UPLH-MY9A-GUKQP Response: { \"rewardRecipient\": \"16922903237994405232\", \"requestProcessingTime\": 1 }","title":"Get Reward Recipient"},{"location":"en/the-burst-api-examples/#automated-transactions","text":"","title":"Automated Transactions"},{"location":"en/the-burst-api-examples/#get-account-ats","text":"Request https://wallet1.burst-team.us:2083/burst?requestType=getAccountATs&account=BURST-35LY-PRT7-A9MR-A3LNQ Response: { \"ats\": [ { \"atVersion\": 1, \"creator\": \"10039158734712770142\", \"creatorRS\": \"BURST-35LY-PRT7-A9MR-A3LNQ\", \"stopped\": true, \"machineCode\": \"350003000000002501000000350004020000002102000000030000004f35010304*\", \"description\": \"this is my first time using the crowdfunding thing. just want to see if it works.Crowdfund\", \"machineData\": \"0000000000000000c04e000000000000000000000000000000aea68f02*\", \"frozen\": false, \"finished\": false, \"dead\": false, \"balanceNQT\": \"0\", \"nextBlock\": 559302, \"minActivation\": \"700000000\", \"running\": false, \"at\": \"8736107560017092008\", \"name\": \"justtryingthisout\", \"atRS\": \"BURST-SRFA-KAX8-SQ29-959HL\", \"prevBalanceNQT\": \"0\", \"creationBlock\": 559302 } ], \"requestProcessingTime\": 4 }","title":"Get Account ATs"},{"location":"en/the-burst-api/","text":"The documentation here refers to the version or later. Description The Burst API allows interaction with Burst nodes using HTTP requests to port 8125. Most HTTP requests can use either the GET or POST methods, but some API calls accept only the POST method for security reasons. Responses are returned as JSON objects. Each API call is documented below, with definitions given for HTTP request parameters and JSON response fields, followed by an example: The JSON response fields are each followed by one of S for string, A for array, O for object, N for number or B for boolean. In the examples, the Burst node is represented as localhost and requests and responses are formatted for easy reading; line breaks and spaces are not actually used except in some parameter values. All requests are in URL format which implies the HTTP GET method. When GET is allowed, the URL can be entered into a browser URL field but proper URL encoding is usually required (e.g., spaces in a parameter value must be replaced by + or %20 ). Otherwise, the URL should be used as a guide to preparing an HTTP POST request using cURL, for example. All API calls can be viewed and tested on the TestNet at https://wallet.dev.burst-test.net/test . For specific API calls, use the GET url https://wallet.dev.burst-test.net/burst?requestType = specificRequestType . General Notes Genesis Block Many API requests make reference to the . Flexible Account IDs All API requests that require an account ID accept either an account number or the corresponding Reed-Solomon address . Quantity Units BURST, NQT and QNT The Burst system has a currency BURST used to quantify value in the system. Like all currencies, BURST circulates in the system, moving from one user to another by payments and purchases. Also, a small fee is required for every transaction, including those in which no BURST is transfered, such as simple messages. This fee goes to the owner of the node that forges (generates) the new block containing the transaction that is accepted onto the blockchain. Yet internally, the currency is still stored in integer form in units of NQT or NxtQuant, where 1 BURST = 10 8 NQT. All parameters and fields in the API involving a quantity of BURST are denominated in units of NQT, for example feeNQT . The only exception is the field effectiveBalanceNXT , used in forging calculations. Other assets can be created within Burst using Issue Asset . The issuer must specify the number of decimal places to use in quantifying the asset, and the amount of the asset to create in generic units of QNT or Quant, distinct from NQT. Quantities of assets are stored internally as integers in units of QNT, and assets are priced in NQT per QNT. Decimal (BURST) Canonical Name Alternate Name NQT 1 .00000000 BURST Burst 100,000,000 0.0 1 000000 cBURST Bessie 1,000,000 0.00 1 00000 mBURST - 100,000 0.0000 1 000 - Maybel 1,000 0.00000 1 00 uBURST - 100 0.0000000 1 - Planck 1 0.12345678 digit reference - - Creating Unsigned Transactions All API requests that create a new transaction will accept either a secretPhrase or a publicKey parameter: If secretPhrase is supplied, a transaction is created, signed at the server, and broadcast by the server as usual. If only a publicKey parameter is supplied as a 64-digit (32-byte) hex string, the transaction will be prepared by the server and returned in the JSON response as transactionJSON without a signature. This JSON object along with secretPhrase can then be supplied to Sign Transaction as unsignedTransactionJSON and the resulting signed transactionJSON can then be supplied to Broadcast Transaction . This sequence allows for offline signing of transactions so that secretPhrase never needs to be exposed. unsignedTransactionBytes may be used instead of unsigned transactionJSON when there is no encrypted message. Messages to be encrypted require the secretPhrase for encryption and so cannot be included in unsignedTransactionBytes . Escrow Operations All API requests that create a new transaction will accept an optional referencedTransactionFullHash parameter which creates a chained transaction, meaning that the new transaction cannot be confirmed unless the referenced transaction is also confirmed. This feature allows a simple way of transaction escrow: Alice prepares and signs a transaction A, but doesn't broadcast it by setting the broadcast parameter to false . She sends to Bob the unsignedTransactionBytes , the fullHash of the transaction, and the signatureHash . All of those are included in the JSON returned by the API request. (Warning: make sure not to send the signed transactionBytes , or the signature itself, as then Bob can just broadcast transaction A himself). Bob prepares, signs and broadcasts transaction B, setting the referencedTransactionFullHash parameter to the fullHash of A provided by Alice. He can verify that this hash indeed belongs to the transaction he expects from Alice, by using Calculate Full Hash , which takes unsignedTransactionBytes and signatureHash (both of which Alice has also sent to Bob). He can also use Parse Transaction to decode the unsigned bytes and inspect all transaction fields. Transaction B is accepted in the unconfirmed transaction pool, but as long as A is still missing, B will not be confirmed, i.e. will not be included in the blockchain. If A is never submitted, B will eventually expire -- so Bob should make sure to set a long enough deadline, such as the maximum of 32767 minutes. Once in the unconfirmed transactions pool, Bob has no way of recalling B back. So now Alice can safely submit her transaction A, by just broadcasting the signedTransactionBytes she got in the first step. Transaction A will get included in the blockchain first, and in the next block Bob's transaction B will also be included. Note that while the above scheme is good enough for a simple escrow, the blockchain does not enforce that if A is included, B will also be included. It may happen due to forks and blockchain reorganization, that B never gets a chance to be included and expires unconfirmed, while A still remains in the blockchain. However, it is not practically possible for Bob to intentionally cause such chain of events and to prevent B from being confirmed. Prunable Data Prunable data can be removed from the blockchain without affecting the integrity of the blockchain. When a transaction containing prunable data is created, only the 32-byte sha256 hash of the prunable data is included in the transactionBytes , not the prunable data itself. The non-prunable signed transactionBytes are used to verify the signature and to generate the transaction's fullHash and ID; when the prunable part of the transaction is removed at a later time, none of these operations are affected. Prunable data has a predetermined minimum lifetime of two weeks (24 hours on the Testnet ) from the timestamp of the transaction. Transactions and blocks received from peer nodes are not accepted if prunable data is missing before this time has elapsed. After this time has elapsed, prunable data is no longer included with transactions and blocks transmitted to peer nodes, and is no longer included in the transaction JSON returned by general-purpose API calls such as Get Transaction; the only way to retrieve it, if still available, is through special-purpose API calls such as Get Prunable Message. Expired prunable data remains stored in the blockchain until removed at the same time derived tables are trimmed, which occurs automatically every 1000 blocks by default. Prunable data can be preserved on a node beyond the predetermined minimum lifetime by setting the nxt.maxPrunableLifetime property to a larger value than two weeks or to -1 to preserve it indefinitely. To force the node to include such preserved prunable data when transactions and blocks are transmitted to peer nodes, set the nxt.includeExpiredPrunables property to true , thus making it an archival node. Currently, there is only one variety of prunable data in the Burst system: prunable Arbitrary Messages . It has a maximum prunable data length of 42 kilobytes. Properties Files The behavior of some API calls is affected by property settings loaded from files in the brs/conf directory during Burst server intialization. This directory contains the brs-default.properties and logging-default.properties files, both of which contain default property settings along with documentation. A few of the property settings can be obtained while the server is running through the Get Blockchain Status and Get State calls. It is recommended not to modify default properties files because they can be overwritten during software updates. Instead, properties in the default files can be overridden by including them in optional brs.properties and logging.properties files in the same directory. For example, a brs.properties file can be created with the content: DEV.TestNet = yes This causes the Burst server to connect to the TestNet instead of the MainNet. Create Transaction The following API calls create Burst transactions using HTTP POST requests. Follow the links for examples and HTTP POST request parameters specific to each call. Refer to the sections below for HTTP POST request parameters and JSON response fields common to all calls that create transactions. Send Money Set Account Info Buy / Sell Alias Set Alias Send Message Cancel Order Issue Asset Place Order Transfer Asset DGS Delisting DGS Delivery DGS Feedback DGS Listing DGS Purchase DGS Quantity Change DGS Refund Lease Balance Create Transaction Request The following HTTP POST parameters are common to all API calls that create transactions: For feeNQT , please refer to the following \u201crules\u201d: minimum 1000 BURST for Issue Asset , unless singleton asset is issued, for which the fee is 1 BURST 2 BURST in base fee for Set Alias , with 2 BURST additional fee for each 32 chars of name plus URI total length, after the first 32 chars 1 BURST for the first 32 bytes of a unencrypted non-prunable message , 1 BURST for each additional 32 bytes 2 BURST for the first 32 bytes of an encrypted non-prunable message , 1 BURST for each additional 32 bytes. The length is measured excluding the nonce and the 16 byte AES initialization vector. 1 BURST for the first 1024 bytes of a prunable message , 0.1 BURST for each additional 1024 prunable bytes 1 BURST for Set Account Info , including 32 chars, with 2 BURST additional fee for each 32 chars 2 BURST for DGS Listing , including 32 chars of name plust description. With 2 BURST additional fee for each 32 chars. 1 BURST for DGS Delivery , including 32 bytes of encrypted goods data (AES initialization bytes and nonce excluded). With 2 BURST additional fee for each 32 bytes. 2 BURST for transactions that make use of referencedTransactionFullHash property when creating a new transaction. Dynamic tx fee otherwise, where 1 BURST = 100000000 NQT Tx no Tx fees 1 0.00735 100 0.73500 255 1.87425 510 3.74850 765 5.62275 1020 7.49700 Note: An optional arbitrary message can be appended to any transaction by adding message-related parameters as in Send Message . Create Transaction Response The following JSON response fields are common to all API calls that create transactions: Account Operations Get Account Get account information given an account ID. Response: Example: Refer to Get Account example. Get Account Block Ids Get the block IDs of all blocks forged (generated) by an account in reverse block height order. Response: Get Account Blocks Get all blocks forged (generated) by an account in reverse block height order. Response: Get Account Id Get an account ID given a secret passphrase or public key. POST only. Response: Example: Refer to Get Account Id example. Get Account Lessors Get the lessors to an account. Note: If table trimming is enabled (default), the height must be within 1440 blocks of the last block. Response: lessorRS (S) lessor (S) guaranteedBalanceNQT (S) Example: Refer to Get Account Lessors example. Get Account Public Key Get the public key associated with an account ID. Response: Example: Refer to Get Account Public Key example. Get Account Transaction Ids Get the transaction IDs associated with an account in reverse block timestamp order. This call only returns non-phased transactions as of Version 1.5.7e and is deprecated, to be removed in version 1.6. Use Get Blockchain Transactions instead. Note: Refer to Get Constants for definitions of types and subtypes Response: Example: Refer to Get Account Transaction Ids example. Get Account Transactions Get the transactions associated with an account in reverse block timestamp order. This call only returns non-phased transactions as of Version 1.5.7e and is depricated, to be removed in version 1.6. Use Get Blockchain Transactions instead. Note: Refer to Get Constants for definitions of types and subtypes Response: Example: Refer to Get Account Transactions example. Get Balance Get the balance of an account. Request: Response: Example: Refer to Get Balance example. Get Guaranteed Balance Get the balance of an account that is confirmed at least a specified number of times. Response: Example: Refer to Get Guaranteed Balance example. Get Unconfirmed Transaction Ids Get a list of unconfirmed transaction IDs associated with an account. Request: Response: Example: Refer to Get Unconfirmed Transaction Ids example. Get Unconfirmed Transactions Get a list of unconfirmed transactions associated with an account. Response: Example: Refer to Get Unconfirmed Transactions example. Send Money Send BURST to an account. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . Example: Refer to Send Money example. Send Money Multi Send individual amounts of BURST to up to 64 recipients. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . Example: To do Send Money Multi Same Send the same amount of BURST to up to 128 recipients. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . Example: To do Set Account Info Set account information. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . Example: Refer to Set Account Info example. Alias Operations Buy / Sell Alias Buy or sell an alias. POST only. Refer to Create Transaction Request for common parameters. Note : An alias can be transferred rather than sold by setting priceNQT to zero. A pending sale can be canceled by selling again to self for a price of zero. Response: Refer to Create Transaction Response . Example: Refer to Buy / Sell Alias example. Set Alias Create and/or assign an alias. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . The transaction ID is also the alias ID. Example: Refer to Set Alias example. Get Alias Get information about a given alias. Response: Example: Refer to Get Alias example. Get Aliases Get information on aliases owned by a given account in alias name order. Response: Example: Refer to Get Aliases example. Arbitrary Message System Operations Decrypt From Decrypt an AES-encrypted message. Request: requestType is decryptFrom secretPhrase is the secret passphrase of the recipient account is the account ID of the recipient data is AES-encrypted data nonce is the unique nonce associated with the encrypted data decryptedMessageIsText is false if the decrypted message is a hex string, otherwise the decrypted message is text (optional) uncompressDecryptedMessage is false to prevent gzip uncompression after decryption (optional) Response: decryptedMessage (S) is the decrypted message requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Decrypt From example. Encrypt To Encrypt a message using AES without sending it. Request: requestType is encryptTo secretPhrase is the secret passphrase of the sender recipient is the account ID of the recipient messageToEncrypt is either UTF-8 text or a string of hex digits to be compressed and converted into a 1000 byte maximum bytecode then encrypted using AES messageToEncryptIsText is false if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional) compressMessageToEncrypt is false to prevent gzip compression before encryption (optional) Response: data (S) is the AES-encrypted data nonce (S) is a 32-byte pseudorandom nonce requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Encrypt To example. Read Message Get a message given a transaction ID. Request: requestType is readMessage transaction is the transaction ID of the message secretPhrase is the secret passphrase of the account that received the message (optional) sharedKey is the shared key used to decrypt the message (optional) (see Get Shared Key ) retrieve is true to retrieve pruned data from archival nodes (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: messageIsPrunable (B) is true if there is a plain message and it is prunable, false if it is not prunable message (S) is the plain message, if applicable encryptedMessageIsPrunable (B) is true if there is an encrypted message and it is prunable, false if it is not prunable decryptedMessage (S) is the decrypted message, if applicable and only if the provided secretPhrase belongs to either the sender or receiver of the transaction decryptedMessageToSelf (S) is the decrypted message sent to self, if applicable and only if the provided secretPhrase belongs to the sender of transaction lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Read Message example. Send Message Create an Arbitrary Message transaction. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is sendMessage recipient is the account ID of the recipient (optional) recipientPublicKey is the public key of the receiving account (optional, enhances security of a new account) message is either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte, 42 kilobytes if prunable (optional) messageIsText is false if the message is a hex string, otherwise the message is text (optional) messageIsPrunable is true if the message is prunable (optional) messageToEncrypt is either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false ) and converted into a bytecode with a maximum length of one kilobyte, 42 kilobytes if prunable, then encrypted using AES (optional) messageToEncryptIsText is false if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional) encryptedMessageData is already encrypted data which overrides messageToEncrypt if provided (optional) encryptedMessageNonce is a unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided) encryptedMessageIsPrunable is true if the encrypted message is prunable (optional) compressMessageToEncrypt is false to prevent gzip compression before encryption (optional) messageToEncryptToSelf is either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional) messageToEncryptToSelfIsText is false if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional) encryptToSelfMessageData is already encrypted data which overrides messageToEncryptToSelf if provided (optional) encryptToSelfMessageNonce is a unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided) compressMessageToEncryptToSelf is false to prevent gzip compression before encryption (optional) Note: Any combination (including none or all) of the three options plain message , messageToEncrypt , and messageToEncryptToSelf will be included in the transaction. However, one and only one prunable message may be included in a single transaction if there is not already a message of the same type (either plain or encrypted). Note: The encryptedMessageData-encryptedMessageNonce pair or the encryptToSelfMessageData-encryptToSelfMessageNonce pair can be the output of Encrypt To Response: Refer to Create Transaction Response . Example: Refer to Send Message example. Asset Exchange Operations Cancel Order Cancel an existing asset order. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is either cancelBidOrder or cancelAskOrder order is the order ID of the order being canceled Response: Refer to Create Transaction Response . Example: Refer to Cancel Order example. Cancel Ask Order Refer to Cancel Order . Cancel Bid Order Refer to Cancel Order . Get Account Current Order Ids Get current asset order IDs given an account ID in reverse block height order. Request: requestType is either getAccountCurrentBidOrderIds or getAccountCurrentAskOrderIds account is the account ID asset is an asset ID filter (optional) firstIndex is a zero-based index to the first order ID to retrieve (optional) lastIndex is a zero-based index to the last order ID to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: bidOrderIds or askOrderIds (A) is an array of order IDs lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Account Current Order Ids example. Get Account Current Ask Order Ids Refer to Get Account Current Order Ids . Get Account Current Bid Order Ids Refer to Get Account Current Order Ids . Get Account Current Orders Get current asset orders given an account ID in reverse block height order. Request: requestType is either getAccountCurrentBidOrders or getAccountCurrentAskOrders account is the account ID asset is an asset ID filter (optional) firstIndex is a zero-based index to the first order to retrieve (optional) lastIndex is a zero-based index to the last order to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: bidOrders or askOrders (A) is an array of order objects (refer to Get Order for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Account Current Orders example. Get Account Current Ask Orders Refer to Get Account Current Orders . Get Account Current Bid Orders Refer to Get Account Current Orders . Get All Assets Get all assets in the exchange in reverse block height of creation order. Request: requestType is getAllAssets firstIndex is a zero-based index to the first asset to retrieve (optional) lastIndex is a zero-based index to the last asset to retrieve (optional) includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: assets (A) is an array of asset objects (refer to Get Asset ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get All Assets example. Get All Open Orders Get all open bid/ask orders in reverse block height order. Request: requestType is either getAllOpenBidOrders or getAllOpenAskOrders firstIndex is a zero-based index to the first order to retrieve (optional) lastIndex is a zero-based index to the last order to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: openOrders (A) is an array of order objects (refer to Get Order for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get All Open Orders example. Get All Open Ask Orders Refer to Get All Open Orders . Get All Open Bid Orders Refer to Get All Open Orders . Get All Trades Get all trades since a given timestamp in reverse block height order. Request: requestType is getAllTrades timestamp is the timestamp (in seconds since the genesis block) to begin retrieving trades (optional, default 0) firstIndex is a zero-based index to the first trade to retrieve (optional) lastIndex is a zero-based index to the last trade to retrieve (optional) includeAssetInfo is true if asset information is to be included in the result (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: If timestamp is omitted or zero, and no index is given, all trades in the entire blockchain will be retrieved, which may timeout or crash your system. Response: trades (A) is an array of trade objects (refer to Get Trades ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get All Trades example. Get Asset Get asset information given an asset ID. Request: requestType is getAsset asset is the asset ID includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: account (S) is the number of the account that issued the asset accountRS (S) is the Reed-Solomon address of the account that issued the asset name (S) is the asset name description (S) is the asset description quantityQNT (S) is the total asset quantity (in QNT) in existence asset (N) is the asset ID decimals (N) is the number of decimal places used by the asset numberOfAccounts (N) is the number of accounts that own the asset numberOfTrades (N) is the number of trades of this asset numberOfTransfers (N) is the number of transfers of this asset lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Asset example. Get Asset Accounts Get the accounts that own an asset given the asset ID in reverse quantity order. Request: requestType is getAssetAccounts asset is the asset ID height is the height of the blockchain to determine the accounts (optional, default is last block) firstIndex is a zero-based index to the first account to retrieve (optional) lastIndex is a zero-based index to the last account to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: If table trimming is enabled (default), the height must be within 1440 blocks of the last block. Response: accountAssets (A) is an array of asset objects with the following fields for each asset: quantityQNT (S) is the quantity (in QNT) of the asset accountRS (S) is the Reed-Solomon address of the account that owns the asset unconfirmedQuantityQNT (S) is the unconfirmed quantity (in QNT) of the asset asset (S) is the asset ID account (S) is the number of the account that owns the asset lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Asset Accounts example. Get Asset Ids Get the IDs of all assets in the exchange in reverse block height of creation order. Request: requestType is getAssetIds firstIndex is a zero-based index to the first asset ID to retrieve (optional) lastIndex is a zero-based index to the last asset ID to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: assets (A) is an array of asset IDs lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Asset Ids example. Get Asset Transfers Get transfers associated with a given asset and/or account in reverse block height order (or in the expected order of execution for expected transfers). Request: requestType is either getAssetTransfers or getExpectedAssetTransfers , where expected transfers are from the unconfirmed transactions pool or are phased transactions scheduled to finish in the next block asset is the asset ID (optional) account is the account ID (optional if asset provided) timestamp is the earliest transfer (in seconds since the genesis block) to retrieve (optional, does not apply to expected transfers) firstIndex is a zero-based index to the first transfer to retrieve (optional, does not apply to expected transfers) lastIndex is a zero-based index to the last transfer to retrieve (optional, does not apply to expected transfers) includeAssetInfo is true if the decimals and name fields are to be included (optional, does not apply to expected transfers) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: transfers (A) is an array of transfer objects with the following fields for each transfer: quantityQNT (S) is the quantity (in QNT) of the asset traded senderRS (S) is the Reed-Solomon address of the sender assetTransfer (S) is the transaction ID of the asset transfer sender (S) is the account number of the sender recipientRS (S) is the Reed-Solomon address of the recipient decimals (N) is the number of decimal places used by the asset (if includeAssetInfo is true ) recipient (S) is the account number of the recipient name (S) is the name of the asset (if includeAssetInfo is true ) asset (S) is the asset ID height (N) is the height of the transfer block timestamp (N) is the timestamp (in seconds since the genesis block) of the transfer block, does not apply to an expected transfer phased (B) is true if the transaction is phased, false otherwise, applies only to an expected transfer lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Asset Transfers example. Get Expected Asset Transfers Refer to Get Asset Transfers . Get Assets Get asset information given multiple asset IDs Request: requestType is getAssets assets is one the multiple asset IDs assets is one the multiple asset IDs includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: assets (A) is an array of asset objects (refer to Get Asset ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Assets example. Get Assets By Issuer Get asset information given multiple creation account IDs in reverse block height of creation order. Request: requestType is getAssetsByIssuer account is one of the multiple account IDs account is one of the multiple account IDs firstIndex is a zero-based index to the first asset to retrieve (optional) lastIndex is a zero-based index to the last asset to retrieve (optional) includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: assets (A) is an array of asset objects (refer to Get Asset ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Assets By Issuer example. Get Order Get a bid/ask order given an order ID. Request: requestType is either getBidOrder or getAskOrder order is the Order ID requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: account (S) is the account number associated with the order accountRS (S) is the Reed-Solomon address of the account asset (S) is the ID of the asset being ordered quantityQNT (S) is the order quantity (in QNT) priceNQT (S) is the order price (in NQT) height (N) is the block height of the order transaction transactionHeight (N) is the transaction height transactionIndex (N) is a zero-based index giving the order of the transaction in its block order (S) is the ID of the order type (S) is the type of order ( bid or ask ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Order example. Get Ask Order Refer to Get Order . Get Bid Order Refer to Get Order . Get Order Ids Get bid/ask order IDs given an asset ID, in order of decreasing bid price or increasing ask price. Request: requestType is either getBidOrderIds or getAskOrderIds asset is the asset ID firstIndex is a zero-based index to the first order ID to retrieve (optional) lastIndex is a zero-based index to the last order ID to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: bidOrderIds or askOrderIds (A) is an array of order IDs lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Order Ids example. Get Ask Order Ids Refer to Get Order Ids . Get Bid Order Ids Refer to Get Order Ids . Get Orders Get bid/ask orders given an asset ID, in order of decreasing bid price or increasing ask price (if sortByPrice is true for expected orders, otherwise in the expected order of execution). Request: requestType is one of getBidOrders , getAskOrders , where expected orders are from the unconfirmed transactions pool or are phased transactions scheduled to finish in the next block asset is the asset ID sortByPrice is true to sort by price (optional, applies only to expected orders, which are returned in expected order of execution by default) showExpectedCancellations is true to include orders that are expected to be cancelled in the next block, based on the content of the unconfirmed transactions pool and the phased transactions expected to finish in the next block (optional, does not apply to expected orders) firstIndex is a zero-based index to the first order to retrieve (optional, does not apply to expected orders) lastIndex is a zero-based index to the last order to retrieve (optional, does not apply to expected orders) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: bidOrders or askOrders (A) is an array of order objects (refer to Get Order for details) with the following additional field only for an expected order: phased (B) is true if the order is phased, false otherwise lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Orders example. Get Ask Orders Refer to Get Orders . Get Bid Orders Refer to Get Orders . Get Trades Get trades associated with a given asset and/or account in reverse block height order. Request: requestType is getTrades asset is the asset ID (optional) account is the account ID (optional if asset provided) firstIndex is a zero-based index to the first trade to retrieve (optional) lastIndex is a zero-based index to the last trade to retrieve (optional) timestamp is the earliest block (in seconds since the genesis block) to retrieve (optional) includeAssetInfo is true if the decimals and name fields are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: trades (A) is an array of trade objects with the following fields for each trade: seller (S) is the account number of the seller quantityQNT (S) is the quantity (in QNT) of the asset traded bidOrder (S) is the bid order ID sellerRS (S) is the Reed-Solomon address of the seller buyer (S) is the account number of the buyer priceNQT (S) is the trade price (in NQT, the ask price for a buy or the bid price for a sell) askOrder (S) is the ask order ID buyerRS (S) is the Reed-Solomon address of the buyer decimals (N) is the number of decimal places used by the asset name (S) is the name of the asset (if includeAssetInfo is true ) block (S) is the block ID of the trade (if includeAssetInfo is true ) asset (S) is the asset ID askOrderHeight (N) is the block height of the ask order bidOrderHeight (N) is the block height of the bid order tradeType (S) is the trade type ( sell or buy , where buy implies that the bid occurred after the ask, or if in the same block, has a greater order ID) timestamp (N) is the timestamp (in seconds since the genesis block) of the trade block height (N) is the height of the trade block lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Trades example. Issue Asset Create an asset on the exchange. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is issueAsset name is the name of the asset description is a url-encoded description of the asset in UTF-8 with a maximum length of 1000 bytes (optional) quantityQNT is the total amount (in QNT) of the asset in existence decimals is the number of decimal places used by the asset (optional, zero default) Response: Refer to Create Transaction Response . The transaction ID is also the asset ID. Example: Refer to Issue Asset example. Place Order Place an asset order. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is either placeBidOrder or placeAskOrder asset is the asset ID of the asset being ordered quantityQNT is the amount (in QNT) of the asset being ordered priceNQT is the bid/ask price (in NQT) Response: Refer to Create Transaction Response . The transaction ID is also the order ID. Example: Refer to Place Order example. Place Ask Order Refer to Place Order . Place Bid Order Refer to Place Order . Transfer Asset Transfer a quantity of an asset from one account to another. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is transferAsset recipient is the recipient account ID recipientPublicKey is the public key of the recipient account (optional, enhances security of a new account) asset is the ID of the asset being transferred quantityQNT is the amount (in QNT) of the asset being transferred Response: Refer to Create Transaction Response . The transaction ID is also the transfered asset ID. Example: Refer to Transfer Asset example. Block Operations Get Block Get a block object given a block ID or block height. Request: requestType is getBlock block is the block ID (optional) height is the block height (optional if block provided) timestamp is the timestamp (in seconds since the genesis block) of the block (optional if height provided) includeTransactions is true to include transaction details (optional) includeExecutedPhased is true to include approved and executed phased transactions (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: block overrides height which overrides timestamp . Response: previousBlockHash (S) is the 32-byte hash of the previous block payloadLength (N) is the length (in bytes) of all transactions included in the block totalAmountNQT (S) is the total amount (in NQT) of the transactions in the block generationSignature (S) is the 32-byte generation signature of the generating account generator (S) is the generating account number generatorPublicKey (S) is the 32-byte public key of the generating account baseTarget (S) is the base target for the next block generation payloadHash (S) is the 32-byte hash of the payload (all transactions) generatorRS (S) is the Reed-Solomon address of the generating account nextBlock (S) is the next block ID numberOfTransactions (N) is the number of transactions in the block blockSignature (S) is the 64-byte block signature transactions (A) is an array of transaction IDs or transaction objects (if includeTransactions provided, refer to Get Transaction for details) executedPhasedTransactions (A) is an array of transaction IDs or transaction objects (if includeExecutedPhased provided, refer to Get Transaction for details) version (N) is the block version totalFeeNQT (S) is the total fee (in NQT) of the transactions in the block previousBlock (S) is the previous block ID cumulativeDifficulty (S) is the cumulative difficulty for the next block generation block (S) is the block ID height (N) is the zero-based block height timestamp (N) is the timestamp (in seconds since the genesis block) of the block lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Block example. Get Block Id Get a block ID given a block height. Request: requestType is getBlockId height is the block height requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: block (S) is the block ID lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Block Id example. Get Blocks Get blocks from the blockchain in reverse block height order. Request: requestType is getBlocks timestamp is the earliest block (in seconds since the genesis block) to retrieve (optional) firstIndex is first block to retrieve (optional, default is zero or the last block on the blockchain) lastIndex is the last block to retrieve (optional, default is firstIndex + 99) includeTransactions is true to include transaction details (optional) includeExecutedPhased is true to include approved and executed phased transactions (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: blocks (A) is an array of blocks retrieved (refer to Get Block for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Blocks example. Get EC Block Get Economic Cluster block data. Request: requestType is getECBlock timestamp is the timestamp (in seconds since the genesis block) of the EC block (optional, default (or zero) is the current timestamp) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: If timestamp is more than 15 seconds before the timestamp of the last block on the blockchain, errorCode 4 is returned. Response: ecBlockHeight (N) is the EC block height ecBlockId (S) is the EC block ID timestamp (N) is the timestamp (in seconds since the genesis block) of the EC block lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get EC Block example. Digital Goods Store Operations In the Burst client interface , the Digital Goods Store (DGS) is referred to as Marketplace . DGS Delisting Delist a listed product. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsDelisting goods is the goods ID Response: Refer to Create Transaction Response . Example: Refer to DGS Delisting example. DGS Delivery Deliver a product. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsDelivery purchase is the purchase order ID discountNQT is a discount (in NQT) off the selling price (optional, default is zero) goodsToEncrypt is the product, a text or a hex string to be encrypted (optional if goodsData provided) goodsIsText is false if goodsToEncrypt is a hex string (optional) goodsData is AES-encrypted (using Encrypt To ) goodsToEncrypt , up to 1000 bytes long (required only if secretPhrase is omitted) goodsNonce is the unique nonce associated with the encrypted data (required only if secretPhrase is omitted) Note: If the encrypted goods data is longer than 1000 bytes, use a prunable encrypted message to deliver the goods. Response: Refer to Create Transaction Response . Example: Refer to DGS Delivery example. DGS Feedback Give feedback about a purchased product after delivery. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsFeedback purchase is the purchase order ID message is unencrypted (public) feedback text up to 1000 bytes Note : The unencrypted message parameter is used for public feedback, but in addition or instead, an encrypted message can be used for private feedback to the seller and/or an encrypted message can be sent to self (buyer) although the current BRS client does not recognize non-public feedback messages. Response: Refer to Create Transaction Response . Example: Refer to DGS Feedback example. DGS Listing List a product in the DGS by creating a listing transaction. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsListing name is the name of the product up to 100 characters in length description is a description of the product up to 1000 characters in length tags are up to three comma separated keywords describing the product up to 100 characters in length (optional) quantity is the quantity of the product for sale priceNQT is the price (in NQT) of the product Response: Refer to Create Transaction Response . The transaction ID is also the goods ID. Example: Refer to DGS Listing example. DGS Price Change Change the price of a listed product. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsPriceChange goods is the goods ID of the product priceNQT is the new price of the product Response: Refer to Create Transaction Response . Example: Refer to DGS Price Change example. DGS Purchase Purchase a product for sale. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsPurchase goods is the goods ID of the product priceNQT is the price of the product quantity is the quantity to be purchased deliveryDeadlineTimestamp is the timestamp (in seconds since the genesis block) by which delivery of the product must occur Response: Refer to Create Transaction Response . The transaction ID is also the purchase order ID. Example: Refer to DGS Purchase example. DGS Quantity Change Change the quantity of a listed product. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsQuantityChange goods is the goods ID of the product deltaQuantity is the change in the quantity of the product for sale (use negative numbers for a decrease in quantity) Response: Refer to Create Transaction Response . Example: Refer to DGS Quantity Change example. DGS Refund Refund a purchase. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsRefund purchase is the purchase order ID refundNQT is the amount (in NQT) of the refund Response: Refer to Create Transaction Response . Example: Refer to DGS Refund example. Get DGS Good Get a DGS product given a goods ID. Request: requestType is getDGSGood goods is the goods ID of the product includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: seller (S) is the seller's account ID quantity (N) is the quantity of the product remaining for sale goods (S) is the ID of the product description (S) is the description of the product sellerRS (S) is the Reed-Solomon address of the seller's account requestProcessingTime (N) is the API request processing time (in millisec) delisted (B) is true if the product has been delisted, false otherwise parsedTags (A) is an array of up to three tag strings, parsed from the tags field tags (S) is the comma separated list of tags provided by the seller when the listing was created priceNQT (S) is the current price of the product numberOfPublicFeedbacks (N) is the number of public feedbacks given for the product name (S) is the name of the product numberOfPurchases (N) is the number of purchases of the product timestamp (N) is the timestamp (in seconds since the genesis block) of the creation of the product listing lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) Example: Refer to Get DGS Good example. Get DGS Goods Get DGS products for sale in reverse chronological listing creation order unless a seller is given, then in product name order. Request: requestType is getDGSGoods seller is the account ID of the product seller (optional) firstIndex is a zero-based index to the first product to retrieve (optional) lastIndex is a zero-based index to the last product to retrieve (optional) inStockOnly is false if out-of-stock products (zero quantity) are to be retrieved (optional) hideDelisted is true if delisted products are to be omitted (optional) includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: If none of the optional parameters are specified, all in-stock products in the blockchain are retrieved at once, which may take a long time. Response: goods (A) is an array of goods (refer to Get DGS Good for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get DGS Goods example. Get DGS Pending Purchases Get pending purchase orders given a seller ID in reverse chronological order. Request: requestType is getDGSPendingPurchases seller is the account ID of the seller firstIndex is a zero-based index to the first purchase order to retrieve (optional) lastIndex is a zero-based index to the last purchase order to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: purchases (A) is an array of pending purchase orders (refer to Get DGS Purchase for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get DGS Pending Purchases example. Get DGS Purchase Get a purchase order given a purchase order ID. Request: requestType is getDGSPurchase purchase is the purchase order ID sharedKey is the shared key used to decrypt the message (optional) (see Get Shared Key ) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: seller (S) is the account number of the seller quantity (N) is the quantity of the product to be purchased feedbackNotes (A) is an array of AES-encrypted objects, each with data (S) and nonce (S) fields, in reverse chronological order, if applicable publicFeedbacks (A) is an array of feedback strings in reverse chronological order if applicable pending (B) is true if the deliveryDeadline has not passed, false otherwise purchase (S) is the purchase order ID goods (S) is the ID of the product sellerRS (S) is the Reed-Solomon address of the seller buyer (S) is the account number of the buyer priceNQT (S) is the price (in NQT) of the product deliveryDeadlineTimestamp (N) is the timestamp (in seconds since the genesis block) by which the product must be delivered goodsIsText (B) is false if the message is a hex string, otherwise the message is text (optional) buyerRS (S) is the Reed-Solomon address of the buyer refundNQT (S) is the amount (in NQT) refunded, if applicable name (S) is the name of the product goodsData (O) is an object with the two fields data (S) (the encrypted product hex string) and nonce (S), if the product has been delivered timestamp (N) is the timestamp (in seconds since the genesis block) of the purchase order lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get DGS Purchase example. Get DGS Purchases Get purchase orders given a seller and/or buyer ID in reverse chronological order. Request: requestType is getDGSPurchases seller is the account ID of the seller (optional) buyer is the account ID of the buyer (optional if seller provided) firstIndex is a zero-based index to the purchase order to retrieve (optional) lastIndex is a zero-based index to the purchase order to retrieve (optional) withPublicFeedbacksOnly is true if purchase orders without public feedback are to be omitted (optional) completed is true if only completed purchase orders are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: purchases (A) is an array of purchase orders (refer to Get DGS Purchase for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get DGS Purchases example. Forging Operations Lease Balance Lease the entire guaranteed balance of BURST to another account, after 1440 confirmations. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is leaseBalance period is the lease period (in number of blocks, 1440 minimum) recipient is the lessee (recipient) account recipientPublicKey is the public key of the lessee (recipient) account (optional, enhances security of a new account) Response: Refer to Create Transaction Response . Example: Refer to Lease Balance example. Hallmark Operations Decode Hallmark Decode a node hallmark. Request: requestType is decodeHallmark hallmark is the hallmark value Response: valid (B) is true if host is less than 100 characters, weight > 0 and the embedded signature is verified weight (N) is the weight assigned to the hallmark host (S) is the IP address or domain name associated with the hallmark account (S) is the account number associated with the hallmark accountRS (S) is the Reed-Solomon address of the account date (S) is the date the hallmark was created, in YYYY-MM-DD format requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Decode Hallmark example. Mark Host Generates a node hallmark. POST only. Request: requestType is markHost secretPhrase is the secret passphrase for the account that will be hallmarked on the node host is the IP address or domain name of the node weight is the weight to assign to the node date is the current date in YYYY-MM-DD format Note: Refer to Create Hallmark for details. Response: hallmark (S) is the hallmark hex string requestProcessingTime (N) is the API request processing time (in millisec) Note: Refer to Create Hallmark for instructions for applying the hallmark to a public node. Example: Refer to Mark Host example. Generate Hallmark Refer to Mark Host . Networking Operations Get My Info Get hostname and address of the requesting node. Request: requestType is getMyInfo Response: host (S) is the node hostname address (S) is the node address requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get My Info example. Get Peer Get information about a given peer. Request: requestType is getPeer peer is the IP address or domain name of the peer (plus optional port) Response: hallmark (S) is the hex string of the peer's hallmark, if it is defined downloadedVolume (N) is the number of bytes downloaded by the peer address (S) the IP address or DNS name of the peer weight (N) is the peer's weight value uploadedVolume (N) is the number of bytes uploaded by the peer version (S) is the version of the software running on the peer platform (S) is a string representing the peer's platform lastUpdated (N) is the timestamp (in seconds since the genesis block) of the last peer status update blacklisted (B) is true if the peer is blacklisted services (A) is an array of strings with the services the node provides blacklistingCause (S) is the cause of blacklisting (if blacklisted is true ) announcedAddress (S) is the name that the peer announced to the network (could be a DNS name, IP address, or any other string) application (S) is the name of the software application, typically BRS state (N) defines the state of the peer: 0 for NON_CONNECTED, 1 for CONNECTED, or 2 for DISCONNECTED shareAddress (B) is true if the address is allowed to be shared with other peers inbound (B) is true if the peer has made a request to this node inboundWebSocket (B) is true if an inbound websocket has been established from this node outboundWebSocket (B) is true if an outbound websocket has been established to this node lastConnectAttempt (B) is the timestamp (in seconds since the genesis block) of the last connection attempt to the peer requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Peer example. Get Peers Get a list of peer IP addresses. Request: requestType is getPeers active is true for active (not NON_CONNECTED) peers only (optional, if true overrides state ) state is the state of the peers, one of NON_CONNECTED , CONNECTED , or DISCONNECTED (optional) includePeerInfo is true to include peer detail as in Get Peer service to filter on a specific service Note: If neither active nor state is specified, all known peers are retrieved. Response: peers (A) is an array of peer addresses requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Peers example. Server Information Operations Get Blockchain Status Get the blockchain status. Request: requestType is getBlockchainStatus Response: currentMinRollbackHeight (N) is the current minimum rollback height numberOfBlocks (N) is the number of blocks in the blockchain (height + 1) isTestnet (B) is true if the node is connected to testnet, false otherwise includeExpiredPrunable (B) is the value of the nxt.includeExpiredPrunable property requestProcessingTime (N) is the API request processing time (in millisec) version (S) is the application version maxRollback (N) is the value of the nxt.maxRollback property lastBlock (S) is the last block ID on the blockchain application (S) is application name, typically BRS isScanning (B) is true if the blockchain is being scanned by the application, false otherwise isDownloading (B) is true if a download is in progress, false otherwise; true when a batch of more than 10 blocks at once has been downloaded from a peer, reset to false when an attempt to download more blocks from a peer does not result in any new blocks cumulativeDifficulty (S) is the cumulative difficulty lastBlockchainFeederHeight (N) is the height of the last blockchain of greatest cumulative difficulty obtained from a peer maxPrunableLifetime (N) is the maximum prunable lifetime (in seconds) time (N) is the current timestamp (in seconds since the genesis block) lastBlockchainFeeder (S) is the address or announced address of the peer providing the last blockchain of greatest cumulative difficulty blockchainState (S) Current state of this node's blockchain (UP_TO_DATE or DOWNLOADING) Example: Refer to Get Blockchain Status example. Get Constants Get all defined constants. Request: requestType is getConstants Response: maxBlockPayloadLength (N) is the maximum block payload length (in bytes) maxArbitraryMessageLength (N) is the maximum length (in bytes) of an arbitrary message maxPrunableMessageLength (N) is the maximum length (in bytes) of a prunable message maxTaggedDataDataLength (N) is the maximum length (in bytes) of tagged data maxPhasingDuration (N) is the maximum allowed phasing duration in block height epochBeginning (N) is the time in milliseconds when genesis block was created genesisAccountId (S) is the genesis account number genesisBlockId (S) is the genesis block ID transactionTypes (A) is an array of defined transaction types and subtypes (refer to the example below) transactionSubTypes (A) is an array of defined transaction subtypes and subtypes (refer to the example below) peerStates (A) is an array of defined peer states (refer to the example below) currencyTypes (A) is an array of defined currency types (refer to the example below) disabledAPIs (A) is an array of configured disabled apis (refer to the example below) apiTags (A) is an array of defined api tags (refer to the example below) disabledAPITags (A) is an array of configured disabled api tags (refer to the example below) votingModels (A) is an array of defined voting models (refer to the example below) holdingTypes (A) is an array of defined holding types (refer to the example below) minBalanceModels (A) is an array of defined minimum balance models (refer to the example below) shufflingStages (A) is an array of defined shuffling stages (refer to the example below) shufflingParticipantStates (A) is an array of defined shuffling participant states (refer to the example below) hashAlgorithms (A) is an array of defined hash algorithms (refer to the example below) mintingHashAlgorithms (A) is an array of defined minting hash algorithms (refer to the example below) phasingHashAlgorithms (A) is an array of defined phasing hash algorithms (refer to the example below) requestTypes (A) is an array of decined request types (refer to the example below) Example: Refer to Get Constants example. Get State Get the state of the server node and network. Request: requestType is getState includeCounts is true if the fields beginning with numberOf... are to be included (optional); password protected like the Debug Operations if true . Response: numberOfPeers (N) is the number of known peers on the network numberOfGoods (N) is the number of DGS goods in the blockchain numberOfPolls (N) is the number of polls in the blockchain numberOfUnlockedAccounts (N) is the number of unlocked accounts on this node numberOfTransfers (N) is the number of AE transfers in the blockchain includeExpiredPrunable (B) is the value of the nxt.includeExpiredPrunable property numberOfOrders (N) is the number of AE orders in the blockchain numberOfTransactions (N) is the number of transactions in the blockchain maxMemory (N) is the maximum amount of memory the node may use (in Bytes) maxRollback (N) is the value of the nxt.maxRollback property numberOfOffers (N) is the number of buy currency offers in the blockchain isDownloading (B) is true if a download is in progress, false otherwise; true when a batch of more than 10 blocks at once has been downloaded from a peer, reset to false when an attempt to download more blocks from a peer does not result in any new blocks isScanning (B) is true if this node is scanning the blockchain, false otherwise cumulativeDifficulty (S) is the current cumulative forging difficulty numberOfCurrencies (N) is the number of currencies in the blockchain numberOfAssets (N) is the number of AE assets in the blockchain numberOfPrunableMessages (N) is the number of prunable messages in the blockchain freeMemory (N) is the amount of free memory on this node (in Bytes) peerPort (N) is the port used for connecting to peers numberOfVotes (N) is the number of votes in the blockchain availableProcessors (N) is the number of processors on this node numberOfTaggedData (N) is the number of tagged data in the blockchain numberOfActiveAccountLeases (N) is the number of active account leases in the blockchain numberOfAccountLeases (N) is the total number of account leases including scheduled leases (first scheduled lease only) in the blockchain numberOfAccounts (N) is the number of accounts in the blockchain numberOfDataTags (N) is the number of data tags in the blockchain needsAdminPassword (B) is true if the nxt.disableAdminPassword property is false currentMinRollbackHeight (N) is the current minimum rollback height numberOfBlocks (N) is the number of blocks (height + 1) in the blockchain isTestnet (B) is true if the node is connected to testnet, false otherwise numberOfCurrencyTransfers (N) is the number of currency transfers in the blockchain requestProcessingTime (N) is the API request processing time (in millisec) numberOfPhasedTransactions (N) is the number of phased transactions in the blockchain version (S) is the software version on this node numberOfBidOrders (N) is the number of AE bid orders in the blockchain lastBlock (S) is the last block address totalMemory (N) is the amount of memory this node is using (in Bytes) application (S) is the name of the software running on this node (typically BRS ) numberOfAliases (N) is the number of aliases in the blockchain numberOfActivePeers (N) is the number of active peers on the network lastBlockchainFeederHeight (N) is the height of the last blockchain feeder maxPrunableLifetime (N) is the maximum prunable lifetime (in seconds) numberOfExchanges (N) is the number of currency exchanges in the blockchain numberOfTrades (N) is the number of AE trades in the blockchain numberOfPurchases (N) is the number of DGS purchases in the blockchain numberOfTags (N) is the number of DGS tags in the blockchain time (N) is the current node time (in seconds since the genesis block) numberOfAskOrders (N) is the number of AE ask orders in the blockchain lastBlockchainFeeder (S) is the announced name of the feeder of the last blockchain isOffline (B) is true if this node is connected to other peers, false otherwise Note: AE is Asset Exchange, DGS is Digital Goods Store Example: Refer to Get State example. Get Time Get the current time. Request: requestType is getTime Response: time (N) is the current time (in seconds since the genesis block). requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Time example. Token Operations Decode Token Validate a token without requiring the transmission of a secret passphrase. Request: requestType is decodeToken website is the signed text, typically an authorized URL token is the token generated by Generate Token Response: account (S) is the account number that generated the token accountRS (S) is the Reed-Solomon address of the account timestamp (N) is the time (in seconds since the genesis block) that the token was created valid (B) is true if token is valid, false otherwise requestProcessingTime (N) is the API request processing time (in millisec) Note: Since token contains the token generator's public key and digital signature, website can be validated as authorized by the owner of the public key, and the public key determines the account ID. Example: Refer to Decode Token example. Generate Token Generate a token. POST only. Request: requestType is generateToken secretPhrase is the passphrase of the account generating the token website is a web site URL for which authorization should be granted, or general text to be digitally signed Note: website is typically a URL (with the leading http:// unnecessary) that an account owner signs with his secretPhrase (private key) to bind the account to the URL, but website can be any text that the owner wishes to sign. Response: token (S) is a 160 character string representing the 100-byte token which consists of a 32-byte public key, a 4-byte timestamp, and a 64-byte signature account (S) is the account number corresponding to secretPhrase accountRS (S) is the Reed-Solomon address of the account timestamp (N) is the time (in seconds since the genesis block) that the token was generated valid (B) is true if token is valid, false otherwise requestProcessingTime (N) is the API request processing time (in millisec) Note: Since token contains the token generator's public key and signature, the website can be validated as authorized by the owner of the public key using Decode Token . Example: Refer to Generate Token example. Transaction Operations Broadcast Transaction Broadcast a transaction to the network. POST only. Request: requestType is broadcastTransaction transactionBytes is the bytecode of a signed transaction (optional) transactionJSON is the transaction object (optional if transactionBytes provided) prunableAttachmentJSON is the attachment object embedded in transactionJSON containing a prunable message (required if transactionJSON not provided because transactionBytes never includes prunable data) Response: requestProcessingTime (N) is the API request processing time (in millisec) fullHash (S) is the full hash of the signed transaction transaction (S) is the transaction ID Example: Refer to Broadcast Transaction example. Calculate Full Hash Calculate the full hash of a transaction. Request: requestType is calculateFullHash unsignedTransactionJSON is the unsigned transaction JSON object (optional) unsignedTransactionBytes are the unsigned bytes of a transaction (optional if unsignedTransactionJSON is provided) signatureHash is a SHA-256 hash of the transaction signature Response: requestProcessingTime (N) is the API request processing time (in millisec) fullHash (S) is the full hash of the signed transaction Example: Refer to Calculate Full Hash example. Get Transaction Get a transaction object given a transaction ID. Request: requestType is getTransaction transaction is the transaction ID (optional) fullHash is the full hash of the transaction (optional if transaction ID is provided) includePhasingResult is true to retrieve execution status of each phased transaction (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: sender (S) is the account ID of the sender senderRS (S) is the Reed-Solomon address of the sender feeNQT (S) is the fee (in NQT) of the transaction amountNQT (S) is the amount (in NQT) of the transaction transactionIndex (N) is a zero-based index giving the order of the transaction in its block timestamp (N) is the time (in seconds since the genesis block) of the transaction referencedTransactionFullHash (S) is the full hash of a transaction referenced by this one, omitted if no previous transaction is referenced confirmations (N) is the number of transaction confirmations subtype (N) is the transaction subtype (refer to Get Constants for a current list of subtypes) block (S) is the ID of the block containing the transaction blockTimestamp (N) is the timestamp (in seconds since the genesis block) of the block height (N) is the height of the block in the blockchain senderPublicKey (S) is the public key of the sending account for the transaction type (N) is the transaction type (refer to Get Constants for a current list of types) deadline (N) is the deadline (in minutes) for the transaction to be confirmed signature (S) is the digital signature of the transaction recipient (S) is the account number of the recipient, if applicable recipientRS (S) is the Reed-Solomon address of the recipient, if applicable fullHash (S) is the full hash of the signed transaction signatureHash (S) is a SHA-256 hash of the transaction signature approved (B) is a boolean indicating if the transaction is approved (only included when includePhasingResult is true and the transaction is phased) result (S) is a string containing the result of the transaction (only included when includePhasingResult is true and the transaction is phased) executionHeight (N) is the height the transaction was executed (only included when includePhasingResult is true and the transaction is phased) transaction (S) is the transaction ID version (N) is the transaction version number phased (B) is true if the transaction is phased, false otherwise ecBlockId (N) is the economic clustering block ID ecBlockHeight (N) is the economic clustering block height attachment (O) is an object containing any additional data needed for the transaction, if applicable lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Note: The block , blockTimestamp and confirmations fields are omitted for unconfirmed transactions. Double-spending transactions are not retrieved. Example: Refer to Get Transaction example. Get Transaction Bytes Get the bytecode of a transaction. Request: requestType is getTransactionBytes transaction is a transaction ID requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: confirmations (N) is the number of transaction confirmations transactionBytes (S) are the bytes contained in the transaction unsignedTransactionBytes (S) are the unsigned bytes contained in the transaction prunableAttachmentJSON (O) is the prunable attachment JSON object, if applicable, because transactionBytes never includes prunable data lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Transaction Bytes example. Parse Transaction Get a transaction object given a (signed or unsigned) transaction bytecode, or re-parse a transaction object. Verify the signature. Request: requestType is parseTransaction transactionBytes is the signed or unsigned bytecode of the transaction (optional) transactionJSON is the transaction object (optional if transactionBytes is included) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: Refer to Get Transaction for additional fields. verify (B) is true if the signature is verified, false otherwise Example: Refer to Parse Transaction example. Sign Transaction Calculates the full hash, signature hash, and transaction ID of an unsigned transaction. Request: requestType is signTransaction unsignedTransactionJSON is the transactionJSON field of the transaction, without a signature subfield unsignedTransactionBytes is the unsignedTransactionBytes field of the transaction (optional, if unsignedTransactionJSON provided) prunableAttachmentJSON is a prunable attachment JSON object, if applicable, because unsignedTransactionBytes never includes prunable data (optional if the transaction has already been broadcast and the prunable message can still be retrieved from the database) secretPhrase is the secret passphrase of the signing account validate is false to skip validation of the transaction bytes being signed (useful on nodes where the full blockchain is not downloaded) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: signatureHash (S) is a SHA-256 hash of the transaction signature, used in escrow transactions verify (B) is true the signature is verified, false if not transactionJSON (O) is the signed transaction JSON object transactionBytes (S) are the signed transaction bytes fullHash (S) is the full hash of the signed transaction prunableAttachmentJSON (O) is the prunable attachment JSON object, if applicable, because transactionBytes never includes prunable data transaction (S) is the transaction ID, derived from the fullHash lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Sign Transaction example. Utilities Long Convert Converts an ID to the signed long integer representation used internally. Request: requestType is longConvert id is a numerical ID, in decimal form but equivalent to an 8-byte unsigned integer as produced by SHA-256 hashing Response: stringId (S) is the numerical ID longId (S) is the signed long integer (8-bytes) representation of the ID used internally, returned as a string requestProcessingTime (N) is the API request processing time (in millisec) Note: Java does not support unsigned integers, so any unsigned ID (such as a block ID) visible in the BRS client is represented internally as a signed integer. Example: Refer to Long Convert example. RS Convert Get both the Reed-Solomon account address and the account number given an account ID. Request: requestType is rsConvert account is an account ID (either RS address or number) Response: accountRS (S) is the Reed-Solomon address of the account requestProcessingTime (N) is the API request processing time (in millisec) account (S) is the account number Example: Refer to RS Convert example.","title":"The Burst API"},{"location":"en/the-burst-api/#description","text":"The Burst API allows interaction with Burst nodes using HTTP requests to port 8125. Most HTTP requests can use either the GET or POST methods, but some API calls accept only the POST method for security reasons. Responses are returned as JSON objects. Each API call is documented below, with definitions given for HTTP request parameters and JSON response fields, followed by an example: The JSON response fields are each followed by one of S for string, A for array, O for object, N for number or B for boolean. In the examples, the Burst node is represented as localhost and requests and responses are formatted for easy reading; line breaks and spaces are not actually used except in some parameter values. All requests are in URL format which implies the HTTP GET method. When GET is allowed, the URL can be entered into a browser URL field but proper URL encoding is usually required (e.g., spaces in a parameter value must be replaced by + or %20 ). Otherwise, the URL should be used as a guide to preparing an HTTP POST request using cURL, for example. All API calls can be viewed and tested on the TestNet at https://wallet.dev.burst-test.net/test . For specific API calls, use the GET url https://wallet.dev.burst-test.net/burst?requestType = specificRequestType .","title":"Description"},{"location":"en/the-burst-api/#general-notes","text":"","title":"General Notes"},{"location":"en/the-burst-api/#genesis-block","text":"Many API requests make reference to the .","title":"Genesis Block"},{"location":"en/the-burst-api/#flexible-account-ids","text":"All API requests that require an account ID accept either an account number or the corresponding Reed-Solomon address .","title":"Flexible Account IDs"},{"location":"en/the-burst-api/#quantity-units-burst-nqt-and-qnt","text":"The Burst system has a currency BURST used to quantify value in the system. Like all currencies, BURST circulates in the system, moving from one user to another by payments and purchases. Also, a small fee is required for every transaction, including those in which no BURST is transfered, such as simple messages. This fee goes to the owner of the node that forges (generates) the new block containing the transaction that is accepted onto the blockchain. Yet internally, the currency is still stored in integer form in units of NQT or NxtQuant, where 1 BURST = 10 8 NQT. All parameters and fields in the API involving a quantity of BURST are denominated in units of NQT, for example feeNQT . The only exception is the field effectiveBalanceNXT , used in forging calculations. Other assets can be created within Burst using Issue Asset . The issuer must specify the number of decimal places to use in quantifying the asset, and the amount of the asset to create in generic units of QNT or Quant, distinct from NQT. Quantities of assets are stored internally as integers in units of QNT, and assets are priced in NQT per QNT. Decimal (BURST) Canonical Name Alternate Name NQT 1 .00000000 BURST Burst 100,000,000 0.0 1 000000 cBURST Bessie 1,000,000 0.00 1 00000 mBURST - 100,000 0.0000 1 000 - Maybel 1,000 0.00000 1 00 uBURST - 100 0.0000000 1 - Planck 1 0.12345678 digit reference - -","title":"Quantity Units BURST, NQT and QNT"},{"location":"en/the-burst-api/#creating-unsigned-transactions","text":"All API requests that create a new transaction will accept either a secretPhrase or a publicKey parameter: If secretPhrase is supplied, a transaction is created, signed at the server, and broadcast by the server as usual. If only a publicKey parameter is supplied as a 64-digit (32-byte) hex string, the transaction will be prepared by the server and returned in the JSON response as transactionJSON without a signature. This JSON object along with secretPhrase can then be supplied to Sign Transaction as unsignedTransactionJSON and the resulting signed transactionJSON can then be supplied to Broadcast Transaction . This sequence allows for offline signing of transactions so that secretPhrase never needs to be exposed. unsignedTransactionBytes may be used instead of unsigned transactionJSON when there is no encrypted message. Messages to be encrypted require the secretPhrase for encryption and so cannot be included in unsignedTransactionBytes .","title":"Creating Unsigned Transactions"},{"location":"en/the-burst-api/#escrow-operations","text":"All API requests that create a new transaction will accept an optional referencedTransactionFullHash parameter which creates a chained transaction, meaning that the new transaction cannot be confirmed unless the referenced transaction is also confirmed. This feature allows a simple way of transaction escrow: Alice prepares and signs a transaction A, but doesn't broadcast it by setting the broadcast parameter to false . She sends to Bob the unsignedTransactionBytes , the fullHash of the transaction, and the signatureHash . All of those are included in the JSON returned by the API request. (Warning: make sure not to send the signed transactionBytes , or the signature itself, as then Bob can just broadcast transaction A himself). Bob prepares, signs and broadcasts transaction B, setting the referencedTransactionFullHash parameter to the fullHash of A provided by Alice. He can verify that this hash indeed belongs to the transaction he expects from Alice, by using Calculate Full Hash , which takes unsignedTransactionBytes and signatureHash (both of which Alice has also sent to Bob). He can also use Parse Transaction to decode the unsigned bytes and inspect all transaction fields. Transaction B is accepted in the unconfirmed transaction pool, but as long as A is still missing, B will not be confirmed, i.e. will not be included in the blockchain. If A is never submitted, B will eventually expire -- so Bob should make sure to set a long enough deadline, such as the maximum of 32767 minutes. Once in the unconfirmed transactions pool, Bob has no way of recalling B back. So now Alice can safely submit her transaction A, by just broadcasting the signedTransactionBytes she got in the first step. Transaction A will get included in the blockchain first, and in the next block Bob's transaction B will also be included. Note that while the above scheme is good enough for a simple escrow, the blockchain does not enforce that if A is included, B will also be included. It may happen due to forks and blockchain reorganization, that B never gets a chance to be included and expires unconfirmed, while A still remains in the blockchain. However, it is not practically possible for Bob to intentionally cause such chain of events and to prevent B from being confirmed.","title":"Escrow Operations"},{"location":"en/the-burst-api/#prunable-data","text":"Prunable data can be removed from the blockchain without affecting the integrity of the blockchain. When a transaction containing prunable data is created, only the 32-byte sha256 hash of the prunable data is included in the transactionBytes , not the prunable data itself. The non-prunable signed transactionBytes are used to verify the signature and to generate the transaction's fullHash and ID; when the prunable part of the transaction is removed at a later time, none of these operations are affected. Prunable data has a predetermined minimum lifetime of two weeks (24 hours on the Testnet ) from the timestamp of the transaction. Transactions and blocks received from peer nodes are not accepted if prunable data is missing before this time has elapsed. After this time has elapsed, prunable data is no longer included with transactions and blocks transmitted to peer nodes, and is no longer included in the transaction JSON returned by general-purpose API calls such as Get Transaction; the only way to retrieve it, if still available, is through special-purpose API calls such as Get Prunable Message. Expired prunable data remains stored in the blockchain until removed at the same time derived tables are trimmed, which occurs automatically every 1000 blocks by default. Prunable data can be preserved on a node beyond the predetermined minimum lifetime by setting the nxt.maxPrunableLifetime property to a larger value than two weeks or to -1 to preserve it indefinitely. To force the node to include such preserved prunable data when transactions and blocks are transmitted to peer nodes, set the nxt.includeExpiredPrunables property to true , thus making it an archival node. Currently, there is only one variety of prunable data in the Burst system: prunable Arbitrary Messages . It has a maximum prunable data length of 42 kilobytes.","title":"Prunable Data"},{"location":"en/the-burst-api/#properties-files","text":"The behavior of some API calls is affected by property settings loaded from files in the brs/conf directory during Burst server intialization. This directory contains the brs-default.properties and logging-default.properties files, both of which contain default property settings along with documentation. A few of the property settings can be obtained while the server is running through the Get Blockchain Status and Get State calls. It is recommended not to modify default properties files because they can be overwritten during software updates. Instead, properties in the default files can be overridden by including them in optional brs.properties and logging.properties files in the same directory. For example, a brs.properties file can be created with the content: DEV.TestNet = yes This causes the Burst server to connect to the TestNet instead of the MainNet.","title":"Properties Files"},{"location":"en/the-burst-api/#create-transaction","text":"The following API calls create Burst transactions using HTTP POST requests. Follow the links for examples and HTTP POST request parameters specific to each call. Refer to the sections below for HTTP POST request parameters and JSON response fields common to all calls that create transactions. Send Money Set Account Info Buy / Sell Alias Set Alias Send Message Cancel Order Issue Asset Place Order Transfer Asset DGS Delisting DGS Delivery DGS Feedback DGS Listing DGS Purchase DGS Quantity Change DGS Refund Lease Balance","title":"Create Transaction"},{"location":"en/the-burst-api/#create-transaction-request","text":"The following HTTP POST parameters are common to all API calls that create transactions: For feeNQT , please refer to the following \u201crules\u201d: minimum 1000 BURST for Issue Asset , unless singleton asset is issued, for which the fee is 1 BURST 2 BURST in base fee for Set Alias , with 2 BURST additional fee for each 32 chars of name plus URI total length, after the first 32 chars 1 BURST for the first 32 bytes of a unencrypted non-prunable message , 1 BURST for each additional 32 bytes 2 BURST for the first 32 bytes of an encrypted non-prunable message , 1 BURST for each additional 32 bytes. The length is measured excluding the nonce and the 16 byte AES initialization vector. 1 BURST for the first 1024 bytes of a prunable message , 0.1 BURST for each additional 1024 prunable bytes 1 BURST for Set Account Info , including 32 chars, with 2 BURST additional fee for each 32 chars 2 BURST for DGS Listing , including 32 chars of name plust description. With 2 BURST additional fee for each 32 chars. 1 BURST for DGS Delivery , including 32 bytes of encrypted goods data (AES initialization bytes and nonce excluded). With 2 BURST additional fee for each 32 bytes. 2 BURST for transactions that make use of referencedTransactionFullHash property when creating a new transaction. Dynamic tx fee otherwise, where 1 BURST = 100000000 NQT Tx no Tx fees 1 0.00735 100 0.73500 255 1.87425 510 3.74850 765 5.62275 1020 7.49700 Note: An optional arbitrary message can be appended to any transaction by adding message-related parameters as in Send Message .","title":"Create Transaction Request"},{"location":"en/the-burst-api/#create-transaction-response","text":"The following JSON response fields are common to all API calls that create transactions:","title":"Create Transaction Response"},{"location":"en/the-burst-api/#account-operations","text":"","title":"Account Operations"},{"location":"en/the-burst-api/#get-account","text":"Get account information given an account ID. Response: Example: Refer to Get Account example.","title":"Get Account"},{"location":"en/the-burst-api/#get-account-block-ids","text":"Get the block IDs of all blocks forged (generated) by an account in reverse block height order. Response:","title":"Get Account Block Ids"},{"location":"en/the-burst-api/#get-account-blocks","text":"Get all blocks forged (generated) by an account in reverse block height order. Response:","title":"Get Account Blocks"},{"location":"en/the-burst-api/#get-account-id","text":"Get an account ID given a secret passphrase or public key. POST only. Response: Example: Refer to Get Account Id example.","title":"Get Account Id"},{"location":"en/the-burst-api/#get-account-lessors","text":"Get the lessors to an account. Note: If table trimming is enabled (default), the height must be within 1440 blocks of the last block. Response: lessorRS (S) lessor (S) guaranteedBalanceNQT (S) Example: Refer to Get Account Lessors example.","title":"Get Account Lessors"},{"location":"en/the-burst-api/#get-account-public-key","text":"Get the public key associated with an account ID. Response: Example: Refer to Get Account Public Key example.","title":"Get Account Public Key"},{"location":"en/the-burst-api/#get-account-transaction-ids","text":"Get the transaction IDs associated with an account in reverse block timestamp order. This call only returns non-phased transactions as of Version 1.5.7e and is deprecated, to be removed in version 1.6. Use Get Blockchain Transactions instead. Note: Refer to Get Constants for definitions of types and subtypes Response: Example: Refer to Get Account Transaction Ids example.","title":"Get Account Transaction Ids"},{"location":"en/the-burst-api/#get-account-transactions","text":"Get the transactions associated with an account in reverse block timestamp order. This call only returns non-phased transactions as of Version 1.5.7e and is depricated, to be removed in version 1.6. Use Get Blockchain Transactions instead. Note: Refer to Get Constants for definitions of types and subtypes Response: Example: Refer to Get Account Transactions example.","title":"Get Account Transactions"},{"location":"en/the-burst-api/#get-balance","text":"Get the balance of an account. Request: Response: Example: Refer to Get Balance example.","title":"Get Balance"},{"location":"en/the-burst-api/#get-guaranteed-balance","text":"Get the balance of an account that is confirmed at least a specified number of times. Response: Example: Refer to Get Guaranteed Balance example.","title":"Get Guaranteed Balance"},{"location":"en/the-burst-api/#get-unconfirmed-transaction-ids","text":"Get a list of unconfirmed transaction IDs associated with an account. Request: Response: Example: Refer to Get Unconfirmed Transaction Ids example.","title":"Get Unconfirmed Transaction Ids"},{"location":"en/the-burst-api/#get-unconfirmed-transactions","text":"Get a list of unconfirmed transactions associated with an account. Response: Example: Refer to Get Unconfirmed Transactions example.","title":"Get Unconfirmed Transactions"},{"location":"en/the-burst-api/#send-money","text":"Send BURST to an account. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . Example: Refer to Send Money example.","title":"Send Money"},{"location":"en/the-burst-api/#send-money-multi","text":"Send individual amounts of BURST to up to 64 recipients. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . Example: To do","title":"Send Money Multi"},{"location":"en/the-burst-api/#send-money-multi-same","text":"Send the same amount of BURST to up to 128 recipients. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . Example: To do","title":"Send Money Multi Same"},{"location":"en/the-burst-api/#set-account-info","text":"Set account information. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . Example: Refer to Set Account Info example.","title":"Set Account Info"},{"location":"en/the-burst-api/#alias-operations","text":"","title":"Alias Operations"},{"location":"en/the-burst-api/#buy-sell-alias","text":"Buy or sell an alias. POST only. Refer to Create Transaction Request for common parameters. Note : An alias can be transferred rather than sold by setting priceNQT to zero. A pending sale can be canceled by selling again to self for a price of zero. Response: Refer to Create Transaction Response . Example: Refer to Buy / Sell Alias example.","title":"Buy / Sell Alias"},{"location":"en/the-burst-api/#set-alias","text":"Create and/or assign an alias. POST only. Refer to Create Transaction Request for common parameters. Response: Refer to Create Transaction Response . The transaction ID is also the alias ID. Example: Refer to Set Alias example.","title":"Set Alias"},{"location":"en/the-burst-api/#get-alias","text":"Get information about a given alias. Response: Example: Refer to Get Alias example.","title":"Get Alias"},{"location":"en/the-burst-api/#get-aliases","text":"Get information on aliases owned by a given account in alias name order. Response: Example: Refer to Get Aliases example.","title":"Get Aliases"},{"location":"en/the-burst-api/#arbitrary-message-system-operations","text":"","title":"Arbitrary Message System Operations"},{"location":"en/the-burst-api/#decrypt-from","text":"Decrypt an AES-encrypted message. Request: requestType is decryptFrom secretPhrase is the secret passphrase of the recipient account is the account ID of the recipient data is AES-encrypted data nonce is the unique nonce associated with the encrypted data decryptedMessageIsText is false if the decrypted message is a hex string, otherwise the decrypted message is text (optional) uncompressDecryptedMessage is false to prevent gzip uncompression after decryption (optional) Response: decryptedMessage (S) is the decrypted message requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Decrypt From example.","title":"Decrypt From"},{"location":"en/the-burst-api/#encrypt-to","text":"Encrypt a message using AES without sending it. Request: requestType is encryptTo secretPhrase is the secret passphrase of the sender recipient is the account ID of the recipient messageToEncrypt is either UTF-8 text or a string of hex digits to be compressed and converted into a 1000 byte maximum bytecode then encrypted using AES messageToEncryptIsText is false if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional) compressMessageToEncrypt is false to prevent gzip compression before encryption (optional) Response: data (S) is the AES-encrypted data nonce (S) is a 32-byte pseudorandom nonce requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Encrypt To example.","title":"Encrypt To"},{"location":"en/the-burst-api/#read-message","text":"Get a message given a transaction ID. Request: requestType is readMessage transaction is the transaction ID of the message secretPhrase is the secret passphrase of the account that received the message (optional) sharedKey is the shared key used to decrypt the message (optional) (see Get Shared Key ) retrieve is true to retrieve pruned data from archival nodes (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: messageIsPrunable (B) is true if there is a plain message and it is prunable, false if it is not prunable message (S) is the plain message, if applicable encryptedMessageIsPrunable (B) is true if there is an encrypted message and it is prunable, false if it is not prunable decryptedMessage (S) is the decrypted message, if applicable and only if the provided secretPhrase belongs to either the sender or receiver of the transaction decryptedMessageToSelf (S) is the decrypted message sent to self, if applicable and only if the provided secretPhrase belongs to the sender of transaction lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Read Message example.","title":"Read Message"},{"location":"en/the-burst-api/#send-message","text":"Create an Arbitrary Message transaction. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is sendMessage recipient is the account ID of the recipient (optional) recipientPublicKey is the public key of the receiving account (optional, enhances security of a new account) message is either UTF-8 text or a string of hex digits (perhaps previously encoded using an arbitrary algorithm) to be converted into a bytecode with a maximum length of one kilobyte, 42 kilobytes if prunable (optional) messageIsText is false if the message is a hex string, otherwise the message is text (optional) messageIsPrunable is true if the message is prunable (optional) messageToEncrypt is either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncrypt is false ) and converted into a bytecode with a maximum length of one kilobyte, 42 kilobytes if prunable, then encrypted using AES (optional) messageToEncryptIsText is false if the message to encrypt is a hex string, otherwise the message to encrypt is text (optional) encryptedMessageData is already encrypted data which overrides messageToEncrypt if provided (optional) encryptedMessageNonce is a unique 32-byte number which cannot be reused (optional unless encryptedMessageData is provided) encryptedMessageIsPrunable is true if the encrypted message is prunable (optional) compressMessageToEncrypt is false to prevent gzip compression before encryption (optional) messageToEncryptToSelf is either UTF-8 text or a string of hex digits to be compressed (unless compressMessageToEncryptToSelf is false) and converted into a one kilobyte maximum bytecode then encrypted with AES, then sent to the sending account (optional) messageToEncryptToSelfIsText is false if the message to self-encrypt is a hex string, otherwise the message to encrypt is text (optional) encryptToSelfMessageData is already encrypted data which overrides messageToEncryptToSelf if provided (optional) encryptToSelfMessageNonce is a unique 32-byte number which cannot be reused (optional unless encryptToSelfMessageData is provided) compressMessageToEncryptToSelf is false to prevent gzip compression before encryption (optional) Note: Any combination (including none or all) of the three options plain message , messageToEncrypt , and messageToEncryptToSelf will be included in the transaction. However, one and only one prunable message may be included in a single transaction if there is not already a message of the same type (either plain or encrypted). Note: The encryptedMessageData-encryptedMessageNonce pair or the encryptToSelfMessageData-encryptToSelfMessageNonce pair can be the output of Encrypt To Response: Refer to Create Transaction Response . Example: Refer to Send Message example.","title":"Send Message"},{"location":"en/the-burst-api/#asset-exchange-operations","text":"","title":"Asset Exchange Operations"},{"location":"en/the-burst-api/#cancel-order","text":"Cancel an existing asset order. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is either cancelBidOrder or cancelAskOrder order is the order ID of the order being canceled Response: Refer to Create Transaction Response . Example: Refer to Cancel Order example.","title":"Cancel Order"},{"location":"en/the-burst-api/#cancel-ask-order","text":"Refer to Cancel Order .","title":"Cancel Ask Order"},{"location":"en/the-burst-api/#cancel-bid-order","text":"Refer to Cancel Order .","title":"Cancel Bid Order"},{"location":"en/the-burst-api/#get-account-current-order-ids","text":"Get current asset order IDs given an account ID in reverse block height order. Request: requestType is either getAccountCurrentBidOrderIds or getAccountCurrentAskOrderIds account is the account ID asset is an asset ID filter (optional) firstIndex is a zero-based index to the first order ID to retrieve (optional) lastIndex is a zero-based index to the last order ID to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: bidOrderIds or askOrderIds (A) is an array of order IDs lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Account Current Order Ids example.","title":"Get Account Current Order Ids"},{"location":"en/the-burst-api/#get-account-current-ask-order-ids","text":"Refer to Get Account Current Order Ids .","title":"Get Account Current Ask Order Ids"},{"location":"en/the-burst-api/#get-account-current-bid-order-ids","text":"Refer to Get Account Current Order Ids .","title":"Get Account Current Bid Order Ids"},{"location":"en/the-burst-api/#get-account-current-orders","text":"Get current asset orders given an account ID in reverse block height order. Request: requestType is either getAccountCurrentBidOrders or getAccountCurrentAskOrders account is the account ID asset is an asset ID filter (optional) firstIndex is a zero-based index to the first order to retrieve (optional) lastIndex is a zero-based index to the last order to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: bidOrders or askOrders (A) is an array of order objects (refer to Get Order for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Account Current Orders example.","title":"Get Account Current Orders"},{"location":"en/the-burst-api/#get-account-current-ask-orders","text":"Refer to Get Account Current Orders .","title":"Get Account Current Ask Orders"},{"location":"en/the-burst-api/#get-account-current-bid-orders","text":"Refer to Get Account Current Orders .","title":"Get Account Current Bid Orders"},{"location":"en/the-burst-api/#get-all-assets","text":"Get all assets in the exchange in reverse block height of creation order. Request: requestType is getAllAssets firstIndex is a zero-based index to the first asset to retrieve (optional) lastIndex is a zero-based index to the last asset to retrieve (optional) includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: assets (A) is an array of asset objects (refer to Get Asset ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get All Assets example.","title":"Get All Assets"},{"location":"en/the-burst-api/#get-all-open-orders","text":"Get all open bid/ask orders in reverse block height order. Request: requestType is either getAllOpenBidOrders or getAllOpenAskOrders firstIndex is a zero-based index to the first order to retrieve (optional) lastIndex is a zero-based index to the last order to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: openOrders (A) is an array of order objects (refer to Get Order for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get All Open Orders example.","title":"Get All Open Orders"},{"location":"en/the-burst-api/#get-all-open-ask-orders","text":"Refer to Get All Open Orders .","title":"Get All Open Ask Orders"},{"location":"en/the-burst-api/#get-all-open-bid-orders","text":"Refer to Get All Open Orders .","title":"Get All Open Bid Orders"},{"location":"en/the-burst-api/#get-all-trades","text":"Get all trades since a given timestamp in reverse block height order. Request: requestType is getAllTrades timestamp is the timestamp (in seconds since the genesis block) to begin retrieving trades (optional, default 0) firstIndex is a zero-based index to the first trade to retrieve (optional) lastIndex is a zero-based index to the last trade to retrieve (optional) includeAssetInfo is true if asset information is to be included in the result (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: If timestamp is omitted or zero, and no index is given, all trades in the entire blockchain will be retrieved, which may timeout or crash your system. Response: trades (A) is an array of trade objects (refer to Get Trades ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get All Trades example.","title":"Get All Trades"},{"location":"en/the-burst-api/#get-asset","text":"Get asset information given an asset ID. Request: requestType is getAsset asset is the asset ID includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: account (S) is the number of the account that issued the asset accountRS (S) is the Reed-Solomon address of the account that issued the asset name (S) is the asset name description (S) is the asset description quantityQNT (S) is the total asset quantity (in QNT) in existence asset (N) is the asset ID decimals (N) is the number of decimal places used by the asset numberOfAccounts (N) is the number of accounts that own the asset numberOfTrades (N) is the number of trades of this asset numberOfTransfers (N) is the number of transfers of this asset lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Asset example.","title":"Get Asset"},{"location":"en/the-burst-api/#get-asset-accounts","text":"Get the accounts that own an asset given the asset ID in reverse quantity order. Request: requestType is getAssetAccounts asset is the asset ID height is the height of the blockchain to determine the accounts (optional, default is last block) firstIndex is a zero-based index to the first account to retrieve (optional) lastIndex is a zero-based index to the last account to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: If table trimming is enabled (default), the height must be within 1440 blocks of the last block. Response: accountAssets (A) is an array of asset objects with the following fields for each asset: quantityQNT (S) is the quantity (in QNT) of the asset accountRS (S) is the Reed-Solomon address of the account that owns the asset unconfirmedQuantityQNT (S) is the unconfirmed quantity (in QNT) of the asset asset (S) is the asset ID account (S) is the number of the account that owns the asset lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Asset Accounts example.","title":"Get Asset Accounts"},{"location":"en/the-burst-api/#get-asset-ids","text":"Get the IDs of all assets in the exchange in reverse block height of creation order. Request: requestType is getAssetIds firstIndex is a zero-based index to the first asset ID to retrieve (optional) lastIndex is a zero-based index to the last asset ID to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: assets (A) is an array of asset IDs lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Asset Ids example.","title":"Get Asset Ids"},{"location":"en/the-burst-api/#get-asset-transfers","text":"Get transfers associated with a given asset and/or account in reverse block height order (or in the expected order of execution for expected transfers). Request: requestType is either getAssetTransfers or getExpectedAssetTransfers , where expected transfers are from the unconfirmed transactions pool or are phased transactions scheduled to finish in the next block asset is the asset ID (optional) account is the account ID (optional if asset provided) timestamp is the earliest transfer (in seconds since the genesis block) to retrieve (optional, does not apply to expected transfers) firstIndex is a zero-based index to the first transfer to retrieve (optional, does not apply to expected transfers) lastIndex is a zero-based index to the last transfer to retrieve (optional, does not apply to expected transfers) includeAssetInfo is true if the decimals and name fields are to be included (optional, does not apply to expected transfers) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: transfers (A) is an array of transfer objects with the following fields for each transfer: quantityQNT (S) is the quantity (in QNT) of the asset traded senderRS (S) is the Reed-Solomon address of the sender assetTransfer (S) is the transaction ID of the asset transfer sender (S) is the account number of the sender recipientRS (S) is the Reed-Solomon address of the recipient decimals (N) is the number of decimal places used by the asset (if includeAssetInfo is true ) recipient (S) is the account number of the recipient name (S) is the name of the asset (if includeAssetInfo is true ) asset (S) is the asset ID height (N) is the height of the transfer block timestamp (N) is the timestamp (in seconds since the genesis block) of the transfer block, does not apply to an expected transfer phased (B) is true if the transaction is phased, false otherwise, applies only to an expected transfer lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Asset Transfers example.","title":"Get Asset Transfers"},{"location":"en/the-burst-api/#get-expected-asset-transfers","text":"Refer to Get Asset Transfers .","title":"Get Expected Asset Transfers"},{"location":"en/the-burst-api/#get-assets","text":"Get asset information given multiple asset IDs Request: requestType is getAssets assets is one the multiple asset IDs assets is one the multiple asset IDs includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: assets (A) is an array of asset objects (refer to Get Asset ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Assets example.","title":"Get Assets"},{"location":"en/the-burst-api/#get-assets-by-issuer","text":"Get asset information given multiple creation account IDs in reverse block height of creation order. Request: requestType is getAssetsByIssuer account is one of the multiple account IDs account is one of the multiple account IDs firstIndex is a zero-based index to the first asset to retrieve (optional) lastIndex is a zero-based index to the last asset to retrieve (optional) includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: assets (A) is an array of asset objects (refer to Get Asset ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Assets By Issuer example.","title":"Get Assets By Issuer"},{"location":"en/the-burst-api/#get-order","text":"Get a bid/ask order given an order ID. Request: requestType is either getBidOrder or getAskOrder order is the Order ID requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: account (S) is the account number associated with the order accountRS (S) is the Reed-Solomon address of the account asset (S) is the ID of the asset being ordered quantityQNT (S) is the order quantity (in QNT) priceNQT (S) is the order price (in NQT) height (N) is the block height of the order transaction transactionHeight (N) is the transaction height transactionIndex (N) is a zero-based index giving the order of the transaction in its block order (S) is the ID of the order type (S) is the type of order ( bid or ask ) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Order example.","title":"Get Order"},{"location":"en/the-burst-api/#get-ask-order","text":"Refer to Get Order .","title":"Get Ask Order"},{"location":"en/the-burst-api/#get-bid-order","text":"Refer to Get Order .","title":"Get Bid Order"},{"location":"en/the-burst-api/#get-order-ids","text":"Get bid/ask order IDs given an asset ID, in order of decreasing bid price or increasing ask price. Request: requestType is either getBidOrderIds or getAskOrderIds asset is the asset ID firstIndex is a zero-based index to the first order ID to retrieve (optional) lastIndex is a zero-based index to the last order ID to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: bidOrderIds or askOrderIds (A) is an array of order IDs lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Order Ids example.","title":"Get Order Ids"},{"location":"en/the-burst-api/#get-ask-order-ids","text":"Refer to Get Order Ids .","title":"Get Ask Order Ids"},{"location":"en/the-burst-api/#get-bid-order-ids","text":"Refer to Get Order Ids .","title":"Get Bid Order Ids"},{"location":"en/the-burst-api/#get-orders","text":"Get bid/ask orders given an asset ID, in order of decreasing bid price or increasing ask price (if sortByPrice is true for expected orders, otherwise in the expected order of execution). Request: requestType is one of getBidOrders , getAskOrders , where expected orders are from the unconfirmed transactions pool or are phased transactions scheduled to finish in the next block asset is the asset ID sortByPrice is true to sort by price (optional, applies only to expected orders, which are returned in expected order of execution by default) showExpectedCancellations is true to include orders that are expected to be cancelled in the next block, based on the content of the unconfirmed transactions pool and the phased transactions expected to finish in the next block (optional, does not apply to expected orders) firstIndex is a zero-based index to the first order to retrieve (optional, does not apply to expected orders) lastIndex is a zero-based index to the last order to retrieve (optional, does not apply to expected orders) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: bidOrders or askOrders (A) is an array of order objects (refer to Get Order for details) with the following additional field only for an expected order: phased (B) is true if the order is phased, false otherwise lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Orders example.","title":"Get Orders"},{"location":"en/the-burst-api/#get-ask-orders","text":"Refer to Get Orders .","title":"Get Ask Orders"},{"location":"en/the-burst-api/#get-bid-orders","text":"Refer to Get Orders .","title":"Get Bid Orders"},{"location":"en/the-burst-api/#get-trades","text":"Get trades associated with a given asset and/or account in reverse block height order. Request: requestType is getTrades asset is the asset ID (optional) account is the account ID (optional if asset provided) firstIndex is a zero-based index to the first trade to retrieve (optional) lastIndex is a zero-based index to the last trade to retrieve (optional) timestamp is the earliest block (in seconds since the genesis block) to retrieve (optional) includeAssetInfo is true if the decimals and name fields are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: trades (A) is an array of trade objects with the following fields for each trade: seller (S) is the account number of the seller quantityQNT (S) is the quantity (in QNT) of the asset traded bidOrder (S) is the bid order ID sellerRS (S) is the Reed-Solomon address of the seller buyer (S) is the account number of the buyer priceNQT (S) is the trade price (in NQT, the ask price for a buy or the bid price for a sell) askOrder (S) is the ask order ID buyerRS (S) is the Reed-Solomon address of the buyer decimals (N) is the number of decimal places used by the asset name (S) is the name of the asset (if includeAssetInfo is true ) block (S) is the block ID of the trade (if includeAssetInfo is true ) asset (S) is the asset ID askOrderHeight (N) is the block height of the ask order bidOrderHeight (N) is the block height of the bid order tradeType (S) is the trade type ( sell or buy , where buy implies that the bid occurred after the ask, or if in the same block, has a greater order ID) timestamp (N) is the timestamp (in seconds since the genesis block) of the trade block height (N) is the height of the trade block lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Trades example.","title":"Get Trades"},{"location":"en/the-burst-api/#issue-asset","text":"Create an asset on the exchange. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is issueAsset name is the name of the asset description is a url-encoded description of the asset in UTF-8 with a maximum length of 1000 bytes (optional) quantityQNT is the total amount (in QNT) of the asset in existence decimals is the number of decimal places used by the asset (optional, zero default) Response: Refer to Create Transaction Response . The transaction ID is also the asset ID. Example: Refer to Issue Asset example.","title":"Issue Asset"},{"location":"en/the-burst-api/#place-order","text":"Place an asset order. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is either placeBidOrder or placeAskOrder asset is the asset ID of the asset being ordered quantityQNT is the amount (in QNT) of the asset being ordered priceNQT is the bid/ask price (in NQT) Response: Refer to Create Transaction Response . The transaction ID is also the order ID. Example: Refer to Place Order example.","title":"Place Order"},{"location":"en/the-burst-api/#place-ask-order","text":"Refer to Place Order .","title":"Place Ask Order"},{"location":"en/the-burst-api/#place-bid-order","text":"Refer to Place Order .","title":"Place Bid Order"},{"location":"en/the-burst-api/#transfer-asset","text":"Transfer a quantity of an asset from one account to another. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is transferAsset recipient is the recipient account ID recipientPublicKey is the public key of the recipient account (optional, enhances security of a new account) asset is the ID of the asset being transferred quantityQNT is the amount (in QNT) of the asset being transferred Response: Refer to Create Transaction Response . The transaction ID is also the transfered asset ID. Example: Refer to Transfer Asset example.","title":"Transfer Asset"},{"location":"en/the-burst-api/#block-operations","text":"","title":"Block Operations"},{"location":"en/the-burst-api/#get-block","text":"Get a block object given a block ID or block height. Request: requestType is getBlock block is the block ID (optional) height is the block height (optional if block provided) timestamp is the timestamp (in seconds since the genesis block) of the block (optional if height provided) includeTransactions is true to include transaction details (optional) includeExecutedPhased is true to include approved and executed phased transactions (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: block overrides height which overrides timestamp . Response: previousBlockHash (S) is the 32-byte hash of the previous block payloadLength (N) is the length (in bytes) of all transactions included in the block totalAmountNQT (S) is the total amount (in NQT) of the transactions in the block generationSignature (S) is the 32-byte generation signature of the generating account generator (S) is the generating account number generatorPublicKey (S) is the 32-byte public key of the generating account baseTarget (S) is the base target for the next block generation payloadHash (S) is the 32-byte hash of the payload (all transactions) generatorRS (S) is the Reed-Solomon address of the generating account nextBlock (S) is the next block ID numberOfTransactions (N) is the number of transactions in the block blockSignature (S) is the 64-byte block signature transactions (A) is an array of transaction IDs or transaction objects (if includeTransactions provided, refer to Get Transaction for details) executedPhasedTransactions (A) is an array of transaction IDs or transaction objects (if includeExecutedPhased provided, refer to Get Transaction for details) version (N) is the block version totalFeeNQT (S) is the total fee (in NQT) of the transactions in the block previousBlock (S) is the previous block ID cumulativeDifficulty (S) is the cumulative difficulty for the next block generation block (S) is the block ID height (N) is the zero-based block height timestamp (N) is the timestamp (in seconds since the genesis block) of the block lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Block example.","title":"Get Block"},{"location":"en/the-burst-api/#get-block-id","text":"Get a block ID given a block height. Request: requestType is getBlockId height is the block height requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: block (S) is the block ID lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Block Id example.","title":"Get Block Id"},{"location":"en/the-burst-api/#get-blocks","text":"Get blocks from the blockchain in reverse block height order. Request: requestType is getBlocks timestamp is the earliest block (in seconds since the genesis block) to retrieve (optional) firstIndex is first block to retrieve (optional, default is zero or the last block on the blockchain) lastIndex is the last block to retrieve (optional, default is firstIndex + 99) includeTransactions is true to include transaction details (optional) includeExecutedPhased is true to include approved and executed phased transactions (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: blocks (A) is an array of blocks retrieved (refer to Get Block for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Blocks example.","title":"Get Blocks"},{"location":"en/the-burst-api/#get-ec-block","text":"Get Economic Cluster block data. Request: requestType is getECBlock timestamp is the timestamp (in seconds since the genesis block) of the EC block (optional, default (or zero) is the current timestamp) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: If timestamp is more than 15 seconds before the timestamp of the last block on the blockchain, errorCode 4 is returned. Response: ecBlockHeight (N) is the EC block height ecBlockId (S) is the EC block ID timestamp (N) is the timestamp (in seconds since the genesis block) of the EC block lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get EC Block example.","title":"Get EC Block"},{"location":"en/the-burst-api/#digital-goods-store-operations","text":"In the Burst client interface , the Digital Goods Store (DGS) is referred to as Marketplace .","title":"Digital Goods Store Operations"},{"location":"en/the-burst-api/#dgs-delisting","text":"Delist a listed product. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsDelisting goods is the goods ID Response: Refer to Create Transaction Response . Example: Refer to DGS Delisting example.","title":"DGS Delisting"},{"location":"en/the-burst-api/#dgs-delivery","text":"Deliver a product. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsDelivery purchase is the purchase order ID discountNQT is a discount (in NQT) off the selling price (optional, default is zero) goodsToEncrypt is the product, a text or a hex string to be encrypted (optional if goodsData provided) goodsIsText is false if goodsToEncrypt is a hex string (optional) goodsData is AES-encrypted (using Encrypt To ) goodsToEncrypt , up to 1000 bytes long (required only if secretPhrase is omitted) goodsNonce is the unique nonce associated with the encrypted data (required only if secretPhrase is omitted) Note: If the encrypted goods data is longer than 1000 bytes, use a prunable encrypted message to deliver the goods. Response: Refer to Create Transaction Response . Example: Refer to DGS Delivery example.","title":"DGS Delivery"},{"location":"en/the-burst-api/#dgs-feedback","text":"Give feedback about a purchased product after delivery. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsFeedback purchase is the purchase order ID message is unencrypted (public) feedback text up to 1000 bytes Note : The unencrypted message parameter is used for public feedback, but in addition or instead, an encrypted message can be used for private feedback to the seller and/or an encrypted message can be sent to self (buyer) although the current BRS client does not recognize non-public feedback messages. Response: Refer to Create Transaction Response . Example: Refer to DGS Feedback example.","title":"DGS Feedback"},{"location":"en/the-burst-api/#dgs-listing","text":"List a product in the DGS by creating a listing transaction. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsListing name is the name of the product up to 100 characters in length description is a description of the product up to 1000 characters in length tags are up to three comma separated keywords describing the product up to 100 characters in length (optional) quantity is the quantity of the product for sale priceNQT is the price (in NQT) of the product Response: Refer to Create Transaction Response . The transaction ID is also the goods ID. Example: Refer to DGS Listing example.","title":"DGS Listing"},{"location":"en/the-burst-api/#dgs-price-change","text":"Change the price of a listed product. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsPriceChange goods is the goods ID of the product priceNQT is the new price of the product Response: Refer to Create Transaction Response . Example: Refer to DGS Price Change example.","title":"DGS Price Change"},{"location":"en/the-burst-api/#dgs-purchase","text":"Purchase a product for sale. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsPurchase goods is the goods ID of the product priceNQT is the price of the product quantity is the quantity to be purchased deliveryDeadlineTimestamp is the timestamp (in seconds since the genesis block) by which delivery of the product must occur Response: Refer to Create Transaction Response . The transaction ID is also the purchase order ID. Example: Refer to DGS Purchase example.","title":"DGS Purchase"},{"location":"en/the-burst-api/#dgs-quantity-change","text":"Change the quantity of a listed product. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsQuantityChange goods is the goods ID of the product deltaQuantity is the change in the quantity of the product for sale (use negative numbers for a decrease in quantity) Response: Refer to Create Transaction Response . Example: Refer to DGS Quantity Change example.","title":"DGS Quantity Change"},{"location":"en/the-burst-api/#dgs-refund","text":"Refund a purchase. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is dgsRefund purchase is the purchase order ID refundNQT is the amount (in NQT) of the refund Response: Refer to Create Transaction Response . Example: Refer to DGS Refund example.","title":"DGS Refund"},{"location":"en/the-burst-api/#get-dgs-good","text":"Get a DGS product given a goods ID. Request: requestType is getDGSGood goods is the goods ID of the product includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: seller (S) is the seller's account ID quantity (N) is the quantity of the product remaining for sale goods (S) is the ID of the product description (S) is the description of the product sellerRS (S) is the Reed-Solomon address of the seller's account requestProcessingTime (N) is the API request processing time (in millisec) delisted (B) is true if the product has been delisted, false otherwise parsedTags (A) is an array of up to three tag strings, parsed from the tags field tags (S) is the comma separated list of tags provided by the seller when the listing was created priceNQT (S) is the current price of the product numberOfPublicFeedbacks (N) is the number of public feedbacks given for the product name (S) is the name of the product numberOfPurchases (N) is the number of purchases of the product timestamp (N) is the timestamp (in seconds since the genesis block) of the creation of the product listing lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) Example: Refer to Get DGS Good example.","title":"Get DGS Good"},{"location":"en/the-burst-api/#get-dgs-goods","text":"Get DGS products for sale in reverse chronological listing creation order unless a seller is given, then in product name order. Request: requestType is getDGSGoods seller is the account ID of the product seller (optional) firstIndex is a zero-based index to the first product to retrieve (optional) lastIndex is a zero-based index to the last product to retrieve (optional) inStockOnly is false if out-of-stock products (zero quantity) are to be retrieved (optional) hideDelisted is true if delisted products are to be omitted (optional) includeCounts is true if the fields beginning with numberOf... are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Note: If none of the optional parameters are specified, all in-stock products in the blockchain are retrieved at once, which may take a long time. Response: goods (A) is an array of goods (refer to Get DGS Good for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get DGS Goods example.","title":"Get DGS Goods"},{"location":"en/the-burst-api/#get-dgs-pending-purchases","text":"Get pending purchase orders given a seller ID in reverse chronological order. Request: requestType is getDGSPendingPurchases seller is the account ID of the seller firstIndex is a zero-based index to the first purchase order to retrieve (optional) lastIndex is a zero-based index to the last purchase order to retrieve (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: purchases (A) is an array of pending purchase orders (refer to Get DGS Purchase for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get DGS Pending Purchases example.","title":"Get DGS Pending Purchases"},{"location":"en/the-burst-api/#get-dgs-purchase","text":"Get a purchase order given a purchase order ID. Request: requestType is getDGSPurchase purchase is the purchase order ID sharedKey is the shared key used to decrypt the message (optional) (see Get Shared Key ) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: seller (S) is the account number of the seller quantity (N) is the quantity of the product to be purchased feedbackNotes (A) is an array of AES-encrypted objects, each with data (S) and nonce (S) fields, in reverse chronological order, if applicable publicFeedbacks (A) is an array of feedback strings in reverse chronological order if applicable pending (B) is true if the deliveryDeadline has not passed, false otherwise purchase (S) is the purchase order ID goods (S) is the ID of the product sellerRS (S) is the Reed-Solomon address of the seller buyer (S) is the account number of the buyer priceNQT (S) is the price (in NQT) of the product deliveryDeadlineTimestamp (N) is the timestamp (in seconds since the genesis block) by which the product must be delivered goodsIsText (B) is false if the message is a hex string, otherwise the message is text (optional) buyerRS (S) is the Reed-Solomon address of the buyer refundNQT (S) is the amount (in NQT) refunded, if applicable name (S) is the name of the product goodsData (O) is an object with the two fields data (S) (the encrypted product hex string) and nonce (S), if the product has been delivered timestamp (N) is the timestamp (in seconds since the genesis block) of the purchase order lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get DGS Purchase example.","title":"Get DGS Purchase"},{"location":"en/the-burst-api/#get-dgs-purchases","text":"Get purchase orders given a seller and/or buyer ID in reverse chronological order. Request: requestType is getDGSPurchases seller is the account ID of the seller (optional) buyer is the account ID of the buyer (optional if seller provided) firstIndex is a zero-based index to the purchase order to retrieve (optional) lastIndex is a zero-based index to the purchase order to retrieve (optional) withPublicFeedbacksOnly is true if purchase orders without public feedback are to be omitted (optional) completed is true if only completed purchase orders are to be included (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: purchases (A) is an array of purchase orders (refer to Get DGS Purchase for details) lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get DGS Purchases example.","title":"Get DGS Purchases"},{"location":"en/the-burst-api/#forging-operations","text":"","title":"Forging Operations"},{"location":"en/the-burst-api/#lease-balance","text":"Lease the entire guaranteed balance of BURST to another account, after 1440 confirmations. POST only. Request: Refer to Create Transaction Request for common parameters. requestType is leaseBalance period is the lease period (in number of blocks, 1440 minimum) recipient is the lessee (recipient) account recipientPublicKey is the public key of the lessee (recipient) account (optional, enhances security of a new account) Response: Refer to Create Transaction Response . Example: Refer to Lease Balance example.","title":"Lease Balance"},{"location":"en/the-burst-api/#hallmark-operations","text":"","title":"Hallmark Operations"},{"location":"en/the-burst-api/#decode-hallmark","text":"Decode a node hallmark. Request: requestType is decodeHallmark hallmark is the hallmark value Response: valid (B) is true if host is less than 100 characters, weight > 0 and the embedded signature is verified weight (N) is the weight assigned to the hallmark host (S) is the IP address or domain name associated with the hallmark account (S) is the account number associated with the hallmark accountRS (S) is the Reed-Solomon address of the account date (S) is the date the hallmark was created, in YYYY-MM-DD format requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Decode Hallmark example.","title":"Decode Hallmark"},{"location":"en/the-burst-api/#mark-host","text":"Generates a node hallmark. POST only. Request: requestType is markHost secretPhrase is the secret passphrase for the account that will be hallmarked on the node host is the IP address or domain name of the node weight is the weight to assign to the node date is the current date in YYYY-MM-DD format Note: Refer to Create Hallmark for details. Response: hallmark (S) is the hallmark hex string requestProcessingTime (N) is the API request processing time (in millisec) Note: Refer to Create Hallmark for instructions for applying the hallmark to a public node. Example: Refer to Mark Host example.","title":"Mark Host"},{"location":"en/the-burst-api/#generate-hallmark","text":"Refer to Mark Host .","title":"Generate Hallmark"},{"location":"en/the-burst-api/#networking-operations","text":"","title":"Networking Operations"},{"location":"en/the-burst-api/#get-my-info","text":"Get hostname and address of the requesting node. Request: requestType is getMyInfo Response: host (S) is the node hostname address (S) is the node address requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get My Info example.","title":"Get My Info"},{"location":"en/the-burst-api/#get-peer","text":"Get information about a given peer. Request: requestType is getPeer peer is the IP address or domain name of the peer (plus optional port) Response: hallmark (S) is the hex string of the peer's hallmark, if it is defined downloadedVolume (N) is the number of bytes downloaded by the peer address (S) the IP address or DNS name of the peer weight (N) is the peer's weight value uploadedVolume (N) is the number of bytes uploaded by the peer version (S) is the version of the software running on the peer platform (S) is a string representing the peer's platform lastUpdated (N) is the timestamp (in seconds since the genesis block) of the last peer status update blacklisted (B) is true if the peer is blacklisted services (A) is an array of strings with the services the node provides blacklistingCause (S) is the cause of blacklisting (if blacklisted is true ) announcedAddress (S) is the name that the peer announced to the network (could be a DNS name, IP address, or any other string) application (S) is the name of the software application, typically BRS state (N) defines the state of the peer: 0 for NON_CONNECTED, 1 for CONNECTED, or 2 for DISCONNECTED shareAddress (B) is true if the address is allowed to be shared with other peers inbound (B) is true if the peer has made a request to this node inboundWebSocket (B) is true if an inbound websocket has been established from this node outboundWebSocket (B) is true if an outbound websocket has been established to this node lastConnectAttempt (B) is the timestamp (in seconds since the genesis block) of the last connection attempt to the peer requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Peer example.","title":"Get Peer"},{"location":"en/the-burst-api/#get-peers","text":"Get a list of peer IP addresses. Request: requestType is getPeers active is true for active (not NON_CONNECTED) peers only (optional, if true overrides state ) state is the state of the peers, one of NON_CONNECTED , CONNECTED , or DISCONNECTED (optional) includePeerInfo is true to include peer detail as in Get Peer service to filter on a specific service Note: If neither active nor state is specified, all known peers are retrieved. Response: peers (A) is an array of peer addresses requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Peers example.","title":"Get Peers"},{"location":"en/the-burst-api/#server-information-operations","text":"","title":"Server Information Operations"},{"location":"en/the-burst-api/#get-blockchain-status","text":"Get the blockchain status. Request: requestType is getBlockchainStatus Response: currentMinRollbackHeight (N) is the current minimum rollback height numberOfBlocks (N) is the number of blocks in the blockchain (height + 1) isTestnet (B) is true if the node is connected to testnet, false otherwise includeExpiredPrunable (B) is the value of the nxt.includeExpiredPrunable property requestProcessingTime (N) is the API request processing time (in millisec) version (S) is the application version maxRollback (N) is the value of the nxt.maxRollback property lastBlock (S) is the last block ID on the blockchain application (S) is application name, typically BRS isScanning (B) is true if the blockchain is being scanned by the application, false otherwise isDownloading (B) is true if a download is in progress, false otherwise; true when a batch of more than 10 blocks at once has been downloaded from a peer, reset to false when an attempt to download more blocks from a peer does not result in any new blocks cumulativeDifficulty (S) is the cumulative difficulty lastBlockchainFeederHeight (N) is the height of the last blockchain of greatest cumulative difficulty obtained from a peer maxPrunableLifetime (N) is the maximum prunable lifetime (in seconds) time (N) is the current timestamp (in seconds since the genesis block) lastBlockchainFeeder (S) is the address or announced address of the peer providing the last blockchain of greatest cumulative difficulty blockchainState (S) Current state of this node's blockchain (UP_TO_DATE or DOWNLOADING) Example: Refer to Get Blockchain Status example.","title":"Get Blockchain Status"},{"location":"en/the-burst-api/#get-constants","text":"Get all defined constants. Request: requestType is getConstants Response: maxBlockPayloadLength (N) is the maximum block payload length (in bytes) maxArbitraryMessageLength (N) is the maximum length (in bytes) of an arbitrary message maxPrunableMessageLength (N) is the maximum length (in bytes) of a prunable message maxTaggedDataDataLength (N) is the maximum length (in bytes) of tagged data maxPhasingDuration (N) is the maximum allowed phasing duration in block height epochBeginning (N) is the time in milliseconds when genesis block was created genesisAccountId (S) is the genesis account number genesisBlockId (S) is the genesis block ID transactionTypes (A) is an array of defined transaction types and subtypes (refer to the example below) transactionSubTypes (A) is an array of defined transaction subtypes and subtypes (refer to the example below) peerStates (A) is an array of defined peer states (refer to the example below) currencyTypes (A) is an array of defined currency types (refer to the example below) disabledAPIs (A) is an array of configured disabled apis (refer to the example below) apiTags (A) is an array of defined api tags (refer to the example below) disabledAPITags (A) is an array of configured disabled api tags (refer to the example below) votingModels (A) is an array of defined voting models (refer to the example below) holdingTypes (A) is an array of defined holding types (refer to the example below) minBalanceModels (A) is an array of defined minimum balance models (refer to the example below) shufflingStages (A) is an array of defined shuffling stages (refer to the example below) shufflingParticipantStates (A) is an array of defined shuffling participant states (refer to the example below) hashAlgorithms (A) is an array of defined hash algorithms (refer to the example below) mintingHashAlgorithms (A) is an array of defined minting hash algorithms (refer to the example below) phasingHashAlgorithms (A) is an array of defined phasing hash algorithms (refer to the example below) requestTypes (A) is an array of decined request types (refer to the example below) Example: Refer to Get Constants example.","title":"Get Constants"},{"location":"en/the-burst-api/#get-state","text":"Get the state of the server node and network. Request: requestType is getState includeCounts is true if the fields beginning with numberOf... are to be included (optional); password protected like the Debug Operations if true . Response: numberOfPeers (N) is the number of known peers on the network numberOfGoods (N) is the number of DGS goods in the blockchain numberOfPolls (N) is the number of polls in the blockchain numberOfUnlockedAccounts (N) is the number of unlocked accounts on this node numberOfTransfers (N) is the number of AE transfers in the blockchain includeExpiredPrunable (B) is the value of the nxt.includeExpiredPrunable property numberOfOrders (N) is the number of AE orders in the blockchain numberOfTransactions (N) is the number of transactions in the blockchain maxMemory (N) is the maximum amount of memory the node may use (in Bytes) maxRollback (N) is the value of the nxt.maxRollback property numberOfOffers (N) is the number of buy currency offers in the blockchain isDownloading (B) is true if a download is in progress, false otherwise; true when a batch of more than 10 blocks at once has been downloaded from a peer, reset to false when an attempt to download more blocks from a peer does not result in any new blocks isScanning (B) is true if this node is scanning the blockchain, false otherwise cumulativeDifficulty (S) is the current cumulative forging difficulty numberOfCurrencies (N) is the number of currencies in the blockchain numberOfAssets (N) is the number of AE assets in the blockchain numberOfPrunableMessages (N) is the number of prunable messages in the blockchain freeMemory (N) is the amount of free memory on this node (in Bytes) peerPort (N) is the port used for connecting to peers numberOfVotes (N) is the number of votes in the blockchain availableProcessors (N) is the number of processors on this node numberOfTaggedData (N) is the number of tagged data in the blockchain numberOfActiveAccountLeases (N) is the number of active account leases in the blockchain numberOfAccountLeases (N) is the total number of account leases including scheduled leases (first scheduled lease only) in the blockchain numberOfAccounts (N) is the number of accounts in the blockchain numberOfDataTags (N) is the number of data tags in the blockchain needsAdminPassword (B) is true if the nxt.disableAdminPassword property is false currentMinRollbackHeight (N) is the current minimum rollback height numberOfBlocks (N) is the number of blocks (height + 1) in the blockchain isTestnet (B) is true if the node is connected to testnet, false otherwise numberOfCurrencyTransfers (N) is the number of currency transfers in the blockchain requestProcessingTime (N) is the API request processing time (in millisec) numberOfPhasedTransactions (N) is the number of phased transactions in the blockchain version (S) is the software version on this node numberOfBidOrders (N) is the number of AE bid orders in the blockchain lastBlock (S) is the last block address totalMemory (N) is the amount of memory this node is using (in Bytes) application (S) is the name of the software running on this node (typically BRS ) numberOfAliases (N) is the number of aliases in the blockchain numberOfActivePeers (N) is the number of active peers on the network lastBlockchainFeederHeight (N) is the height of the last blockchain feeder maxPrunableLifetime (N) is the maximum prunable lifetime (in seconds) numberOfExchanges (N) is the number of currency exchanges in the blockchain numberOfTrades (N) is the number of AE trades in the blockchain numberOfPurchases (N) is the number of DGS purchases in the blockchain numberOfTags (N) is the number of DGS tags in the blockchain time (N) is the current node time (in seconds since the genesis block) numberOfAskOrders (N) is the number of AE ask orders in the blockchain lastBlockchainFeeder (S) is the announced name of the feeder of the last blockchain isOffline (B) is true if this node is connected to other peers, false otherwise Note: AE is Asset Exchange, DGS is Digital Goods Store Example: Refer to Get State example.","title":"Get State"},{"location":"en/the-burst-api/#get-time","text":"Get the current time. Request: requestType is getTime Response: time (N) is the current time (in seconds since the genesis block). requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Time example.","title":"Get Time"},{"location":"en/the-burst-api/#token-operations","text":"","title":"Token Operations"},{"location":"en/the-burst-api/#decode-token","text":"Validate a token without requiring the transmission of a secret passphrase. Request: requestType is decodeToken website is the signed text, typically an authorized URL token is the token generated by Generate Token Response: account (S) is the account number that generated the token accountRS (S) is the Reed-Solomon address of the account timestamp (N) is the time (in seconds since the genesis block) that the token was created valid (B) is true if token is valid, false otherwise requestProcessingTime (N) is the API request processing time (in millisec) Note: Since token contains the token generator's public key and digital signature, website can be validated as authorized by the owner of the public key, and the public key determines the account ID. Example: Refer to Decode Token example.","title":"Decode Token"},{"location":"en/the-burst-api/#generate-token","text":"Generate a token. POST only. Request: requestType is generateToken secretPhrase is the passphrase of the account generating the token website is a web site URL for which authorization should be granted, or general text to be digitally signed Note: website is typically a URL (with the leading http:// unnecessary) that an account owner signs with his secretPhrase (private key) to bind the account to the URL, but website can be any text that the owner wishes to sign. Response: token (S) is a 160 character string representing the 100-byte token which consists of a 32-byte public key, a 4-byte timestamp, and a 64-byte signature account (S) is the account number corresponding to secretPhrase accountRS (S) is the Reed-Solomon address of the account timestamp (N) is the time (in seconds since the genesis block) that the token was generated valid (B) is true if token is valid, false otherwise requestProcessingTime (N) is the API request processing time (in millisec) Note: Since token contains the token generator's public key and signature, the website can be validated as authorized by the owner of the public key using Decode Token . Example: Refer to Generate Token example.","title":"Generate Token"},{"location":"en/the-burst-api/#transaction-operations","text":"","title":"Transaction Operations"},{"location":"en/the-burst-api/#broadcast-transaction","text":"Broadcast a transaction to the network. POST only. Request: requestType is broadcastTransaction transactionBytes is the bytecode of a signed transaction (optional) transactionJSON is the transaction object (optional if transactionBytes provided) prunableAttachmentJSON is the attachment object embedded in transactionJSON containing a prunable message (required if transactionJSON not provided because transactionBytes never includes prunable data) Response: requestProcessingTime (N) is the API request processing time (in millisec) fullHash (S) is the full hash of the signed transaction transaction (S) is the transaction ID Example: Refer to Broadcast Transaction example.","title":"Broadcast Transaction"},{"location":"en/the-burst-api/#calculate-full-hash","text":"Calculate the full hash of a transaction. Request: requestType is calculateFullHash unsignedTransactionJSON is the unsigned transaction JSON object (optional) unsignedTransactionBytes are the unsigned bytes of a transaction (optional if unsignedTransactionJSON is provided) signatureHash is a SHA-256 hash of the transaction signature Response: requestProcessingTime (N) is the API request processing time (in millisec) fullHash (S) is the full hash of the signed transaction Example: Refer to Calculate Full Hash example.","title":"Calculate Full Hash"},{"location":"en/the-burst-api/#get-transaction","text":"Get a transaction object given a transaction ID. Request: requestType is getTransaction transaction is the transaction ID (optional) fullHash is the full hash of the transaction (optional if transaction ID is provided) includePhasingResult is true to retrieve execution status of each phased transaction (optional) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: sender (S) is the account ID of the sender senderRS (S) is the Reed-Solomon address of the sender feeNQT (S) is the fee (in NQT) of the transaction amountNQT (S) is the amount (in NQT) of the transaction transactionIndex (N) is a zero-based index giving the order of the transaction in its block timestamp (N) is the time (in seconds since the genesis block) of the transaction referencedTransactionFullHash (S) is the full hash of a transaction referenced by this one, omitted if no previous transaction is referenced confirmations (N) is the number of transaction confirmations subtype (N) is the transaction subtype (refer to Get Constants for a current list of subtypes) block (S) is the ID of the block containing the transaction blockTimestamp (N) is the timestamp (in seconds since the genesis block) of the block height (N) is the height of the block in the blockchain senderPublicKey (S) is the public key of the sending account for the transaction type (N) is the transaction type (refer to Get Constants for a current list of types) deadline (N) is the deadline (in minutes) for the transaction to be confirmed signature (S) is the digital signature of the transaction recipient (S) is the account number of the recipient, if applicable recipientRS (S) is the Reed-Solomon address of the recipient, if applicable fullHash (S) is the full hash of the signed transaction signatureHash (S) is a SHA-256 hash of the transaction signature approved (B) is a boolean indicating if the transaction is approved (only included when includePhasingResult is true and the transaction is phased) result (S) is a string containing the result of the transaction (only included when includePhasingResult is true and the transaction is phased) executionHeight (N) is the height the transaction was executed (only included when includePhasingResult is true and the transaction is phased) transaction (S) is the transaction ID version (N) is the transaction version number phased (B) is true if the transaction is phased, false otherwise ecBlockId (N) is the economic clustering block ID ecBlockHeight (N) is the economic clustering block height attachment (O) is an object containing any additional data needed for the transaction, if applicable lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Note: The block , blockTimestamp and confirmations fields are omitted for unconfirmed transactions. Double-spending transactions are not retrieved. Example: Refer to Get Transaction example.","title":"Get Transaction"},{"location":"en/the-burst-api/#get-transaction-bytes","text":"Get the bytecode of a transaction. Request: requestType is getTransactionBytes transaction is a transaction ID requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: confirmations (N) is the number of transaction confirmations transactionBytes (S) are the bytes contained in the transaction unsignedTransactionBytes (S) are the unsigned bytes contained in the transaction prunableAttachmentJSON (O) is the prunable attachment JSON object, if applicable, because transactionBytes never includes prunable data lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Get Transaction Bytes example.","title":"Get Transaction Bytes"},{"location":"en/the-burst-api/#parse-transaction","text":"Get a transaction object given a (signed or unsigned) transaction bytecode, or re-parse a transaction object. Verify the signature. Request: requestType is parseTransaction transactionBytes is the signed or unsigned bytecode of the transaction (optional) transactionJSON is the transaction object (optional if transactionBytes is included) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: Refer to Get Transaction for additional fields. verify (B) is true if the signature is verified, false otherwise Example: Refer to Parse Transaction example.","title":"Parse Transaction"},{"location":"en/the-burst-api/#sign-transaction","text":"Calculates the full hash, signature hash, and transaction ID of an unsigned transaction. Request: requestType is signTransaction unsignedTransactionJSON is the transactionJSON field of the transaction, without a signature subfield unsignedTransactionBytes is the unsignedTransactionBytes field of the transaction (optional, if unsignedTransactionJSON provided) prunableAttachmentJSON is a prunable attachment JSON object, if applicable, because unsignedTransactionBytes never includes prunable data (optional if the transaction has already been broadcast and the prunable message can still be retrieved from the database) secretPhrase is the secret passphrase of the signing account validate is false to skip validation of the transaction bytes being signed (useful on nodes where the full blockchain is not downloaded) requireBlock is the block ID of a block that must be present in the blockchain during execution (optional) requireLastBlock is the block ID of a block that must be last in the blockchain during execution (optional) Response: signatureHash (S) is a SHA-256 hash of the transaction signature, used in escrow transactions verify (B) is true the signature is verified, false if not transactionJSON (O) is the signed transaction JSON object transactionBytes (S) are the signed transaction bytes fullHash (S) is the full hash of the signed transaction prunableAttachmentJSON (O) is the prunable attachment JSON object, if applicable, because transactionBytes never includes prunable data transaction (S) is the transaction ID, derived from the fullHash lastBlock (S) is the last block ID on the blockchain (applies if requireBlock is provided but not requireLastBlock ) requestProcessingTime (N) is the API request processing time (in millisec) Example: Refer to Sign Transaction example.","title":"Sign Transaction"},{"location":"en/the-burst-api/#utilities","text":"","title":"Utilities"},{"location":"en/the-burst-api/#long-convert","text":"Converts an ID to the signed long integer representation used internally. Request: requestType is longConvert id is a numerical ID, in decimal form but equivalent to an 8-byte unsigned integer as produced by SHA-256 hashing Response: stringId (S) is the numerical ID longId (S) is the signed long integer (8-bytes) representation of the ID used internally, returned as a string requestProcessingTime (N) is the API request processing time (in millisec) Note: Java does not support unsigned integers, so any unsigned ID (such as a block ID) visible in the BRS client is represented internally as a signed integer. Example: Refer to Long Convert example.","title":"Long Convert"},{"location":"en/the-burst-api/#rs-convert","text":"Get both the Reed-Solomon account address and the account number given an account ID. Request: requestType is rsConvert account is an account ID (either RS address or number) Response: accountRS (S) is the Reed-Solomon address of the account requestProcessingTime (N) is the API request processing time (in millisec) account (S) is the account number Example: Refer to RS Convert example.","title":"RS Convert"},{"location":"en/transaction-and-fee-types/","text":"Introduction As of block height 500.000 the Burst blockchain supports, on top of ordinary transactions (one sender to one recipient), sending Burst from one account to multiple recipients in a single transaction. The first Pre-Dymaxion hard fork enabled using amounts below 1 Burst as transaction amounts and transaction fees. Ordinary Transactions Ordinary Burst transactions are one-to-one transactions i.e. one sender sends Burst to one recipient. They can be issued through the local or web wallet. To issue an ordinary transaction, the sender will specify the Burst account of the recipient, the amount of the transaction and the transaction fee. Optionally, users can add an arbitrary message to each outgoing transaction, which can be encrypted, in case of which the content of the message will be visible only to the recipient. The transaction will be issued by clicking the \u201cSend BURST\u201d button. Advanced options Users can issue an ordinary transaction with a number of advanced options, which enable the conditional execution of the transaction and offline transaction signing. Deadline sets the duration of transaction validity if it remains unconfirmed. The default and maximum allowed deadline is 24 hours. In case the transaction isn't confirmed within the configured deadline, it will be deleted from the mempool of the blockchain. In case the transaction expires in such a way, users will have to issue the transaction again in order to execute it. Referenced transaction hash represents a condition that has to be met before the transaction that is being issued can be confirmed. This mechanism works as follows: a transaction with hash txhash 1 has been issued. The user is currently creating transaction tx 2 . If the txhash 1 is provided as the \u201cReferences Transaction Hash\u201d, transaction tx 2 will be executed only after the transaction with txhash 1 has been confirmed. The \u201cDo Not Broadcast\u201d option prevents the signed unconfirmed transaction to be broadcast to the network. Once the transaction has been signed offline, the user can broadcast it at a later time. When the \u201cDo Not Broadcast\u201d option is checked, the user can see the raw transaction details, as shown in the image below: To broadcast the signed transaction later, the user has to save the raw transaction details in a separate file. - \u201cAdd Note to Self?\u201d - this option will allow the entry of an encrypted note for the transaction. Broadcast offline signed transactions To broadcast a transaction that has been previously signed offline, users should access \u201cTransaction Operations\u201d. The \u201cAdvanced Transaction Operations\u201d then allows for the signed transaction bytes to be broadcast to the network: Multi-out Transactions Multi-out transactions allow the sender to send Burst to up to 64 unique recipient accounts as a single transaction i.e. with considerably lower fee compared to sending the same amount through 64 ordinary transactions. Same as with ordinary transactions, multi-out transactions can be issued through local or web Burst wallets. In case the amount to be sent is same for all recipients, the \u201cSame amount\u201d option should be checked. The number of recipients in Multi-out Same transactions can be up to 128. Multi-out Transactions Lookup - Multi-out Reverse Due to design optimizations, recipients of Multi-out and Multi-out Same transactions are able to see the correct account balance in their wallets, but the details of Multi-out and Multi-out Same transactions (the sender) is not shown in the wallet. To see the details of the Multi-out transactions, recipients should use the block explorer, available at https://explore.burst.cryptoguru.org/ , insert their Burst account into the search box and access the \u201cMultiout Reverse\u201d tab, where all Multi-out transaction details are shown: Fee Types Unconfirmed transactions can be issued with arbitrary fees, with the lowest possible fee being 735.000 Plancks (0.00735000 Burst). Depending on the fee amount, unconfirmed transactions will be execute sooner or later i.e. they will be picked up into a block on the Burst blockchain. The Burst Reference Software (BRS aka wallet) is equipped with a fee suggestion tool, which suggests the amount of fee to be used for transaction, based on the transaction load on the chain in the last 10 blocks. The fee suggestion tool offers three fee amounts: Standard: 50% probability the transaction will be included in the next block Cheap: 50% probability the transaction will be included in the next 10 blocks Priority: 90% probability the transaction will be included in the next block, 99% probability the transaction will be included in the next two blocks. The fee suggestion tool can also be used using The Burst API .","title":"Transaction and Fee Types"},{"location":"en/transaction-and-fee-types/#introduction","text":"As of block height 500.000 the Burst blockchain supports, on top of ordinary transactions (one sender to one recipient), sending Burst from one account to multiple recipients in a single transaction. The first Pre-Dymaxion hard fork enabled using amounts below 1 Burst as transaction amounts and transaction fees.","title":"Introduction"},{"location":"en/transaction-and-fee-types/#ordinary-transactions","text":"Ordinary Burst transactions are one-to-one transactions i.e. one sender sends Burst to one recipient. They can be issued through the local or web wallet. To issue an ordinary transaction, the sender will specify the Burst account of the recipient, the amount of the transaction and the transaction fee. Optionally, users can add an arbitrary message to each outgoing transaction, which can be encrypted, in case of which the content of the message will be visible only to the recipient. The transaction will be issued by clicking the \u201cSend BURST\u201d button.","title":"Ordinary Transactions"},{"location":"en/transaction-and-fee-types/#advanced-options","text":"Users can issue an ordinary transaction with a number of advanced options, which enable the conditional execution of the transaction and offline transaction signing. Deadline sets the duration of transaction validity if it remains unconfirmed. The default and maximum allowed deadline is 24 hours. In case the transaction isn't confirmed within the configured deadline, it will be deleted from the mempool of the blockchain. In case the transaction expires in such a way, users will have to issue the transaction again in order to execute it. Referenced transaction hash represents a condition that has to be met before the transaction that is being issued can be confirmed. This mechanism works as follows: a transaction with hash txhash 1 has been issued. The user is currently creating transaction tx 2 . If the txhash 1 is provided as the \u201cReferences Transaction Hash\u201d, transaction tx 2 will be executed only after the transaction with txhash 1 has been confirmed. The \u201cDo Not Broadcast\u201d option prevents the signed unconfirmed transaction to be broadcast to the network. Once the transaction has been signed offline, the user can broadcast it at a later time. When the \u201cDo Not Broadcast\u201d option is checked, the user can see the raw transaction details, as shown in the image below: To broadcast the signed transaction later, the user has to save the raw transaction details in a separate file. - \u201cAdd Note to Self?\u201d - this option will allow the entry of an encrypted note for the transaction.","title":"Advanced options"},{"location":"en/transaction-and-fee-types/#broadcast-offline-signed-transactions","text":"To broadcast a transaction that has been previously signed offline, users should access \u201cTransaction Operations\u201d. The \u201cAdvanced Transaction Operations\u201d then allows for the signed transaction bytes to be broadcast to the network:","title":"Broadcast offline signed transactions"},{"location":"en/transaction-and-fee-types/#multi-out-transactions","text":"Multi-out transactions allow the sender to send Burst to up to 64 unique recipient accounts as a single transaction i.e. with considerably lower fee compared to sending the same amount through 64 ordinary transactions. Same as with ordinary transactions, multi-out transactions can be issued through local or web Burst wallets. In case the amount to be sent is same for all recipients, the \u201cSame amount\u201d option should be checked. The number of recipients in Multi-out Same transactions can be up to 128.","title":"Multi-out Transactions"},{"location":"en/transaction-and-fee-types/#multi-out-transactions-lookup-multi-out-reverse","text":"Due to design optimizations, recipients of Multi-out and Multi-out Same transactions are able to see the correct account balance in their wallets, but the details of Multi-out and Multi-out Same transactions (the sender) is not shown in the wallet. To see the details of the Multi-out transactions, recipients should use the block explorer, available at https://explore.burst.cryptoguru.org/ , insert their Burst account into the search box and access the \u201cMultiout Reverse\u201d tab, where all Multi-out transaction details are shown:","title":"Multi-out Transactions Lookup - Multi-out Reverse"},{"location":"en/transaction-and-fee-types/#fee-types","text":"Unconfirmed transactions can be issued with arbitrary fees, with the lowest possible fee being 735.000 Plancks (0.00735000 Burst). Depending on the fee amount, unconfirmed transactions will be execute sooner or later i.e. they will be picked up into a block on the Burst blockchain. The Burst Reference Software (BRS aka wallet) is equipped with a fee suggestion tool, which suggests the amount of fee to be used for transaction, based on the transaction load on the chain in the last 10 blocks. The fee suggestion tool offers three fee amounts: Standard: 50% probability the transaction will be included in the next block Cheap: 50% probability the transaction will be included in the next 10 blocks Priority: 90% probability the transaction will be included in the next block, 99% probability the transaction will be included in the next two blocks. The fee suggestion tool can also be used using The Burst API .","title":"Fee Types"},{"location":"en/whitepaper-burst/","text":"Introduction Burst has many traits from many different \u201cfathers\u201d, so it's not possible to list just one white paper. Below you will find a list of related white papers. The most recent and most constituent white paper on Burst is The Burst Dymaxion , describing the concept and implementation of a layer to the Burst blockchain which will be capable of sustaining the total global load of non-cash transactions. Nxt White Paper Burst started as a fork of Nxt . Below you will find the Nxt community white paper[1]. There was a substantial modification to the fork by carving out Proof-of-Stake (PoS) completely and replacing it with PoC (Proof-of-Capacity). Other Proof of Capacity White Papers A similar concept to Proof of Capacity is called Proof of Space and was described 2013 in the Proofs of Space paper [2] by Dziembowski, Faust, Kolmogorov and Pietrzak. Based on this paper, a Proof-of-Space cryptocurrency \u201cSpaceMint\u201d was proposed[3] in a paper by Sunoo Park, Kwon, Fuchsbauer, Pietrzak et al. Both of these papers (\u201cProof of Space\u201d and \u201cSpaceMint\u201d) are only mentioned as a loose reference and because the SpaceMint paper refers to BURST. References Nxt community white paper Proofs of Space paper by Dziembowski, Faust, Kolmogorov and Pietrzak SpaceMint paper by Sunoo Park, Kwon, Fuchsbauer, Pietrzak et al.","title":"Whitepapers"},{"location":"en/whitepaper-burst/#introduction","text":"Burst has many traits from many different \u201cfathers\u201d, so it's not possible to list just one white paper. Below you will find a list of related white papers. The most recent and most constituent white paper on Burst is The Burst Dymaxion , describing the concept and implementation of a layer to the Burst blockchain which will be capable of sustaining the total global load of non-cash transactions.","title":"Introduction"},{"location":"en/whitepaper-burst/#nxt-white-paper","text":"Burst started as a fork of Nxt . Below you will find the Nxt community white paper[1]. There was a substantial modification to the fork by carving out Proof-of-Stake (PoS) completely and replacing it with PoC (Proof-of-Capacity).","title":"Nxt White Paper"},{"location":"en/whitepaper-burst/#other-proof-of-capacity-white-papers","text":"A similar concept to Proof of Capacity is called Proof of Space and was described 2013 in the Proofs of Space paper [2] by Dziembowski, Faust, Kolmogorov and Pietrzak. Based on this paper, a Proof-of-Space cryptocurrency \u201cSpaceMint\u201d was proposed[3] in a paper by Sunoo Park, Kwon, Fuchsbauer, Pietrzak et al. Both of these papers (\u201cProof of Space\u201d and \u201cSpaceMint\u201d) are only mentioned as a loose reference and because the SpaceMint paper refers to BURST.","title":"Other Proof of Capacity White Papers"},{"location":"en/whitepaper-burst/#references","text":"Nxt community white paper Proofs of Space paper by Dziembowski, Faust, Kolmogorov and Pietrzak SpaceMint paper by Sunoo Park, Kwon, Fuchsbauer, Pietrzak et al.","title":"References"},{"location":"en/wikipedia-burstcoin/","text":"Burstcoin (also called Burst ) is a digital cryptocurrency and payment system based on the blockchain technology. Burstcoin was introduced on the bitcointalk.org forum on 10 August 2014 as an Nxt -based currency. Burstcoins are mined using an algorithm called proof-of-capacity (PoC)[1] in which miners use computer storage instead of the more common energy-expensive method proof-of-work (PoW) which involves permanent computational operations. Burst was officially introduced on the 10th of August 2014 with the goal of solving other cryptocurrencies\u2019 biggest problems : lack of decentralization, waste of energy, unfair releases, supremacy of big miners and corporations. It is the first and only cryptocurrency secured by the Proof-of-Capacity algorithm. The critical difference between Proof of Work and Burst\u2019s Proof of Capacity is that instead of needing ever more expensive, power hungry processors and graphic cards, it uses inexpensive, low-power hard drives. Proof of Capacity is inherently more secure, and trimmed versions of the blockchain are easier and more secure as well. The other biggest advantage that Proof of Capacity has going for it is its mining, working like a built-in coin faucet in the form of hard drives that allow anyone to earn free coins in exchange for providing extra security for the network. The energy requirement for Burstcoin mining is minimal compared to most other cryptocurrencies, making Burstcoin one of the most energy efficient within the field of proof-based cryptocurrencies.[2] Storage space is required however: as of March 2018, the estimated network size approached 341,000 terabytes .[3]. The Nxt blockchain platform allows for development flexibility, ensuring developers freedom to create their own applications . In this sense, Burstcoin can be considered as a next-generation cryptographic application project (often called 'cryptocurrency 2.0') in contrast to the first generation cryptocurrencies like bitcoin .[4] Burstcoin is currently being developed by the PoCC (Proof of Capacity Consortium) since December 27th 2017. The PoC Consortium developers released a new white paper titled The Burst Dymaxion .[5] It describes the implementation of a tangle-based lightning network allowing for arbitrary scalability and anonymous transactions. The Dymaxion operates with payment channels opened using the directed acyclic graph (DAG) technology on top of the Burst blockchain functionning with the Proof-of-Capacity protocol. History Origin to community takeover Burstcoin was released to the public on 10 August 2014 on bitcointalk.org by the original developer who is known under the alias \u201cBurstcoin\u201d. Their real identity is still unknown today. The coin was launched without an initial coin offering (ICO) or premine.[6] The genesis block was published on August 11th 2014.[7] Approximately one year later, the main developer \u201cBurstcoin\u201d disappeared without any explanation. Being an open source project, other members of community then took over the development of Burstcoin: on January 11th 2016, a new forum thread was created on Bitcointalk.org by a senior community member. On July 22nd 2017 an attacker spammed the Burst network with messages, causing wallets to crash and splitting the network into multiple forks.[8] The network remained unstable for several days. On August 11th 2017, in the aftermath of the spam attack, a new development team called the PoC Consortium[9] introduced itself on Bitcointalk.org. They have been recognized by the former development team as the designated successors for the Burst Reference Software.[10] Innovations Burstcoin is the first cryptocurrency to use the proof-of-capacity algorithm. Proof-of-capacity was successfully implemented by the original developer, going by the name \u201cBurstcoin\u201d on bitcointalk.org forums. Burstcoin was the first cryptocurrency to implement working, \u201c Turing complete \u201d smart contracts [11] in a live environment in the form of Automated Transactions (AT), this occurred before both Ethereum and Counterparty .[12][13][14] An application of these smart contracts was shown in the form of the world's first decentralized lottery.[15][16][17] It became the first ever program to run on top of a blockchain in a trustless decentralized manner. Other use cases of the Automated Transactions include decentralized crowdfunding .[18] A more recent innovation by Burstcoin and Qora is the Atomic cross-chain transactions (ACCT),[19] this allows for full decentralized trading between two cryptocurrencies without the need for any third-party, namely an online exchange . Cross-chain transactions have been successfully made between the blockchain of Burstcoin and Qora.[20][21] On December 27th 2017, the PoC Consortium developers released a new white paper titled The Burst Dymaxion .[22] It describes the implementation of a tangle-based lightning network allowing for arbitrary scalability and anonymous transactions. The Dymaxion operates with payment channels opened using the directed acyclic graph (DAG) technology on top of the Burst blockchain functionning with the Proof-of-Capacity protocol. Design Blockchain The Burstcoin blockchain is a public ledger that records every transaction. It is fully distributed and works without a central trusted authority: the blockchain is maintained by a network of computers known as nodes running the Burstcoin software. Ownership Ownership of Burstcoins implies that a user can spend Burstcoins linked with a specific address. For this to occur, a payer must digitally sign the transaction using the associated private key . Without knowledge of the private key, the transaction cannot be signed and Burstcoins cannot be spent. The network verifies the signature using the public key . If the private key is lost, the Burstcoin network will not recognize any other evidence of ownership; the coins are then unusable and are effectively lost. Transactions A summary of a Burstcoin transaction is as follows: The sender details the parameters for the required transaction type (sending money, creating an alias, transmitting a message, issuing an asset or an order for an asset). All values for the transaction inputs are bounds checked for validity. If the transaction is found to be valid then the public key for the generating account is computed using the supplied secret passphrase. A new transaction is created, with a type and sub-type value set to match the type of transaction being created. All specified parameters are included in the Transaction object. A unique transaction ID is generated with the creation of the object. The transaction is digitally signed using the sending account's private key . The encrypted transaction data is placed within a message instructing network peers to process the transaction. The transaction is then broadcast to all peers on the network. Burstcoin transactions are based on the Nxt code base. A detailed explanation of the transaction process can be found on its wiki page.[23] Mining (proof-of-capacity) The mining process is based on a proof-of-capacity (PoC) consensus algorithm. In order to mine Burstcoins each miner first computes a large data set which is then saved to a computer storage medium. These data sets are known as plots. For each new block in the blockchain each miner will read through a tiny subset (1/4096th - approximately 0.024%) of their own saved plots and return a result as a time interval in seconds known as a deadline, which is the time elapsed since last block creation after which this miner would be allowed to create a new block. The miner with the lowest deadline wins the block and is then rewarded with the transaction fees and the decreasing block reward of Burstcoins. The computational resources for mining are limited to the time it takes the miner to read the plot files stored on mass storage. Once this is achieved, no other computational resources are needed until the next block, making Burstcoin highly energy efficient.[24] Miners compete on the size of their plot files, rather than on equipment speed as is the case with other cryptocurrencies. Proof-of-capacity is also claimed to be ASIC -proof. Burstcoin's proof-of-capacity algorithm is based on precomputed proof-of-work , so theoretically one could compute the proofs in real time. However, it is currently impossible to efficiently compute a significant amount of work during a 4-minute time interval. Inspecting the precomputed work stored on the hard drive is both faster and more energy efficient than any conceivable ASIC device could achieve providing in real-time. Mining pools Given that it can take a long time to find the smallest deadline, some miners collectively mine in what is known as a mining pool .[25] Mining pools allow miners to have a more evenly distributed Burstcoin income: the reward for each block won by the pool is distributed between the miners of that pool (sometimes with the largest share going to the miner that found it). If a pool has a \u201cdeadline limit\u201d, it means the reward is shared only among miners whose submitted deadlines for the winning block came under the pool's deadline limit. This tends to skew payment distribution in favor of the larger miners in the pool (who have a higher probability of meeting that deadline limit for the winning block) while still distributing the proceeds to more participants than occurs with solo mining, where one miner wins 100% of the block reward. To reduce transaction fees, most pools also have a minimum payment threshold, meaning the pool must owe you at least that much before it pays you. Usage The Burstcoin cryptocurrency wallet is implemented as a Java -based Web server , which users can either run themselves (as is done by the Windows client), or, for convenience, use on somebody else's server machine (for example one hosted by a Burstcoin mining pool ), if they trust said machine not to be copying their passphrase via keystroke logging (mining pools have an obvious incentive to maintain their reputation by not compromising their convenience wallet servers). The passphrase (typically 12 dictionary words) is all that is needed to transfer funds out of an account, and any wallet server can convert such a passphrase into a public address (a string of alphanumeric characters beginning BURST- ) which is used for receiving Burstcoin, and an Account ID (an integer) which is needed to generate the \u201cplot\u201d files for mining (for example with the wplotgenerator tool). Features The core feature set of Burst is based on the Nxt platform, which allows the adding of external services to be built on top of the blockchain. Android wallet The first Android version of the Burst wallet was released in 2016[26] and was able to mine on Android devices. This app is now considered \u201coutdated\u201d by burst-coin.org[27] which instead recommends the POC Consortium wallet[28] or the BurstNation wallet.[29] These newer apps cannot mine on Android but do allow users to create wallets and to send and receive Burstcoin on any Android device. Asset Exchange The Burst Asset Exchange is a peer-to-peer exchange platform integrated into the Burst wallet. It functions primarily as a secure decentralized trading platform for Burst assets. The popularity of the asset exchange is based upon the absence of any third party, allowing improved efficiency and reduced costs. A burst asset is basically a token to represent anything the asset issuer deems to be of value so that it can be traded, common examples of such assets include shares in the following: mining pools, retirement funds, crypto mining rigs, crypto gambling sites and silver investments. Automated transactions (Smart Contracts) Smart Contracts are self-executing contractual states, stored on the blockchain.[30] In brief an Automated Transaction is a \u201c Turing complete \u201d set of byte code instructions which will be executed by a byte code interpreter built into its host. An AT supporting host platform automatically supports various applications ranging from games of chance to automated crowdfunding and ensuring that \u201clong term savings\u201d are not lost forever.[31] Crowdfunding The crowdfunding feature allows users within the Burst community to raise funds in Burst for project creators in a decentralized way. Funds are refunded if the project target is not met. Escrow service The Burstcoin Wallet has an inbuilt escrow service, which allows a quantity of Burstcoins to be held by a third party on behalf of transacting parties. Marketplace The Burstcoin Wallet includes a completely decentralized marketplace where Burstcoin users can view other users items for sale by referencing their account id. It will display all items for sale for the designated account holder.[32] Notes References [1] [2] [3] https://explore.burst.cryptoguru.org/chart/supply/network_size [4] [5] [6] [7] [8] [9] [10] [11] [12] [13] [14] [15] [16] [17] [18] [19] [20] [21] [22] [23] How Tx Processing Works [24] [25] [26] [27] Download wallet \u201cBurst-team Android wallet (outdated)\u201d [28] POC Consortium Android Wallet on Google Play Store [29] BurstNation Android Wallet on Google Play Store [30] [31] [32]","title":"Wikipedia - Burstcoin"},{"location":"en/wikipedia-burstcoin/#history","text":"","title":"History"},{"location":"en/wikipedia-burstcoin/#origin-to-community-takeover","text":"Burstcoin was released to the public on 10 August 2014 on bitcointalk.org by the original developer who is known under the alias \u201cBurstcoin\u201d. Their real identity is still unknown today. The coin was launched without an initial coin offering (ICO) or premine.[6] The genesis block was published on August 11th 2014.[7] Approximately one year later, the main developer \u201cBurstcoin\u201d disappeared without any explanation. Being an open source project, other members of community then took over the development of Burstcoin: on January 11th 2016, a new forum thread was created on Bitcointalk.org by a senior community member. On July 22nd 2017 an attacker spammed the Burst network with messages, causing wallets to crash and splitting the network into multiple forks.[8] The network remained unstable for several days. On August 11th 2017, in the aftermath of the spam attack, a new development team called the PoC Consortium[9] introduced itself on Bitcointalk.org. They have been recognized by the former development team as the designated successors for the Burst Reference Software.[10]","title":"Origin to community takeover"},{"location":"en/wikipedia-burstcoin/#innovations","text":"Burstcoin is the first cryptocurrency to use the proof-of-capacity algorithm. Proof-of-capacity was successfully implemented by the original developer, going by the name \u201cBurstcoin\u201d on bitcointalk.org forums. Burstcoin was the first cryptocurrency to implement working, \u201c Turing complete \u201d smart contracts [11] in a live environment in the form of Automated Transactions (AT), this occurred before both Ethereum and Counterparty .[12][13][14] An application of these smart contracts was shown in the form of the world's first decentralized lottery.[15][16][17] It became the first ever program to run on top of a blockchain in a trustless decentralized manner. Other use cases of the Automated Transactions include decentralized crowdfunding .[18] A more recent innovation by Burstcoin and Qora is the Atomic cross-chain transactions (ACCT),[19] this allows for full decentralized trading between two cryptocurrencies without the need for any third-party, namely an online exchange . Cross-chain transactions have been successfully made between the blockchain of Burstcoin and Qora.[20][21] On December 27th 2017, the PoC Consortium developers released a new white paper titled The Burst Dymaxion .[22] It describes the implementation of a tangle-based lightning network allowing for arbitrary scalability and anonymous transactions. The Dymaxion operates with payment channels opened using the directed acyclic graph (DAG) technology on top of the Burst blockchain functionning with the Proof-of-Capacity protocol.","title":"Innovations"},{"location":"en/wikipedia-burstcoin/#design","text":"","title":"Design"},{"location":"en/wikipedia-burstcoin/#blockchain","text":"The Burstcoin blockchain is a public ledger that records every transaction. It is fully distributed and works without a central trusted authority: the blockchain is maintained by a network of computers known as nodes running the Burstcoin software.","title":"Blockchain"},{"location":"en/wikipedia-burstcoin/#ownership","text":"Ownership of Burstcoins implies that a user can spend Burstcoins linked with a specific address. For this to occur, a payer must digitally sign the transaction using the associated private key . Without knowledge of the private key, the transaction cannot be signed and Burstcoins cannot be spent. The network verifies the signature using the public key . If the private key is lost, the Burstcoin network will not recognize any other evidence of ownership; the coins are then unusable and are effectively lost.","title":"Ownership"},{"location":"en/wikipedia-burstcoin/#transactions","text":"A summary of a Burstcoin transaction is as follows: The sender details the parameters for the required transaction type (sending money, creating an alias, transmitting a message, issuing an asset or an order for an asset). All values for the transaction inputs are bounds checked for validity. If the transaction is found to be valid then the public key for the generating account is computed using the supplied secret passphrase. A new transaction is created, with a type and sub-type value set to match the type of transaction being created. All specified parameters are included in the Transaction object. A unique transaction ID is generated with the creation of the object. The transaction is digitally signed using the sending account's private key . The encrypted transaction data is placed within a message instructing network peers to process the transaction. The transaction is then broadcast to all peers on the network. Burstcoin transactions are based on the Nxt code base. A detailed explanation of the transaction process can be found on its wiki page.[23]","title":"Transactions"},{"location":"en/wikipedia-burstcoin/#mining-proof-of-capacity","text":"The mining process is based on a proof-of-capacity (PoC) consensus algorithm. In order to mine Burstcoins each miner first computes a large data set which is then saved to a computer storage medium. These data sets are known as plots. For each new block in the blockchain each miner will read through a tiny subset (1/4096th - approximately 0.024%) of their own saved plots and return a result as a time interval in seconds known as a deadline, which is the time elapsed since last block creation after which this miner would be allowed to create a new block. The miner with the lowest deadline wins the block and is then rewarded with the transaction fees and the decreasing block reward of Burstcoins. The computational resources for mining are limited to the time it takes the miner to read the plot files stored on mass storage. Once this is achieved, no other computational resources are needed until the next block, making Burstcoin highly energy efficient.[24] Miners compete on the size of their plot files, rather than on equipment speed as is the case with other cryptocurrencies. Proof-of-capacity is also claimed to be ASIC -proof. Burstcoin's proof-of-capacity algorithm is based on precomputed proof-of-work , so theoretically one could compute the proofs in real time. However, it is currently impossible to efficiently compute a significant amount of work during a 4-minute time interval. Inspecting the precomputed work stored on the hard drive is both faster and more energy efficient than any conceivable ASIC device could achieve providing in real-time.","title":"Mining (proof-of-capacity)"},{"location":"en/wikipedia-burstcoin/#mining-pools","text":"Given that it can take a long time to find the smallest deadline, some miners collectively mine in what is known as a mining pool .[25] Mining pools allow miners to have a more evenly distributed Burstcoin income: the reward for each block won by the pool is distributed between the miners of that pool (sometimes with the largest share going to the miner that found it). If a pool has a \u201cdeadline limit\u201d, it means the reward is shared only among miners whose submitted deadlines for the winning block came under the pool's deadline limit. This tends to skew payment distribution in favor of the larger miners in the pool (who have a higher probability of meeting that deadline limit for the winning block) while still distributing the proceeds to more participants than occurs with solo mining, where one miner wins 100% of the block reward. To reduce transaction fees, most pools also have a minimum payment threshold, meaning the pool must owe you at least that much before it pays you.","title":"Mining pools"},{"location":"en/wikipedia-burstcoin/#usage","text":"The Burstcoin cryptocurrency wallet is implemented as a Java -based Web server , which users can either run themselves (as is done by the Windows client), or, for convenience, use on somebody else's server machine (for example one hosted by a Burstcoin mining pool ), if they trust said machine not to be copying their passphrase via keystroke logging (mining pools have an obvious incentive to maintain their reputation by not compromising their convenience wallet servers). The passphrase (typically 12 dictionary words) is all that is needed to transfer funds out of an account, and any wallet server can convert such a passphrase into a public address (a string of alphanumeric characters beginning BURST- ) which is used for receiving Burstcoin, and an Account ID (an integer) which is needed to generate the \u201cplot\u201d files for mining (for example with the wplotgenerator tool).","title":"Usage"},{"location":"en/wikipedia-burstcoin/#features","text":"The core feature set of Burst is based on the Nxt platform, which allows the adding of external services to be built on top of the blockchain.","title":"Features"},{"location":"en/wikipedia-burstcoin/#android-wallet","text":"The first Android version of the Burst wallet was released in 2016[26] and was able to mine on Android devices. This app is now considered \u201coutdated\u201d by burst-coin.org[27] which instead recommends the POC Consortium wallet[28] or the BurstNation wallet.[29] These newer apps cannot mine on Android but do allow users to create wallets and to send and receive Burstcoin on any Android device.","title":"Android wallet"},{"location":"en/wikipedia-burstcoin/#asset-exchange","text":"The Burst Asset Exchange is a peer-to-peer exchange platform integrated into the Burst wallet. It functions primarily as a secure decentralized trading platform for Burst assets. The popularity of the asset exchange is based upon the absence of any third party, allowing improved efficiency and reduced costs. A burst asset is basically a token to represent anything the asset issuer deems to be of value so that it can be traded, common examples of such assets include shares in the following: mining pools, retirement funds, crypto mining rigs, crypto gambling sites and silver investments.","title":"Asset Exchange"},{"location":"en/wikipedia-burstcoin/#automated-transactions-smart-contracts","text":"Smart Contracts are self-executing contractual states, stored on the blockchain.[30] In brief an Automated Transaction is a \u201c Turing complete \u201d set of byte code instructions which will be executed by a byte code interpreter built into its host. An AT supporting host platform automatically supports various applications ranging from games of chance to automated crowdfunding and ensuring that \u201clong term savings\u201d are not lost forever.[31]","title":"Automated transactions (Smart Contracts)"},{"location":"en/wikipedia-burstcoin/#crowdfunding","text":"The crowdfunding feature allows users within the Burst community to raise funds in Burst for project creators in a decentralized way. Funds are refunded if the project target is not met.","title":"Crowdfunding"},{"location":"en/wikipedia-burstcoin/#escrow-service","text":"The Burstcoin Wallet has an inbuilt escrow service, which allows a quantity of Burstcoins to be held by a third party on behalf of transacting parties.","title":"Escrow service"},{"location":"en/wikipedia-burstcoin/#marketplace","text":"The Burstcoin Wallet includes a completely decentralized marketplace where Burstcoin users can view other users items for sale by referencing their account id. It will display all items for sale for the designated account holder.[32]","title":"Marketplace"},{"location":"en/wikipedia-burstcoin/#notes","text":"","title":"Notes"},{"location":"en/wikipedia-burstcoin/#references","text":"[1] [2] [3] https://explore.burst.cryptoguru.org/chart/supply/network_size [4] [5] [6] [7] [8] [9] [10] [11] [12] [13] [14] [15] [16] [17] [18] [19] [20] [21] [22] [23] How Tx Processing Works [24] [25] [26] [27] Download wallet \u201cBurst-team Android wallet (outdated)\u201d [28] POC Consortium Android Wallet on Google Play Store [29] BurstNation Android Wallet on Google Play Store [30] [31] [32]","title":"References"},{"location":"fr/","text":"Bienvenue dans le BURST WIKI Burst est une plateforme open source de type blockchain avec de multiples fonctionnalit\u00e9s et qui est op\u00e9rationnelle depuis ao\u00fbt 2014. Il s'agit d'un Fork de Nxt qui utilise l'algorithme de consensus Proof of Capacity (PoC) ou \u201cpreuve de capacit\u00e9\u201d, ce qui signifie que vous pouvez le miner avec votre espace de disque dur. Qu'est-ce que Burst? Comment miner du Burst? A propos de Burst Qu'est-ce que Burst? Commencez avec Burst FAQ Burst - qui est qui ? Burst TODO Ressources du internet Informations g\u00e9n\u00e9rales Information pour les Exchanges Exchanges March\u00e9 The Burstcoinist (News) Plus Sites internationaux Whitepaper Burst l'histoire de Burst Fonctionnalit\u00e9s Burst R\u00e9sum\u00e9 des fonctionnalit\u00e9s Messages arbitraires Syst\u00e8me d'alias Echange d'actifs Transactions Automatis\u00e9es (Smart Contracts) March\u00e9 Logiciels Burst Logiciels utilis\u00e9s dans l'\u00e9cosyst\u00e8me Burst Burst Reference Software Derni\u00e8re Version: 2.3.0 T\u00e9l\u00e9chargement Direct Code Source Burst Application Mobile QBundle Guide Complet Minage 1. Affectation de r\u00e9compense 2. Plotting 3. Minage Pour les d\u00e9veloppeurs Les API Burst Examples d'API Burst TestNet Fichier brs-default.properties Format des adresses Reed-Solomon (RS) Proposition d'Am\u00e9lioration des Capacit\u00e9s Support BURST des tokens ERC20 Blockchain Burst Signature des transactions hors-ligne Comment fonctionne le traitement des transactions Services et outils Portefeuilles en ligne: PoCC , poolofd32th: 1 , 2 . Burst-Team: 3 , 4 , 5 TestNet: PoCC TestNet Explorateur de blockchain: PoCC , BurstXD , burstcoin.zone Service de notification de transaction : Burst Alerts Observateur de r\u00e9seau : Luxe , PoCC Burst Today Moniteur de disponibilit\u00e9 des pools Burstcoin Faucet Lists Forum: Burst-Team , GetBurst , Burst Reddit Obtenir de l'aide: Forum 1 | Forum 2 | Discord Burst | Reddit Burst Rejoins-nous! | Contribuer","title":"Page d\u2019accueil"},{"location":"fr/current-features/","text":"Current Features Status Les fonctionnalit\u00e9s actuelles de Burst comprennent : Plateforme d'\u00e9change d'actifs Jusqu'\u00e0 maintenant, pour \u00e9changer des cryptomonnaies et des actifs digitaux vous deviez vous inscrire sur une plateforme centralis\u00e9e telle que Kraken/Bter/etc, puis leur envoyer les monnaies et les payer pour effectuer des transactions. Cela cr\u00e9e un probl\u00e8me de taille: une plateforme d'\u00e9change centralis\u00e9e peut \u00e0 tout moment dispara\u00eetre avec les fonds de ses utilisateurs. Burst a d\u00e9velopp\u00e9 un syst\u00e8me d'\u00e9change d'actifs d\u00e9centralis\u00e9 en peer-to-peer au sein m\u00eame de son logiciel, ce qui permet d'effectuer des \u00e9changes d\u00e9centralis\u00e9s exempts de ces soucis de confiance, ainsi que d'\u00e9liminer les frais de trading. La m\u00eame technologie qui vous rend possible d'\u00e9changer le BURST contre n'importe quelle monnaie vous permet \u00e9galement d'\u00e9changer le BURST contre quasiment n'importe quelle marchandise. Cette fonctionnalit\u00e9 est bas\u00e9e sur le concept des \u201cpi\u00e8ces color\u00e9es\u201d. Puisque la blockchain conserve un enregistrement fiable des transactions, elle peut \u00eatre utilis\u00e9e pour tenir \u00e0 jour des entr\u00e9es sur des \u00e9changes autre que du BURST. Pour y parvenir, Burst permet de donner un nom (\u201ccolorer\u201d) une pi\u00e8ce donn\u00e9e, ce qui cr\u00e9e un pont entre la cryptomonnaie et le monde physique. La \u201cpi\u00e8ce color\u00e9e\u201d peut repr\u00e9senter une propri\u00e9t\u00e9, des actions ou des obligations, des marchandises ou m\u00eame des concepts. Par cons\u00e9quent, le r\u00e9seau du Burst peut \u00eatre utilis\u00e9 pour \u00e9changer \u00e0 peu pr\u00e8s n'importe quoi. - **[March\u00e9](marche.md)** Un protocole pour des boutiques peer-to-peer d\u00e9centralis\u00e9es pour toute sorte de biens num\u00e9riques. - ''' [Syst\u00e8me d'Alias](systeme-d-alias.md) ''' Burst int\u00e8gre un syst\u00e8me d'Alias qui traduit un texte alphanum\u00e9rique en presque n'importe quoi : une adresse Burst, une adresse mail, un num\u00e9ro de t\u00e9l\u00e9phone, un code SKU, et plus encore. Cela donne au Burst non seulement un syst\u00e8me de DNS d\u00e9centralis\u00e9, mais ajoute \u00e9galement la possibilit\u00e9 de mettre en correspondance des noms raccourcis et certaines entit\u00e9s. - ''' [Messages Arbitraires](arbitrary-messages-fr.md) ''' Cette fonctionnalit\u00e9 permet \u00e0 un utilisateur de Burst d'envoyer de petites quantit\u00e9s de donn\u00e9es via le r\u00e9seau d\u00e9centralis\u00e9. Cette caract\u00e9ristique peut \u00eatre utilis\u00e9e pour envoyer de simple messages textuels mais aussi n'importe quel format de donn\u00e9es, dans la limite de 1000 bytes par message. Par cons\u00e9quent, elle peut \u00eatre utilis\u00e9e pour construire un syst\u00e8me de partage de fichiers, d'applications d\u00e9centralis\u00e9es ainsi que des services Burst de haut niveau. Crowdfunding Burst implements a crowdfunding system which allows every burst user to set up a crowfunding.","title":"Caract\u00e9ristiques actuelles"},{"location":"fr/marketplace/","text":"Description Le march\u00e9 du Burst fournit un protocole pour des magasins d\u00e9centralis\u00e9s, en peer-to-peer, pour n'importe quelle sorte de marchandises num\u00e9riques comme des logiciels, de la musique ou de la vid\u00e9o. Vous feuilletez les produits des vendeurs, passez une commande et les vendeurs vous enverront les informations pour t\u00e9l\u00e9charger les biens. Interface du Portefeuille Pendant que le serveur est actif, acc\u00e9dez au portefeuille local Burst en allant sur http://localhost:8125/ . Sur le c\u00f4t\u00e9, vous trouvez les menus 'Place de March\u00e9' et 'Ma Boutique' : {| |- | Chercher sur le march\u00e9 : Introduisez l'ID de compte du vendeur pour voir son magasin. |- | Produits achet\u00e9s : Cette page va lister tous les produits que vous avez achet\u00e9s pr\u00e9c\u00e9demment. |- | Mes produits \u00e0 vendre : \u00c9num\u00e8re les objets que vous vendez sur le march\u00e9 et vous donne la possibilit\u00e9 de mettre \u00e0 jour vos annonces. |- | Mes ordres en attente : Ici vous verrez les ordres en attente des utilisateurs qui veulent acheter des produits. |- | Mes ventes ex\u00e9cut\u00e9es : Montre tous les commentaires de vos clients \u00e0 propos des ordres termin\u00e9s. |- | Liste des produits \u00e0 vendre : Ici vous pouvez ajouter un nouveau bien digital sur la place du march\u00e9. |} Comment faire Ouvrez votre client Burst et s\u00e9lectionnez 'Place de March\u00e9' pour acheter ou 'Ma Boutique' pour vendre. Acheter des produits Voici un petit r\u00e9capitulatif des infos essentielles sur la fa\u00e7on d'acheter au March\u00e9 : Cliquer sur le menu 'Place de March\u00e9' et ensuite 'Chercher sur le March\u00e9'. Entrer l'adresse Burst du vendeur pour voir la liste de ses marchandises. Cliquer sur le nom d'un produit pour ouvrir le dialogue d'achat. Entrez la 'Quantit\u00e9' et 'le D\u00e9lai de livraison' en heures. Ceci d\u00e9finit combien de temps vous \u00eates enclins \u00e0 attendre la livraison du vendeur jusqu'\u00e0 ce que la transaction soit annul\u00e9e. V\u00e9rifiez 2 fois les donn\u00e9es, entrez votre 'Passphrase' et cliquez sur le bouton 'acheter'. La commande a maintenant \u00e9t\u00e9 plac\u00e9e dans votre menu 'Produits Achet\u00e9s'. Ici vous pouvez voir l'\u00e9tat de la commande : Apr\u00e8s confirmation du r\u00e9seau (la g\u00e9n\u00e9ration de bloc) il passera de 'Provisoire' \u00e0 'En attente'. Quand le vendeur aura livr\u00e9 le produit, le statut passera \u00e0 'Termin\u00e9'. Cliquez sur le nom pour ouvrir la boite de dialogue 'Livraison de la place de March\u00e9 '. Entrez votre passphrase pour 'D\u00e9crypter' les messages des vendeurs. Ici vous trouverez les informations sur l'endroit o\u00f9 vous pouvez aller chercher votre produit num\u00e9rique. Vous avez maintenant la possibilit\u00e9 de laisser un commentaire au vendeur. Vente de produits Vous pouvez inscrire vos marchandises num\u00e9riques sur le march\u00e9 : Ouvrez votre client Burst et s\u00e9lectionnez 'Ma Boutique'. Cliquez sur le bouton 'Liste des produits \u00e0 vendre' dans le coin sup\u00e9rieur droit. D\u00e9crivez votre produit. Nom : le nom du produit. Description : Plus de d\u00e9tails sur le produit, pourquoi pas ajuter un lien vers un site o\u00f9 vous pr\u00e9senterez le produit en d\u00e9tails. Tags (facultatif) : Entrez des Tags s\u00e9par\u00e9s jusqu'\u00e0 trois virgule. Prix : le prix du produit en Burst par unit\u00e9. Quantit\u00e9 : le nombre de marchandises que vous avez en stock. Ceci diminuera chaque fois un acheteur ach\u00e8te chez vous. Passphrase : Votre passphrase de portefeuille est n\u00e9cessaire pour inscrire un produit. Confirmer l'offre en cliquant sur 'Mettre en vente'. Il est inscrit en italique dans la page 'Mes Produits en vente'. Apr\u00e8s que le r\u00e9seau Burst a inclus votre produit dans un bloc (en g\u00e9n\u00e9ral apr\u00e8s quelques minutes), ce sera inscrit dans la police de caract\u00e8res normale d'un lien. Quand quelqu'un a plac\u00e9 un ordre d'achat aupr\u00e8s de vous, vous le verrez dans le menu de 'Mes Commandes En attente'. Allez y et cliquez sur le bouton 'Livrer les produits'. Dans la fen\u00eatre qui va s'ouvrir, entrez votre passphrase pour d\u00e9crypter le message de l'acheteur. Vous pouvez cocher l'option 'M\u00e9moriser la passphrase pour le d\u00e9cryptage' pour vos futures ventes. Entrez les d\u00e9tails sur comment l'acheteur peut t\u00e9l\u00e9charger votre produit num\u00e9rique dans le champ 'Donn\u00e9es'. Facultativement, vous pouvez accorder 'une Remise' \u00e0 l'acheteur. Entrez votre 'Passphrase' puis cliquez sur 'livrer le produit' pour finaliser la commande. Vous pourrez trouver la commande termin\u00e9e dans le menu 'Mes Ventes Ex\u00e9cut\u00e9es'. Pour voir les d\u00e9tails, cliquez sur le nom du produit. Vous pourrez voir si le vendeur vous a laiss\u00e9 un commentaire et \u00e9ventuellement effectuer un remboursement. Liens externes burst-team.us: Forum de la Place de March\u00e9 Burst Nation: Place de March\u00e9","title":"March\u00e9"},{"location":"fr/marketplace/#description","text":"Le march\u00e9 du Burst fournit un protocole pour des magasins d\u00e9centralis\u00e9s, en peer-to-peer, pour n'importe quelle sorte de marchandises num\u00e9riques comme des logiciels, de la musique ou de la vid\u00e9o. Vous feuilletez les produits des vendeurs, passez une commande et les vendeurs vous enverront les informations pour t\u00e9l\u00e9charger les biens.","title":"Description"},{"location":"fr/marketplace/#interface-du-portefeuille","text":"Pendant que le serveur est actif, acc\u00e9dez au portefeuille local Burst en allant sur http://localhost:8125/ . Sur le c\u00f4t\u00e9, vous trouvez les menus 'Place de March\u00e9' et 'Ma Boutique' : {| |- | Chercher sur le march\u00e9 : Introduisez l'ID de compte du vendeur pour voir son magasin. |- | Produits achet\u00e9s : Cette page va lister tous les produits que vous avez achet\u00e9s pr\u00e9c\u00e9demment. |- | Mes produits \u00e0 vendre : \u00c9num\u00e8re les objets que vous vendez sur le march\u00e9 et vous donne la possibilit\u00e9 de mettre \u00e0 jour vos annonces. |- | Mes ordres en attente : Ici vous verrez les ordres en attente des utilisateurs qui veulent acheter des produits. |- | Mes ventes ex\u00e9cut\u00e9es : Montre tous les commentaires de vos clients \u00e0 propos des ordres termin\u00e9s. |- | Liste des produits \u00e0 vendre : Ici vous pouvez ajouter un nouveau bien digital sur la place du march\u00e9. |}","title":"Interface du Portefeuille"},{"location":"fr/marketplace/#comment-faire","text":"Ouvrez votre client Burst et s\u00e9lectionnez 'Place de March\u00e9' pour acheter ou 'Ma Boutique' pour vendre.","title":"Comment faire"},{"location":"fr/marketplace/#acheter-des-produits","text":"Voici un petit r\u00e9capitulatif des infos essentielles sur la fa\u00e7on d'acheter au March\u00e9 : Cliquer sur le menu 'Place de March\u00e9' et ensuite 'Chercher sur le March\u00e9'. Entrer l'adresse Burst du vendeur pour voir la liste de ses marchandises. Cliquer sur le nom d'un produit pour ouvrir le dialogue d'achat. Entrez la 'Quantit\u00e9' et 'le D\u00e9lai de livraison' en heures. Ceci d\u00e9finit combien de temps vous \u00eates enclins \u00e0 attendre la livraison du vendeur jusqu'\u00e0 ce que la transaction soit annul\u00e9e. V\u00e9rifiez 2 fois les donn\u00e9es, entrez votre 'Passphrase' et cliquez sur le bouton 'acheter'. La commande a maintenant \u00e9t\u00e9 plac\u00e9e dans votre menu 'Produits Achet\u00e9s'. Ici vous pouvez voir l'\u00e9tat de la commande : Apr\u00e8s confirmation du r\u00e9seau (la g\u00e9n\u00e9ration de bloc) il passera de 'Provisoire' \u00e0 'En attente'. Quand le vendeur aura livr\u00e9 le produit, le statut passera \u00e0 'Termin\u00e9'. Cliquez sur le nom pour ouvrir la boite de dialogue 'Livraison de la place de March\u00e9 '. Entrez votre passphrase pour 'D\u00e9crypter' les messages des vendeurs. Ici vous trouverez les informations sur l'endroit o\u00f9 vous pouvez aller chercher votre produit num\u00e9rique. Vous avez maintenant la possibilit\u00e9 de laisser un commentaire au vendeur.","title":"Acheter des produits"},{"location":"fr/marketplace/#vente-de-produits","text":"Vous pouvez inscrire vos marchandises num\u00e9riques sur le march\u00e9 : Ouvrez votre client Burst et s\u00e9lectionnez 'Ma Boutique'. Cliquez sur le bouton 'Liste des produits \u00e0 vendre' dans le coin sup\u00e9rieur droit. D\u00e9crivez votre produit. Nom : le nom du produit. Description : Plus de d\u00e9tails sur le produit, pourquoi pas ajuter un lien vers un site o\u00f9 vous pr\u00e9senterez le produit en d\u00e9tails. Tags (facultatif) : Entrez des Tags s\u00e9par\u00e9s jusqu'\u00e0 trois virgule. Prix : le prix du produit en Burst par unit\u00e9. Quantit\u00e9 : le nombre de marchandises que vous avez en stock. Ceci diminuera chaque fois un acheteur ach\u00e8te chez vous. Passphrase : Votre passphrase de portefeuille est n\u00e9cessaire pour inscrire un produit. Confirmer l'offre en cliquant sur 'Mettre en vente'. Il est inscrit en italique dans la page 'Mes Produits en vente'. Apr\u00e8s que le r\u00e9seau Burst a inclus votre produit dans un bloc (en g\u00e9n\u00e9ral apr\u00e8s quelques minutes), ce sera inscrit dans la police de caract\u00e8res normale d'un lien. Quand quelqu'un a plac\u00e9 un ordre d'achat aupr\u00e8s de vous, vous le verrez dans le menu de 'Mes Commandes En attente'. Allez y et cliquez sur le bouton 'Livrer les produits'. Dans la fen\u00eatre qui va s'ouvrir, entrez votre passphrase pour d\u00e9crypter le message de l'acheteur. Vous pouvez cocher l'option 'M\u00e9moriser la passphrase pour le d\u00e9cryptage' pour vos futures ventes. Entrez les d\u00e9tails sur comment l'acheteur peut t\u00e9l\u00e9charger votre produit num\u00e9rique dans le champ 'Donn\u00e9es'. Facultativement, vous pouvez accorder 'une Remise' \u00e0 l'acheteur. Entrez votre 'Passphrase' puis cliquez sur 'livrer le produit' pour finaliser la commande. Vous pourrez trouver la commande termin\u00e9e dans le menu 'Mes Ventes Ex\u00e9cut\u00e9es'. Pour voir les d\u00e9tails, cliquez sur le nom du produit. Vous pourrez voir si le vendeur vous a laiss\u00e9 un commentaire et \u00e9ventuellement effectuer un remboursement.","title":"Vente de produits"},{"location":"fr/marketplace/#liens-externes","text":"burst-team.us: Forum de la Place de March\u00e9 Burst Nation: Place de March\u00e9","title":"Liens externes"},{"location":"fr/qbundle/","text":"Description The easiest choice for beginners on Windows is to download Qbundle, a launcher allowing you to install the Burst local wallet in a few clicks. You can simply follow the wizard walking you through the set up. Qbundle also includes plotting and mining software to start mining easily. Initial installation guide Through https://www.burst-coin.org/download-wallet Select Qbundle, and it will direct you to the github. We will select the MSI installation in this guide, the other alternative it a self-contained \u2018zip\u2019 download that will need extraction before It can be run. This \u2018zip\u2019 version is useful if you wish to set up along side an existing installation (Provided you have first stopped the other wallet, and do not run at the same time!) We will be using the 2.0.0 version, but always download the latest release. (note the green \u2018 Latest release \u2019 indicator beside) Save the file and run when downloaded. Under windows 10, you may have the following alert: Click on \u2018More Info\u2019 to enable the download. And then \u2018Run anyway\u2019 We will then go through the setup wizard, click next. Select a directory that is not in use, and then \u2018Next\u2019 Then click \u2018Install\u2019 A warning may come up, click \u2018ok\u2019 and the installation will be completed shortly after Click \u2018Finish\u2019 to complete. Following this the setup will check for Java. Click on \u2018Download missing components\u2019 This will take a while. Once completed, click \u2018Continue\u2019 The wallet will start but you will need to enable access: Enable for \u2018Private networks\u2019 and \u2018Allow access\u2019 Bootstrap Chain / Import Blockchain You now have a working wallet, which will synch from \u2018Genesis\u2019. This will take some time, so I would advise we \u2018bootstrap\u2019 the installation. At the top of the wallet, select \u2018Database\u2019 and \u2018Bootstrap chain\u2019 Click \u2018Start Import\u2019 Installation Upgrade A warning will pop up, regarding the truncation of the existing data, click \u2018Yes\u2019 Click \u2018Yes\u2019 on the next prompt to start. The bootstrap will then download. Once complete, close the bootstrap popup. The remaining blocks will then synchronize: Please give this up to 30 minutes. The rate of import will depend upon the computer and network connection. When it is synchronised you will see something like the following (close to your current date/time) Congratulations, you now have a fully synchronised wallet, running on the H2 database! Wallet Mode In \u201cFile/Mode\u201d, you can either choose Wallet Mode or Launcher Mode. The Wallet Mode lets you to use Burst Wallet within QBundle and launcher mode allows you to access Burst wallet only through your browser. This is the launcher mode: The wallet Here's the connection screen: When you creating a new account using \u201cNew? Create Your Account!\u201d, the wallet will provide you a 12 words automatically generated passphrase that you will need to write on a paper or to memorize. Finally, here's the look of the QBundle and Burst Wallet: Frequently Asked Questions (FAQ) How to update the softwares that come with QBundle ? All softwares included in QBundle can be updated using \u2018Check for updates\u2019. This installation has an available update, notified by the \u2018New update available\u2019 at the top of the wallet. If you click on this, it will list the components that are available for download. Click \u2018Download updates\u2019: Click \u2018yes\u2019 to stop the wallet: When complete click \u2018close\u2019: If the wallet is not running, start the wallet by selecting \u2018Wallet\u2019 and \u2018Start wallet\u2019 Now, you have an upgraded QBundle: How do I see the logs of Burst Reference Software (BRS) ? Console View Console will provide a pop up window with the Wallet log and MariaDB log (if set up) this is useful for troubleshooting and the output from the console is often asked for. How do I change the settings of QBundle ? Settings If you have OpenCL correctly installed, Using GPU Acceleration will greatly improve performance. To allow external access to the wallet (so you can use it on the go) add 0.0.0.0 to the \u2018Allow API traffic from\u2019 list For troubleshooting the \u2018Debug mode\u2019 option can be useful. I have connection problems. What can I do to improve this ? Configure Firewall If you click \u2018configure firewall\u2019 it will give you an option requesting confirmation that you wish to change the windows firewall to allow access locally and over the WAN to the program on this computer. Where are stored the information about my accounts ? Account Manager Tab The account manager allows you to manage multiple accounts, and generate short \u2018PIN\u2019 numbers for each. Account Manager is accessible here: You can easily manage all you BURST accounts with this software. It provides the Reed-Solomon address and the numeric accound number of you Burst Wallet. You can also see the Public Key. Finally, your passphrase and your private key are available (you will only need to set up one pin to control many accounts) How to automaticaly startup the wallet ? Windows Service Stop wallet will stop the wallet in the background. Install as Service will allow for the automatic startup of the wallet, even before logon to windows (acting as a service) this is currently only available when running H2 Database. My wallet is stuck, how do I solve this ? Rollback chain (popoff) Advanced provides an important option for wallet issues: Rollback chain If you experience a wallet start issue, or an incomplete synch, it\u2019s suggested to pop off 1000 block and allow to re-synch. The maximum blocks that should be popped off is 1400, I don't really like H2 database... How do I change database ? Change database Changing database allows for the migration of databases, this is an advanced option. If MariaDB is selected, it will install a portable copy, and set up This may take a while Currently MariaDB will not allow the movement of data from H2 database, but in the future it will be possible to migrate the data within a synchronised database. What are the other tools available ? The tool tab provides a lot of tools that could be very helpful. Plotter XPlotter by Blago is integrated in QBundle and lets you plot your HDD using your CPU. Dynamic Plotting Dynamic plotting is a feature that will add and remove plots depending on free space in the drive. Miner Blagominer is integrated in QBundle and lets you mine plots in your HDD using your CPU. Set Reward Recipient You can set the reward recipient of your account here. It is commonly used when you plan to mine in a pool and you have to set the pool as the reward recipient of your mining. Vanity Address Generator This tool allow you to generate your own Reed-Solomon address. About Tab You will find the contributors and developer of QBundle in this tab.","title":"QBundle"},{"location":"fr/qbundle/#description","text":"The easiest choice for beginners on Windows is to download Qbundle, a launcher allowing you to install the Burst local wallet in a few clicks. You can simply follow the wizard walking you through the set up. Qbundle also includes plotting and mining software to start mining easily.","title":"Description"},{"location":"fr/qbundle/#initial-installation-guide","text":"Through https://www.burst-coin.org/download-wallet Select Qbundle, and it will direct you to the github. We will select the MSI installation in this guide, the other alternative it a self-contained \u2018zip\u2019 download that will need extraction before It can be run. This \u2018zip\u2019 version is useful if you wish to set up along side an existing installation (Provided you have first stopped the other wallet, and do not run at the same time!) We will be using the 2.0.0 version, but always download the latest release. (note the green \u2018 Latest release \u2019 indicator beside) Save the file and run when downloaded. Under windows 10, you may have the following alert: Click on \u2018More Info\u2019 to enable the download. And then \u2018Run anyway\u2019 We will then go through the setup wizard, click next. Select a directory that is not in use, and then \u2018Next\u2019 Then click \u2018Install\u2019 A warning may come up, click \u2018ok\u2019 and the installation will be completed shortly after Click \u2018Finish\u2019 to complete. Following this the setup will check for Java. Click on \u2018Download missing components\u2019 This will take a while. Once completed, click \u2018Continue\u2019 The wallet will start but you will need to enable access: Enable for \u2018Private networks\u2019 and \u2018Allow access\u2019","title":"Initial installation guide"},{"location":"fr/qbundle/#bootstrap-chain-import-blockchain","text":"You now have a working wallet, which will synch from \u2018Genesis\u2019. This will take some time, so I would advise we \u2018bootstrap\u2019 the installation. At the top of the wallet, select \u2018Database\u2019 and \u2018Bootstrap chain\u2019 Click \u2018Start Import\u2019 Installation Upgrade A warning will pop up, regarding the truncation of the existing data, click \u2018Yes\u2019 Click \u2018Yes\u2019 on the next prompt to start. The bootstrap will then download. Once complete, close the bootstrap popup. The remaining blocks will then synchronize: Please give this up to 30 minutes. The rate of import will depend upon the computer and network connection. When it is synchronised you will see something like the following (close to your current date/time) Congratulations, you now have a fully synchronised wallet, running on the H2 database!","title":"Bootstrap Chain / Import Blockchain"},{"location":"fr/qbundle/#wallet-mode","text":"In \u201cFile/Mode\u201d, you can either choose Wallet Mode or Launcher Mode. The Wallet Mode lets you to use Burst Wallet within QBundle and launcher mode allows you to access Burst wallet only through your browser. This is the launcher mode:","title":"Wallet Mode"},{"location":"fr/qbundle/#the-wallet","text":"Here's the connection screen: When you creating a new account using \u201cNew? Create Your Account!\u201d, the wallet will provide you a 12 words automatically generated passphrase that you will need to write on a paper or to memorize. Finally, here's the look of the QBundle and Burst Wallet:","title":"The wallet"},{"location":"fr/qbundle/#frequently-asked-questions-faq","text":"","title":"Frequently Asked Questions (FAQ)"},{"location":"fr/qbundle/#how-to-update-the-softwares-that-come-with-qbundle","text":"All softwares included in QBundle can be updated using \u2018Check for updates\u2019. This installation has an available update, notified by the \u2018New update available\u2019 at the top of the wallet. If you click on this, it will list the components that are available for download. Click \u2018Download updates\u2019: Click \u2018yes\u2019 to stop the wallet: When complete click \u2018close\u2019: If the wallet is not running, start the wallet by selecting \u2018Wallet\u2019 and \u2018Start wallet\u2019 Now, you have an upgraded QBundle:","title":"How to update the softwares that come with QBundle ?"},{"location":"fr/qbundle/#how-do-i-see-the-logs-of-burst-reference-software-brs","text":"","title":"How do I see the logs of Burst Reference Software (BRS) ?"},{"location":"fr/qbundle/#console","text":"View Console will provide a pop up window with the Wallet log and MariaDB log (if set up) this is useful for troubleshooting and the output from the console is often asked for.","title":"Console"},{"location":"fr/qbundle/#how-do-i-change-the-settings-of-qbundle","text":"","title":"How do I change the settings of QBundle ?"},{"location":"fr/qbundle/#settings","text":"If you have OpenCL correctly installed, Using GPU Acceleration will greatly improve performance. To allow external access to the wallet (so you can use it on the go) add 0.0.0.0 to the \u2018Allow API traffic from\u2019 list For troubleshooting the \u2018Debug mode\u2019 option can be useful.","title":"Settings"},{"location":"fr/qbundle/#i-have-connection-problems-what-can-i-do-to-improve-this","text":"","title":"I have connection problems. What can I do to improve this ?"},{"location":"fr/qbundle/#configure-firewall","text":"If you click \u2018configure firewall\u2019 it will give you an option requesting confirmation that you wish to change the windows firewall to allow access locally and over the WAN to the program on this computer.","title":"Configure Firewall"},{"location":"fr/qbundle/#where-are-stored-the-information-about-my-accounts","text":"","title":"Where are stored the information about my accounts ?"},{"location":"fr/qbundle/#account-manager-tab","text":"The account manager allows you to manage multiple accounts, and generate short \u2018PIN\u2019 numbers for each. Account Manager is accessible here: You can easily manage all you BURST accounts with this software. It provides the Reed-Solomon address and the numeric accound number of you Burst Wallet. You can also see the Public Key. Finally, your passphrase and your private key are available (you will only need to set up one pin to control many accounts)","title":"Account Manager Tab"},{"location":"fr/qbundle/#how-to-automaticaly-startup-the-wallet","text":"","title":"How to automaticaly startup the wallet ?"},{"location":"fr/qbundle/#windows-service","text":"Stop wallet will stop the wallet in the background. Install as Service will allow for the automatic startup of the wallet, even before logon to windows (acting as a service) this is currently only available when running H2 Database.","title":"Windows Service"},{"location":"fr/qbundle/#my-wallet-is-stuck-how-do-i-solve-this","text":"","title":"My wallet is stuck, how do I solve this ?"},{"location":"fr/qbundle/#rollback-chain-popoff","text":"Advanced provides an important option for wallet issues: Rollback chain If you experience a wallet start issue, or an incomplete synch, it\u2019s suggested to pop off 1000 block and allow to re-synch. The maximum blocks that should be popped off is 1400,","title":"Rollback chain (popoff)"},{"location":"fr/qbundle/#i-dont-really-like-h2-database-how-do-i-change-database","text":"","title":"I don't really like H2 database... How do I change database ?"},{"location":"fr/qbundle/#change-database","text":"Changing database allows for the migration of databases, this is an advanced option. If MariaDB is selected, it will install a portable copy, and set up This may take a while Currently MariaDB will not allow the movement of data from H2 database, but in the future it will be possible to migrate the data within a synchronised database.","title":"Change database"},{"location":"fr/qbundle/#what-are-the-other-tools-available","text":"The tool tab provides a lot of tools that could be very helpful.","title":"What are the other tools available ?"},{"location":"fr/qbundle/#plotter","text":"XPlotter by Blago is integrated in QBundle and lets you plot your HDD using your CPU.","title":"Plotter"},{"location":"fr/qbundle/#dynamic-plotting","text":"Dynamic plotting is a feature that will add and remove plots depending on free space in the drive.","title":"Dynamic Plotting"},{"location":"fr/qbundle/#miner","text":"Blagominer is integrated in QBundle and lets you mine plots in your HDD using your CPU.","title":"Miner"},{"location":"fr/qbundle/#set-reward-recipient","text":"You can set the reward recipient of your account here. It is commonly used when you plan to mine in a pool and you have to set the pool as the reward recipient of your mining.","title":"Set Reward Recipient"},{"location":"fr/qbundle/#vanity-address-generator","text":"This tool allow you to generate your own Reed-Solomon address.","title":"Vanity Address Generator"},{"location":"fr/qbundle/#about-tab","text":"You will find the contributors and developer of QBundle in this tab.","title":"About Tab"},{"location":"pt-br/","text":"Seja bem-vindo \u00e0 BURST WIKI Burst \u00e9 uma plataforma blockchain de c\u00f3digo-fonte aberto que possui m\u00faltiplas funcionalidades essenciais, funcionando cont\u00ednua e publicamente desde Agosto de 2014. Seu c\u00f3digo-fonte \u00e9 um derivado (fork) do Nxt, mas com uma transi\u00e7\u00e3o importante para o consenso Proof of Capacity (PoC), permitindo que voc\u00ea use espa\u00e7o em disco para minerar. Anima\u00e7\u00e3o em v\u00eddeo \u201cO que \u00e9 Burst\u201d Como come\u00e7ar a minerar Burst Sobre Burst O que \u00e9 Burst? Inicie com Burst FAQ Quem \u00e9 quem em Burst Global Burst TODO Recursos na Web: Informa\u00e7\u00f5es Gerais Informa\u00e7\u00f5es para Casas de C\u00e2mbio de Criptomoedas Casas de C\u00e2mbio (Exchanges) Marketplace The Burstcoinist (Not\u00edcias) Mais Websites Internacionais O Whitepaper Burst Hist\u00f3ria de Burst Funcionalidades Burst Sum\u00e1rio de Funcionalidades Mensagens Arbitr\u00e1rias Sistema de Pseud\u00f4nimos C\u00e2mbio de Ativos Transa\u00e7\u00f5es Automatizadas (Smart Contracts) Marketplace Software Burst Softwares utilizados no ecossistema Burst Software de refer\u00eancia Burst \u00daltima vers\u00e3o: 2.3.0 Download direto C\u00f3digo-fonte Burst Aplicativo M\u00f3vel Guia Completo QBundle Minera\u00e7\u00e3o 1. Atribui\u00e7\u00e3o de Endere\u00e7o para Recompensas 2. Plotagem (plotting) 3. Minera\u00e7\u00e3o Para Desenvolvedores A API Burst Exemplos de uso da API Burst TestNet O Arquivo brs-default.properties Formato de Endere\u00e7o Reed-Solomon (RS) CIP - Capability Improvement Proposal (Proposta de Melhoria de Capacidade) Suporte Burst para tokens padr\u00e3o ERC20 A Blockchain Burst Assinatura de Transa\u00e7\u00f5es Offline Como Funciona o Processamento de Transa\u00e7\u00f5es Servi\u00e7os e Ferramentas Carteiras Online: PoCC , poolofd32th: 1 , 2 . Burst-Team: 3 , 4 , 5 TestNet: PoCC TestNet Explorador da Blockchain: PoCC , BurstXD , burstcoin.zone Observador de Rede: Luxe , PoCC Burst Today Monitor de Tempo de Atividade da Pool Lista de Faucets Burstcoin Forum: Burst-Team , GetBurst , P\u00e1gina Burst no Reddit Consiga Suporte: F\u00f3rum 1 | F\u00f3rum 2 | Canal Burst no Discord | P\u00e1gina Burst no Reddit Junte-se a n\u00f3s! | Contribua","title":"Pagina inicial"},{"location":"pt-br/qbundle/","text":"Descri\u00e7\u00e3o A escolha mais r\u00e1pida para iniciantes que possuem Windows \u00e9 fazer o download do Qbundle, um instalador que te permite rodar uma carteira local em alguns cliques. Voc\u00ea pode simplesmente seguir o wizard passo-a-passo, que te guiar\u00e1 atrav\u00e9s da instala\u00e7\u00e3o. O Qbundle tamb\u00e9m inclui softwares para minera\u00e7\u00e3o e plotting, de forma que a minera\u00e7\u00e3o pode ser realizada com facilidade. Guia inicial de instala\u00e7\u00e3o Atrav\u00e9s de https://www.burst-coin.org/download-wallet Selecione Qbundle, e voc\u00ea ser\u00e1 direcionado para o github. N\u00f3s selecionaremos a instala\u00e7\u00e3o MSI para este guia. A outra alternativa \u00e9 realizar um download do arquivo 'zip', que precisar\u00e1 ser extra\u00eddo antes que possa ser executado. A vers\u00e3o 'zip' \u00e9 \u00fatil caso voc\u00ea deseja instalar uma vers\u00e3o alternativa \u00e0 instala\u00e7\u00e3o existente (desde que voc\u00ea tenha parado a execu\u00e7\u00e3o da outra carteira, e nunca rode ambas simultaneamente). We will be using the 2.0.0 version, but always download the latest release. (note the green \u2018 Latest release \u2019 indicator beside) Save the file and run when downloaded. Under windows 10, you may have the following alert: Click on \u2018More Info\u2019 to enable the download. And then \u2018Run anyway\u2019 We will then go through the setup wizard, click next. Select a directory that is not in use, and then \u2018Next\u2019 Then click \u2018Install\u2019 A warning may come up, click \u2018ok\u2019 and the installation will be completed shortly after Click \u2018Finish\u2019 to complete. Following this the setup will check for Java. Click on \u2018Download missing components\u2019 This will take a while. Once completed, click \u2018Continue\u2019 The wallet will start but you will need to enable access: Enable for \u2018Private networks\u2019 and \u2018Allow access\u2019 Bootstrap Chain / Import Blockchain You now have a working wallet, which will synch from \u2018Genesis\u2019. This will take some time, so I would advise we \u2018bootstrap\u2019 the installation. At the top of the wallet, select \u2018Database\u2019 and \u2018Bootstrap chain\u2019 Click \u2018Start Import\u2019 Installation Upgrade A warning will pop up, regarding the truncation of the existing data, click \u2018Yes\u2019 Click \u2018Yes\u2019 on the next prompt to start. The bootstrap will then download. Once complete, close the bootstrap popup. The remaining blocks will then synchronize: Please give this up to 30 minutes. The rate of import will depend upon the computer and network connection. When it is synchronised you will see something like the following (close to your current date/time) Congratulations, you now have a fully synchronised wallet, running on the H2 database! Wallet Mode In \u201cFile/Mode\u201d, you can either choose Wallet Mode or Launcher Mode. The Wallet Mode lets you to use Burst Wallet within QBundle and launcher mode allows you to access Burst wallet only through your browser. This is the launcher mode: The wallet Here's the connection screen: When you creating a new account using \u201cNew? Create Your Account!\u201d, the wallet will provide you a 12 words automatically generated passphrase that you will need to write on a paper or to memorize. Finally, here's the look of the QBundle and Burst Wallet: Frequently Asked Questions (FAQ) How to update the softwares that come with QBundle ? All softwares included in QBundle can be updated using \u2018Check for updates\u2019. This installation has an available update, notified by the \u2018New update available\u2019 at the top of the wallet. If you click on this, it will list the components that are available for download. Click \u2018Download updates\u2019: Click \u2018yes\u2019 to stop the wallet: When complete click \u2018close\u2019: If the wallet is not running, start the wallet by selecting \u2018Wallet\u2019 and \u2018Start wallet\u2019 Now, you have an upgraded QBundle: How do I see the logs of Burst Reference Software (BRS) ? Console View Console will provide a pop up window with the Wallet log and MariaDB log (if set up) this is useful for troubleshooting and the output from the console is often asked for. How do I change the settings of QBundle ? Settings If you have OpenCL correctly installed, Using GPU Acceleration will greatly improve performance. To allow external access to the wallet (so you can use it on the go) add 0.0.0.0 to the \u2018Allow API traffic from\u2019 list For troubleshooting the \u2018Debug mode\u2019 option can be useful. I have connection problems. What can I do to improve this ? Configure Firewall If you click \u2018configure firewall\u2019 it will give you an option requesting confirmation that you wish to change the windows firewall to allow access locally and over the WAN to the program on this computer. Where are stored the information about my accounts ? Account Manager Tab The account manager allows you to manage multiple accounts, and generate short \u2018PIN\u2019 numbers for each. Account Manager is accessible here: You can easily manage all you BURST accounts with this software. It provides the Reed-Solomon address and the numeric accound number of you Burst Wallet. You can also see the Public Key. Finally, your passphrase and your private key are available (you will only need to set up one pin to control many accounts) How to automaticaly startup the wallet ? Windows Service Stop wallet will stop the wallet in the background. Install as Service will allow for the automatic startup of the wallet, even before logon to windows (acting as a service) this is currently only available when running H2 Database. My wallet is stuck, how do I solve this ? Rollback chain (popoff) Advanced provides an important option for wallet issues: Rollback chain If you experience a wallet start issue, or an incomplete synch, it\u2019s suggested to pop off 1000 block and allow to re-synch. The maximum blocks that should be popped off is 1400, I don't really like H2 database... How do I change database ? Change database Changing database allows for the migration of databases, this is an advanced option. If MariaDB is selected, it will install a portable copy, and set up This may take a while Currently MariaDB will not allow the movement of data from H2 database, but in the future it will be possible to migrate the data within a synchronised database. What are the other tools available ? The tool tab provides a lot of tools that could be very helpful. Plotter XPlotter by Blago is integrated in QBundle and lets you plot your HDD using your CPU. Dynamic Plotting Dynamic plotting is a feature that will add and remove plots depending on free space in the drive. Miner Blagominer is integrated in QBundle and lets you mine plots in your HDD using your CPU. Set Reward Recipient You can set the reward recipient of your account here. It is commonly used when you plan to mine in a pool and you have to set the pool as the reward recipient of your mining. Vanity Address Generator This tool allow you to generate your own Reed-Solomon address. About Tab You will find the contributors and developer of QBundle in this tab.","title":"QBundle"},{"location":"pt-br/qbundle/#descricao","text":"A escolha mais r\u00e1pida para iniciantes que possuem Windows \u00e9 fazer o download do Qbundle, um instalador que te permite rodar uma carteira local em alguns cliques. Voc\u00ea pode simplesmente seguir o wizard passo-a-passo, que te guiar\u00e1 atrav\u00e9s da instala\u00e7\u00e3o. O Qbundle tamb\u00e9m inclui softwares para minera\u00e7\u00e3o e plotting, de forma que a minera\u00e7\u00e3o pode ser realizada com facilidade.","title":"Descri\u00e7\u00e3o"},{"location":"pt-br/qbundle/#guia-inicial-de-instalacao","text":"Atrav\u00e9s de https://www.burst-coin.org/download-wallet Selecione Qbundle, e voc\u00ea ser\u00e1 direcionado para o github. N\u00f3s selecionaremos a instala\u00e7\u00e3o MSI para este guia. A outra alternativa \u00e9 realizar um download do arquivo 'zip', que precisar\u00e1 ser extra\u00eddo antes que possa ser executado. A vers\u00e3o 'zip' \u00e9 \u00fatil caso voc\u00ea deseja instalar uma vers\u00e3o alternativa \u00e0 instala\u00e7\u00e3o existente (desde que voc\u00ea tenha parado a execu\u00e7\u00e3o da outra carteira, e nunca rode ambas simultaneamente). We will be using the 2.0.0 version, but always download the latest release. (note the green \u2018 Latest release \u2019 indicator beside) Save the file and run when downloaded. Under windows 10, you may have the following alert: Click on \u2018More Info\u2019 to enable the download. And then \u2018Run anyway\u2019 We will then go through the setup wizard, click next. Select a directory that is not in use, and then \u2018Next\u2019 Then click \u2018Install\u2019 A warning may come up, click \u2018ok\u2019 and the installation will be completed shortly after Click \u2018Finish\u2019 to complete. Following this the setup will check for Java. Click on \u2018Download missing components\u2019 This will take a while. Once completed, click \u2018Continue\u2019 The wallet will start but you will need to enable access: Enable for \u2018Private networks\u2019 and \u2018Allow access\u2019","title":"Guia inicial de instala\u00e7\u00e3o"},{"location":"pt-br/qbundle/#bootstrap-chain-import-blockchain","text":"You now have a working wallet, which will synch from \u2018Genesis\u2019. This will take some time, so I would advise we \u2018bootstrap\u2019 the installation. At the top of the wallet, select \u2018Database\u2019 and \u2018Bootstrap chain\u2019 Click \u2018Start Import\u2019 Installation Upgrade A warning will pop up, regarding the truncation of the existing data, click \u2018Yes\u2019 Click \u2018Yes\u2019 on the next prompt to start. The bootstrap will then download. Once complete, close the bootstrap popup. The remaining blocks will then synchronize: Please give this up to 30 minutes. The rate of import will depend upon the computer and network connection. When it is synchronised you will see something like the following (close to your current date/time) Congratulations, you now have a fully synchronised wallet, running on the H2 database!","title":"Bootstrap Chain / Import Blockchain"},{"location":"pt-br/qbundle/#wallet-mode","text":"In \u201cFile/Mode\u201d, you can either choose Wallet Mode or Launcher Mode. The Wallet Mode lets you to use Burst Wallet within QBundle and launcher mode allows you to access Burst wallet only through your browser. This is the launcher mode:","title":"Wallet Mode"},{"location":"pt-br/qbundle/#the-wallet","text":"Here's the connection screen: When you creating a new account using \u201cNew? Create Your Account!\u201d, the wallet will provide you a 12 words automatically generated passphrase that you will need to write on a paper or to memorize. Finally, here's the look of the QBundle and Burst Wallet:","title":"The wallet"},{"location":"pt-br/qbundle/#frequently-asked-questions-faq","text":"","title":"Frequently Asked Questions (FAQ)"},{"location":"pt-br/qbundle/#how-to-update-the-softwares-that-come-with-qbundle","text":"All softwares included in QBundle can be updated using \u2018Check for updates\u2019. This installation has an available update, notified by the \u2018New update available\u2019 at the top of the wallet. If you click on this, it will list the components that are available for download. Click \u2018Download updates\u2019: Click \u2018yes\u2019 to stop the wallet: When complete click \u2018close\u2019: If the wallet is not running, start the wallet by selecting \u2018Wallet\u2019 and \u2018Start wallet\u2019 Now, you have an upgraded QBundle:","title":"How to update the softwares that come with QBundle ?"},{"location":"pt-br/qbundle/#how-do-i-see-the-logs-of-burst-reference-software-brs","text":"","title":"How do I see the logs of Burst Reference Software (BRS) ?"},{"location":"pt-br/qbundle/#console","text":"View Console will provide a pop up window with the Wallet log and MariaDB log (if set up) this is useful for troubleshooting and the output from the console is often asked for.","title":"Console"},{"location":"pt-br/qbundle/#how-do-i-change-the-settings-of-qbundle","text":"","title":"How do I change the settings of QBundle ?"},{"location":"pt-br/qbundle/#settings","text":"If you have OpenCL correctly installed, Using GPU Acceleration will greatly improve performance. To allow external access to the wallet (so you can use it on the go) add 0.0.0.0 to the \u2018Allow API traffic from\u2019 list For troubleshooting the \u2018Debug mode\u2019 option can be useful.","title":"Settings"},{"location":"pt-br/qbundle/#i-have-connection-problems-what-can-i-do-to-improve-this","text":"","title":"I have connection problems. What can I do to improve this ?"},{"location":"pt-br/qbundle/#configure-firewall","text":"If you click \u2018configure firewall\u2019 it will give you an option requesting confirmation that you wish to change the windows firewall to allow access locally and over the WAN to the program on this computer.","title":"Configure Firewall"},{"location":"pt-br/qbundle/#where-are-stored-the-information-about-my-accounts","text":"","title":"Where are stored the information about my accounts ?"},{"location":"pt-br/qbundle/#account-manager-tab","text":"The account manager allows you to manage multiple accounts, and generate short \u2018PIN\u2019 numbers for each. Account Manager is accessible here: You can easily manage all you BURST accounts with this software. It provides the Reed-Solomon address and the numeric accound number of you Burst Wallet. You can also see the Public Key. Finally, your passphrase and your private key are available (you will only need to set up one pin to control many accounts)","title":"Account Manager Tab"},{"location":"pt-br/qbundle/#how-to-automaticaly-startup-the-wallet","text":"","title":"How to automaticaly startup the wallet ?"},{"location":"pt-br/qbundle/#windows-service","text":"Stop wallet will stop the wallet in the background. Install as Service will allow for the automatic startup of the wallet, even before logon to windows (acting as a service) this is currently only available when running H2 Database.","title":"Windows Service"},{"location":"pt-br/qbundle/#my-wallet-is-stuck-how-do-i-solve-this","text":"","title":"My wallet is stuck, how do I solve this ?"},{"location":"pt-br/qbundle/#rollback-chain-popoff","text":"Advanced provides an important option for wallet issues: Rollback chain If you experience a wallet start issue, or an incomplete synch, it\u2019s suggested to pop off 1000 block and allow to re-synch. The maximum blocks that should be popped off is 1400,","title":"Rollback chain (popoff)"},{"location":"pt-br/qbundle/#i-dont-really-like-h2-database-how-do-i-change-database","text":"","title":"I don't really like H2 database... How do I change database ?"},{"location":"pt-br/qbundle/#change-database","text":"Changing database allows for the migration of databases, this is an advanced option. If MariaDB is selected, it will install a portable copy, and set up This may take a while Currently MariaDB will not allow the movement of data from H2 database, but in the future it will be possible to migrate the data within a synchronised database.","title":"Change database"},{"location":"pt-br/qbundle/#what-are-the-other-tools-available","text":"The tool tab provides a lot of tools that could be very helpful.","title":"What are the other tools available ?"},{"location":"pt-br/qbundle/#plotter","text":"XPlotter by Blago is integrated in QBundle and lets you plot your HDD using your CPU.","title":"Plotter"},{"location":"pt-br/qbundle/#dynamic-plotting","text":"Dynamic plotting is a feature that will add and remove plots depending on free space in the drive.","title":"Dynamic Plotting"},{"location":"pt-br/qbundle/#miner","text":"Blagominer is integrated in QBundle and lets you mine plots in your HDD using your CPU.","title":"Miner"},{"location":"pt-br/qbundle/#set-reward-recipient","text":"You can set the reward recipient of your account here. It is commonly used when you plan to mine in a pool and you have to set the pool as the reward recipient of your mining.","title":"Set Reward Recipient"},{"location":"pt-br/qbundle/#vanity-address-generator","text":"This tool allow you to generate your own Reed-Solomon address.","title":"Vanity Address Generator"},{"location":"pt-br/qbundle/#about-tab","text":"You will find the contributors and developer of QBundle in this tab.","title":"About Tab"},{"location":"ru/","text":"Welcome to the BURST WIKI THIS PAGE NEEDS TRANSLATING INTO RUSSIAN Burst is an open source blockchain platform with multiple core-level features that has been running publicly since August 2014. It is a code fork of Nxt using Proof of Capacity (PoC) consensus, meaning that you can mine it with your disk space. What is Burst video animation How to start mining Burst Burst Software Burst Software Burstcoin Reference Software Latest Version: 2.3.0 Direct Download Burst Source Code Mobile App QBundle Full Guide Burst Features Arbitrary Messages Alias System Asset Exchange Automated transactions (Smart Contracts) Marketplace Summary of Features For Developers The Burst API The Burst API Examples The brs-default.properties file Reed-Solomon (RS) Address Format Burst Blockchain Tutorial QR Codes for RS Address Format Offline Transaction Signing How Transaction Processing Works Mining Reward Assignment Plotting Mining Get Support: Forum 1 | Forum 2 | Burst Discord | Burst Reddit About Burst What is Burst? Get started with Burst FAQ Website Resources General Information Information for Exchanges Exchanges Marketplace The Burstcoinist (News) More International websites Burst Whitepaper History of Burst Services and Tools Online wallets: PoCC , poolofd32th: 1 , 2 . Burst-Team: 3 , 4 , 5 TestNet: BAT Public TestNet Blockchain Explorer: BAT , PoCC , BurstXD , burstcoin.zone Network Observer: Luxe , PoCC Burst Today Pool uptime monitor Burstcoin Faucet Lists Forum: Burst-Team , GetBurst , Burst Reddit Join us! | Contribute","title":"\u0434\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"ru/burst-wiki/","text":"Burst: '\u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430 2.0' Burst \u044d\u0442\u043e \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430, \u0430 \u0442\u0430\u043a \u0436\u0435 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0435 \u0438\u043d\u0441\u0442\u0438\u0442\u0443\u0442\u044b. \u041e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 - \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 - \u0432\u043d\u0443\u0442\u0440\u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0439, \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0439 \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b. \u0423 \u043d\u0435\u0451 \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043e\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0430\u0432\u0433\u0443\u0441\u0442\u0430 2014 \u0433\u043e\u0434\u0430. Burst - \u0434\u0435\u0444\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430. \u041e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u043d\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u044b\u0442\u044b, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e, \u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 2'158'812'800 \u0448\u0442\u0443\u043a. \u041f\u0435\u0440\u0438\u043e\u0434 \u043c\u0430\u0439\u043d\u0438\u043d\u0433\u0430 Burst \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0441\u044f \u0432 2033 \u0433\u043e\u0434\u0443. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u0438 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0432\u0438\u0434\u0435\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Burst \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043e \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u043d\u0438\u0436\u0435: https://www.youtube.com/watch?v=LJLhw37Lh_8 Burst \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0430 \u0444\u043e\u0440\u0443\u043c\u0435 bitcointalk: https://bitcointalk.org/index.php?topic=731923.0 10th of August 2014] \u0441 \u0446\u0435\u043b\u044c\u044e \u0440\u0435\u0448\u0438\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0447\u0438\u043c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430\u043c: \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0418\u0437\u043b\u0438\u0448\u043d\u0438\u0439 \u0440\u0430\u0441\u0445\u043e\u0434 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u041d\u0435\u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u044b\u0439 \u043f\u0440\u0435-\u043c\u0430\u0439\u043d \u0438 ICO \u041f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0438 \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u043c\u0430\u0439\u043d\u0435\u0440\u043e\u0432 Burst \u043f\u0435\u0440\u0432\u0430\u044f \u0438 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430, \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u044d\u043d\u0435\u0440\u0433\u043e\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0451\u043c\u0430 (Proof-of-Capacity). Bitcoin \u0438 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0430\u043b\u044c\u0442\u043a\u043e\u0438\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0430\u0441\u0442\u043e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 (Proof-of-Work), \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0430\u043a \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u0430\u0442\u0430\u0441\u0442\u0440\u043e\u0444\u0443 \u0438\u0437-\u0437\u0430 \u0441\u0432\u043e\u0435\u0439 \u0438\u0437\u043b\u0438\u0448\u043d\u0435\u0439 \u044d\u043d\u0435\u0440\u0433\u043e\u0451\u043c\u043a\u043e\u0441\u0442\u0438. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0442\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u044b \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043b\u0438 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0451\u043c\u043a\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u044f \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0440\u0430\u0441\u0442\u0451\u0442 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c, \u0433\u043e\u043d\u043a\u0430 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438, \u0432\u044b\u0437\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b, \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0438 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b, \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u044b, \u0434\u043e\u0440\u043e\u0433\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u044c\u044b\u0435 \u0441\u0445\u0435\u043c\u044b \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (ASIC). \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u044d\u043d\u0435\u0440\u0433\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b, \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0442\u0440\u0430\u043d. \u0427\u0430\u0441\u0442\u043e \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u044e\u0442, \u0447\u0442\u043e \u0441\u0435\u0442\u044c \u0431\u0438\u0442\u043a\u043e\u0438\u043d\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430 \u0433\u043e\u0434 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0438\u044f. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0451\u043c\u0430 \u043e\u0442 Burst \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0432\u043d\u043e\u0446\u0435\u043d\u043d\u0443\u044e \u0437\u0430\u0449\u0438\u0442\u0443 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u0432 \u0438 \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u0436\u0435\u0441\u0442\u043a\u0438\u0445 \u0434\u0438\u0441\u043a\u043e\u0432 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0445\u044d\u0448-\u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u043e\u043a\u0440\u0430\u0442\u043d\u043e \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u0440\u0430\u0437. Burst \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0430 \u0444\u043e\u0440\u0443\u043c\u0435 bitcointalk 10-\u0433\u043e \u0430\u0432\u0433\u0443\u0441\u0442\u0430 2014 \u0433\u043e\u0434\u0430 \u0441 \u0446\u0435\u043b\u044c\u044e \u0440\u0435\u0448\u0438\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0447\u0438\u043c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430\u043c: \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0418\u0437\u043b\u0438\u0448\u043d\u0438\u0439 \u0440\u0430\u0441\u0445\u043e\u0434 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u041d\u0435\u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u041f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u043d\u0438\u0435 \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u043c\u0430\u0439\u043d\u0435\u0440\u043e\u0432 \u0438 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0446\u0438\u0439 \u042d\u0442\u043e \u043f\u0435\u0440\u0432\u0430\u044f \u0438 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430, \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u0430\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0451\u043c\u0430 (Proof-of-Capacity). \u0412\u0430\u0436\u043d\u0435\u0439\u0448\u0435\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043e\u0431\u044a\u0451\u043c\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0433\u0438\u0445, \u043f\u0440\u043e\u0436\u043e\u0440\u043b\u0438\u0432\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043e\u0432 \u0438 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0435, \u043c\u0430\u043b\u043e\u043c\u043e\u0449\u043d\u044b\u0435 \u0436\u0435\u0441\u0442\u043a\u0438\u0435 \u0434\u0438\u0441\u043a\u0438. \u0414\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u0437\u0438\u0437\u0430\u0446\u0438\u044f Burst \u0440\u0435\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0442\u0435\u043d\u0434\u0435\u043d\u0446\u0438\u0438 \u043a \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u0430\u0434\u0430\u044e\u0442 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0430\u0441\u0438\u043a\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439. ASIC \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0431\u0430\u0440\u044c\u0435\u0440\u043e\u043c \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f. \u042d\u043d\u0435\u0440\u0433\u043e\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c Burst \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438. \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 Burst \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 1/400 \u044d\u043d\u0435\u0440\u0433\u0438\u0438, \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0439 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u0431\u0438\u0442\u043a\u043e\u0438\u043d\u0435 https://www.burstcoin.ist/how-burst-puts-bitcoin-to-shame . \u042d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 Burst \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c. \u0415\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043c\u0430\u0439\u043d\u0438\u0442\u044c \u0434\u0430\u0436\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0447\u0435\u0433\u043e-\u0442\u043e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0433\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Raspberry Pi. \u0427\u0435\u0441\u0442\u043d\u044b\u0439 \u0430\u043d\u043e\u043d\u0441 Burst \u0431\u044b\u043b \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0431\u0435\u0437 \u043f\u0440\u0435\u043c\u0430\u0439\u043d\u0430 https://www.cryptocompare.com/coins/guides/what-is-a-premine/ , \u0431\u0435\u0437 \u0440\u0430\u0437\u0434\u0430\u0447\u0438 airdrop \u0438 \u0431\u0435\u0437 ICO. \u0412\u0441\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u043d\u0435\u0442\u044b Burst \u0431\u044b\u043b\u0438 \u043d\u0430\u043c\u0430\u0439\u043d\u0435\u043d\u043d\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0451\u043c\u0430. \u0420\u0430\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u044c \u0434\u043e\u0440\u043e\u0433\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0443\u0440\u0443, Burst \u0435\u0441\u0442\u044c \u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0445, \u0443 \u043a\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440. \u041d\u0435 \u0432\u0430\u0436\u043d\u043e, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0438\u043b\u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f, \u043e\u043d \u0438\u043b\u0438 \u043e\u043d\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u0440\u043e\u0433\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0434 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 \u043c\u0430\u0439\u043d\u0435\u0440\u0430\u043c\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u043c\u0438 \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435. \u0421\u0441\u044b\u043b\u043a\u0438 https://www.burstcoin.ist/how-burst-puts-bitcoin-to-shame https://www.cryptocompare.com/coins/guides/what-is-a-premine/","title":"Burst Wiki"},{"location":"ru/burst-wiki/#burst-20","text":"Burst \u044d\u0442\u043e \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430, \u0430 \u0442\u0430\u043a \u0436\u0435 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0435 \u0438\u043d\u0441\u0442\u0438\u0442\u0443\u0442\u044b. \u041e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 - \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438 - \u0432\u043d\u0443\u0442\u0440\u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0439, \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0439 \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b. \u0423 \u043d\u0435\u0451 \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043e\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0430\u0432\u0433\u0443\u0441\u0442\u0430 2014 \u0433\u043e\u0434\u0430. Burst - \u0434\u0435\u0444\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430. \u041e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u043e\u043d\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u044b\u0442\u044b, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e, \u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 2'158'812'800 \u0448\u0442\u0443\u043a. \u041f\u0435\u0440\u0438\u043e\u0434 \u043c\u0430\u0439\u043d\u0438\u043d\u0433\u0430 Burst \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0441\u044f \u0432 2033 \u0433\u043e\u0434\u0443. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u0438 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0432\u0438\u0434\u0435\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 Burst \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043e \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u043d\u0438\u0436\u0435: https://www.youtube.com/watch?v=LJLhw37Lh_8 Burst \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0430 \u0444\u043e\u0440\u0443\u043c\u0435 bitcointalk: https://bitcointalk.org/index.php?topic=731923.0 10th of August 2014] \u0441 \u0446\u0435\u043b\u044c\u044e \u0440\u0435\u0448\u0438\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0447\u0438\u043c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430\u043c: \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0418\u0437\u043b\u0438\u0448\u043d\u0438\u0439 \u0440\u0430\u0441\u0445\u043e\u0434 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u041d\u0435\u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u044b\u0439 \u043f\u0440\u0435-\u043c\u0430\u0439\u043d \u0438 ICO \u041f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0438 \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u043c\u0430\u0439\u043d\u0435\u0440\u043e\u0432 Burst \u043f\u0435\u0440\u0432\u0430\u044f \u0438 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430, \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u044d\u043d\u0435\u0440\u0433\u043e\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0451\u043c\u0430 (Proof-of-Capacity). Bitcoin \u0438 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0430\u043b\u044c\u0442\u043a\u043e\u0438\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0430\u0441\u0442\u043e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 (Proof-of-Work), \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0430\u043a \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u0430\u0442\u0430\u0441\u0442\u0440\u043e\u0444\u0443 \u0438\u0437-\u0437\u0430 \u0441\u0432\u043e\u0435\u0439 \u0438\u0437\u043b\u0438\u0448\u043d\u0435\u0439 \u044d\u043d\u0435\u0440\u0433\u043e\u0451\u043c\u043a\u043e\u0441\u0442\u0438. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0442\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u044b \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043b\u0438 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0451\u043c\u043a\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u044f \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0440\u0430\u0441\u0442\u0451\u0442 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c, \u0433\u043e\u043d\u043a\u0430 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438, \u0432\u044b\u0437\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b, \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0438 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b, \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u044b, \u0434\u043e\u0440\u043e\u0433\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u043b\u044c\u044b\u0435 \u0441\u0445\u0435\u043c\u044b \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (ASIC). \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u044d\u043d\u0435\u0440\u0433\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0440\u0430\u0431\u043e\u0442\u044b, \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0442\u0440\u0430\u043d. \u0427\u0430\u0441\u0442\u043e \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u044e\u0442, \u0447\u0442\u043e \u0441\u0435\u0442\u044c \u0431\u0438\u0442\u043a\u043e\u0438\u043d\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430 \u0433\u043e\u0434 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0438\u044f. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0451\u043c\u0430 \u043e\u0442 Burst \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0432\u043d\u043e\u0446\u0435\u043d\u043d\u0443\u044e \u0437\u0430\u0449\u0438\u0442\u0443 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043e\u0432 \u0438 \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u0436\u0435\u0441\u0442\u043a\u0438\u0445 \u0434\u0438\u0441\u043a\u043e\u0432 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0445\u044d\u0448-\u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u043e\u043a\u0440\u0430\u0442\u043d\u043e \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u0440\u0430\u0437. Burst \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0430 \u0444\u043e\u0440\u0443\u043c\u0435 bitcointalk 10-\u0433\u043e \u0430\u0432\u0433\u0443\u0441\u0442\u0430 2014 \u0433\u043e\u0434\u0430 \u0441 \u0446\u0435\u043b\u044c\u044e \u0440\u0435\u0448\u0438\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0447\u0438\u043c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430\u043c: \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0418\u0437\u043b\u0438\u0448\u043d\u0438\u0439 \u0440\u0430\u0441\u0445\u043e\u0434 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u041d\u0435\u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u041f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u043d\u0438\u0435 \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u043c\u0430\u0439\u043d\u0435\u0440\u043e\u0432 \u0438 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0446\u0438\u0439 \u042d\u0442\u043e \u043f\u0435\u0440\u0432\u0430\u044f \u0438 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430, \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u0430\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0451\u043c\u0430 (Proof-of-Capacity). \u0412\u0430\u0436\u043d\u0435\u0439\u0448\u0435\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043e\u0431\u044a\u0451\u043c\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0433\u0438\u0445, \u043f\u0440\u043e\u0436\u043e\u0440\u043b\u0438\u0432\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043e\u0432 \u0438 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0435, \u043c\u0430\u043b\u043e\u043c\u043e\u0449\u043d\u044b\u0435 \u0436\u0435\u0441\u0442\u043a\u0438\u0435 \u0434\u0438\u0441\u043a\u0438.","title":"Burst: '\u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0430 2.0'"},{"location":"ru/burst-wiki/#_1","text":"Burst \u0440\u0435\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0442\u0435\u043d\u0434\u0435\u043d\u0446\u0438\u0438 \u043a \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u0430\u0434\u0430\u044e\u0442 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0430\u0441\u0438\u043a\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439. ASIC \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0431\u0430\u0440\u044c\u0435\u0440\u043e\u043c \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f.","title":"\u0414\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u0437\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"ru/burst-wiki/#_2","text":"Burst \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438. \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 Burst \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 1/400 \u044d\u043d\u0435\u0440\u0433\u0438\u0438, \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0439 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u0431\u0438\u0442\u043a\u043e\u0438\u043d\u0435 https://www.burstcoin.ist/how-burst-puts-bitcoin-to-shame . \u042d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 Burst \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c. \u0415\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043c\u0430\u0439\u043d\u0438\u0442\u044c \u0434\u0430\u0436\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0447\u0435\u0433\u043e-\u0442\u043e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0433\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Raspberry Pi.","title":"\u042d\u043d\u0435\u0440\u0433\u043e\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c"},{"location":"ru/burst-wiki/#_3","text":"Burst \u0431\u044b\u043b \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0431\u0435\u0437 \u043f\u0440\u0435\u043c\u0430\u0439\u043d\u0430 https://www.cryptocompare.com/coins/guides/what-is-a-premine/ , \u0431\u0435\u0437 \u0440\u0430\u0437\u0434\u0430\u0447\u0438 airdrop \u0438 \u0431\u0435\u0437 ICO. \u0412\u0441\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u043d\u0435\u0442\u044b Burst \u0431\u044b\u043b\u0438 \u043d\u0430\u043c\u0430\u0439\u043d\u0435\u043d\u043d\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0451\u043c\u0430.","title":"\u0427\u0435\u0441\u0442\u043d\u044b\u0439 \u0430\u043d\u043e\u043d\u0441"},{"location":"ru/burst-wiki/#_4","text":"\u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u044c \u0434\u043e\u0440\u043e\u0433\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0443\u0440\u0443, Burst \u0435\u0441\u0442\u044c \u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0445, \u0443 \u043a\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440. \u041d\u0435 \u0432\u0430\u0436\u043d\u043e, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u0444\u0438\u043d\u0430\u043d\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0438\u043b\u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f, \u043e\u043d \u0438\u043b\u0438 \u043e\u043d\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u0440\u043e\u0433\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0434 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 \u043c\u0430\u0439\u043d\u0435\u0440\u0430\u043c\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u043c\u0438 \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435.","title":"\u0420\u0430\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"ru/burst-wiki/#_5","text":"https://www.burstcoin.ist/how-burst-puts-bitcoin-to-shame https://www.cryptocompare.com/coins/guides/what-is-a-premine/","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"ru/current-features/","text":"Current Features Status \u0422\u0435\u043a\u0443\u0449\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Burst \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0432 \u0441\u0435\u0431\u044f: \u041e\u0431\u043c\u0435\u043d \u0430\u043a\u0442\u0438\u0432\u0430\u043c\u0438 (\u0412\u044b\u043f\u0443\u0441\u043a \u0430\u043a\u0446\u0438\u0438) \u0414\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442 .. Marketplace This feature provides a protocol for decentralized, peer-to-peer stores for any kind of digital goods. ''' Alias System ''' Burst implements an alias system that translates alphanumeric text into almost anything: Burst account addresses, email addresses, URLs, phone numbers, SKU codes, and more. This not only gives Burst the ability to function as a Decentralized DNS system, but adds additional possibilities for mapping short names to other entities. ''' Arbitrary Messages ''' This feature allows Burst users to send small amounts of data through the decentralized network. These data can be encrypted. The term \u201cmessage\u201d is loose: this feature can be used to send simple text messages, but can also be used to send up to 1000 bytes of any data. As a result, it can be used to build file-sharing services, decentralized applications, and higher-level Burst services. Crowdfunding Burst implements a crowdfunding system which allows every burst user to set up a crowfunding.","title":"\u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"zh-hant/","text":"\u6b61\u8fce\u4f86\u5230 BURST WIKI Burst \u662f\u4e00\u500b \u958b\u6e90 blockchain platform with multiple core-level features that has been running publicly since August 2014. It is a code fork of Nxt using Proof of Capacity (PoC) consensus, \u610f\u601d\u5c31\u662f\u4f60\u53ef\u4ee5\u900f\u904e\u4f60\u7684\u786c\u789f\u7a7a\u9593\u6316\u7926\u3002 \u4ec0\u9ebc\u662f Burst \u5f71\u7247 \u52d5\u756b \u5982\u4f55\u958b\u59cb\u6316\u6398 Burst \u8b6f\u8005\u5c0f\u8a9e\uff1a Burst wiki \u4e2d\u6587\u5316\u7531 dana \u65bc2018/07/01\u958b\u59cb\u7ffb\u8b6f\uff0c\u76ee\u524d\u6240\u6709\u9801\u9762\u90fd\u66ab\u6642\u5148\u5c0e\u5411\u82f1\u6587\u9801\u9762\uff0c\u7b49\u5f85\u6211\u7ffb\u8b6f\u5b8c\u6210\u5f8c\u518d\u884c\u5c0e\u5411\u4e2d\u6587\u5316\u9801\u9762\uff0c\u6709\u4efb\u4f55\u7ffb\u8b6f\u5efa\u8b70\u6216\u662f\u610f\u898b\u6b61\u8fce\u4f86\u4fe1\u6307\u6559\uff0c\u8b1d\u8b1d\u3002 Burst \u8edf\u9ad4 Burst \u5ba2\u6236\u7aef \u6700\u65b0\u7248\u672c: **** \u76f4\u63a5\u4e0b\u8f09: *, * Burst \u539f\u59cb\u78bc \u884c\u52d5 APP Burst \u8edf\u9ad4\u7c21\u4ecb \u5c0d\u65bc\u958b\u767c\u4eba\u54e1 The Burst API Burst \u5340\u584a\u93c8\u6559\u5b78 Reed-Solomon (RS) \u5730\u5740\u683c\u5f0f RS\u5730\u5740\u683c\u5f0f\u7684QR\u78bc The nxt-default.properties file \u96e2\u7dda\u4ea4\u6613\u7c3d\u8b49 How Transaction Processing Works Exchange Integration Burst \u529f\u80fd \u4efb\u610f\u6d88\u606f Alias System Asset Exchange \u81ea\u52d5\u4ea4\u6613 (\u667a\u80fd\u5408\u7d04) Marketplace ''\u529f\u80fd\u6458\u8981' Burst Software Software used in Burst ecosystem Burst Reference Software \u6700\u65b0\u7248\u672c: **** \u76f4\u63a5\u4e0b\u8f09: *, * Burst Reference Software Burst Source Code Mobile App QBundle Full Guide Mining Reward Assignment Plotting Mining \u5c0d\u65bc\u958b\u767c\u4eba\u54e1 The Burst API Burst \u5340\u584a\u93c8\u6559\u5b78 Reed-Solomon (RS) \u5730\u5740\u683c\u5f0f RS\u5730\u5740\u683c\u5f0f\u7684QR\u78bc The nxt-default.properties file \u96e2\u7dda\u4ea4\u6613\u7c3d\u8b49 How Transaction Processing Works Exchange Integration \u7372\u5f97\u5e6b\u52a9: [Burst \u652f\u6301\u4e2d\u5fc3] | \u8ad6\u58c7 | Burst Discord \u95dc\u65bc Burst \u4ec0\u9ebc\u662f Burst? \u958b\u59cb\u4f7f\u7528 Burst FAQ \u7db2\u7ad9\u8cc7\u6e90 \u4e00\u822c\u8cc7\u8a0a \u4ea4\u6613 Marketplace \u9322\u5305\u4e0b\u8f09 \u8ad6\u58c7: Burst-Team , GetBurst , Burst Reddit The Burstcoinist (News) More International websites Burst Whitepaper \u6b77\u53f2 of Burst \u670d\u52d9\u8207\u5de5\u5177 \u7dda\u4e0a\u9322\u5305: PoCC , poolofd32th: 1 , 2 . Burst-Team: 3 , 4 , 5 \u5340\u584a\u93c8\u700f\u89bd\u5668: PoCC , BurstXD , burstcoin.zone \u7db2\u8defNetwork Observer: Luxe , PoCC Asset Explorer Burst What If? , Burst Today Pool uptime monitor Burstcoin Faucet Lists \u52a0\u5165\u6211\u5011! | \u8ca2\u737b","title":"\u4e3b\u9801"},{"location":"zh-hant/style-guide/","text":"\u4f55\u6642\u4f7f\u7528 BURST, Burst \u548c burst BURST \u662f\u8ca8\u5e63\u4ee3\u78bc\u3002 \u8209\u4f8b\u4f86\u8aaa \u201c\u6211\u5011\u64c1\u6709\u8db3\u5920\u7684 BURST/BTC \u4ea4\u6613\u6240, \u4f46\u6211\u5011\u9700\u8981\u4e00\u500b BURST/fiat gateway.\u201d Burst \u662f\u6307\u7db2\u8def\u3002 \u8209\u4f8b\u4f86\u8aaa \u201cBurst\u4e0d\u50c5\u50c5\u662f\u4e00\u7a2e\u767c\u9001\u6578\u5b57\u8ca8\u5e63\u7684\u65b9\u5f0f\uff0c\u5b83\u9084\u662f\u4e00\u500b\u8edf\u9ad4\u6846\u67b6\uff0c\u570d\u7e5e\u8a72\u6846\u67b6\u53ef\u4ee5\u5efa\u7acb\u4ee5\u6578\u5b57\u8ca8\u5e63\u70ba\u57fa\u790e\u7684\u5927\u91cf\u7db2\u8def\u696d\u52d9\u3002\u201d **** \u662f\u8ca8\u5e63\u7684\u4e00\u500b\u57fa\u672c\u55ae\u4f4d\u3002 \u4f8b\u5982 \u201c\u6211\u662f\u4e00\u500b ~~poor shibe~~ \u5c0f\u5229\u76ca\u76f8\u95dc\u8005\u53ea\u64c1\u67094399 \uff0c\u5982\u679c\u6709\u4eba\u80fd\u5920\u7d66\u6211 601 , \u6211\u5c07\u64c1\u6709\u4e00\u500b\u4e0d\u932f\u7684\u6578\u5b57\u3002\u201d \u7701\u7565\u975e\u5fc5\u8981\u7684\u5b57\u8a5e \u8d8a\u7c21\u6f54\u8d8a\u4e7e\u6de8\u3002 \u6700\u7c21\u55ae\u7684\u65b9\u5f0f\u5c31\u662f\u7701\u7565\u975e\u5fc5\u8981\u7684\u5b57\u8a5e\u3002 [1]. \u4f8b\u5982, \u201c...\u5e73\u5747\u6bd4\u7279\u5e63\u4ea4\u6613\u6642\u9593\u5c07\u6703\u5927\u5e45\u589e\u52a0\u52308\u523013\u5206\u9418...\u201d \u53ef\u4ee5\u7c21\u5316\u6210 \u201c...\u5e73\u5747\u6bd4\u7279\u5e63\u4ea4\u6613\u6642\u9593\u986f\u8457\u589e\u52a08-13\u5206\u9418...\u201d <\u53c3\u8003/> [1] http://www.bartleby.com/141/strunk5.html#13","title":"\u6642\u5c1a\u6307\u5357"},{"location":"zh-hant/style-guide/#burst-burst-burst","text":"BURST \u662f\u8ca8\u5e63\u4ee3\u78bc\u3002 \u8209\u4f8b\u4f86\u8aaa \u201c\u6211\u5011\u64c1\u6709\u8db3\u5920\u7684 BURST/BTC \u4ea4\u6613\u6240, \u4f46\u6211\u5011\u9700\u8981\u4e00\u500b BURST/fiat gateway.\u201d Burst \u662f\u6307\u7db2\u8def\u3002 \u8209\u4f8b\u4f86\u8aaa \u201cBurst\u4e0d\u50c5\u50c5\u662f\u4e00\u7a2e\u767c\u9001\u6578\u5b57\u8ca8\u5e63\u7684\u65b9\u5f0f\uff0c\u5b83\u9084\u662f\u4e00\u500b\u8edf\u9ad4\u6846\u67b6\uff0c\u570d\u7e5e\u8a72\u6846\u67b6\u53ef\u4ee5\u5efa\u7acb\u4ee5\u6578\u5b57\u8ca8\u5e63\u70ba\u57fa\u790e\u7684\u5927\u91cf\u7db2\u8def\u696d\u52d9\u3002\u201d **** \u662f\u8ca8\u5e63\u7684\u4e00\u500b\u57fa\u672c\u55ae\u4f4d\u3002 \u4f8b\u5982 \u201c\u6211\u662f\u4e00\u500b ~~poor shibe~~ \u5c0f\u5229\u76ca\u76f8\u95dc\u8005\u53ea\u64c1\u67094399 \uff0c\u5982\u679c\u6709\u4eba\u80fd\u5920\u7d66\u6211 601 , \u6211\u5c07\u64c1\u6709\u4e00\u500b\u4e0d\u932f\u7684\u6578\u5b57\u3002\u201d","title":"\u4f55\u6642\u4f7f\u7528 BURST, Burst \u548c burst"},{"location":"zh-hant/style-guide/#_1","text":"\u8d8a\u7c21\u6f54\u8d8a\u4e7e\u6de8\u3002 \u6700\u7c21\u55ae\u7684\u65b9\u5f0f\u5c31\u662f\u7701\u7565\u975e\u5fc5\u8981\u7684\u5b57\u8a5e\u3002 [1]. \u4f8b\u5982, \u201c...\u5e73\u5747\u6bd4\u7279\u5e63\u4ea4\u6613\u6642\u9593\u5c07\u6703\u5927\u5e45\u589e\u52a0\u52308\u523013\u5206\u9418...\u201d \u53ef\u4ee5\u7c21\u5316\u6210 \u201c...\u5e73\u5747\u6bd4\u7279\u5e63\u4ea4\u6613\u6642\u9593\u986f\u8457\u589e\u52a08-13\u5206\u9418...\u201d <\u53c3\u8003/> [1] http://www.bartleby.com/141/strunk5.html#13","title":"\u7701\u7565\u975e\u5fc5\u8981\u7684\u5b57\u8a5e"}]}